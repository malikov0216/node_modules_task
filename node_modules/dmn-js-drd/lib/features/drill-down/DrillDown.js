var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { is } from 'dmn-js-shared/lib/util/ModelUtil';

import { domify, classes as domClasses, delegate as domDelegate } from 'min-dom';

var PROVIDERS = [{
  className: 'dmn-icon-decision-table',
  matches: function matches(el) {
    var businessObject = el.businessObject;

    return is(businessObject, 'dmn:Decision') && businessObject.decisionTable;
  }
}, {
  className: 'dmn-icon-literal-expression',
  matches: function matches(el) {
    var businessObject = el.businessObject;

    return is(businessObject, 'dmn:Decision') && businessObject.literalExpression;
  }
}];

/**
 * Displays overlays that can be clicked in order to drill
 * down into a DMN 1.1 element.
 */

var DrillDown = function () {
  function DrillDown(injector, eventBus, overlays, config) {
    var _this = this;

    _classCallCheck(this, DrillDown);

    this._injector = injector;
    this._eventBus = eventBus;
    this._overlays = overlays;

    this._config = config || { enabled: true };

    eventBus.on(['shape.added'], function (_ref) {
      var element = _ref.element;


      for (var i = 0; i < PROVIDERS.length; i++) {
        var _PROVIDERS$i = PROVIDERS[i],
            matches = _PROVIDERS$i.matches,
            className = _PROVIDERS$i.className;


        var editable = matches && matches(element);

        if (editable) {
          _this.addOverlay(element, className);
        }
      }
    });
  }

  /**
   * Add overlay to an element that enables drill down.
   *
   * @param {Object} element Element to add overlay to.
   * @param {string} className
   *        CSS class that will be added to overlay in order to display icon.
   */


  _createClass(DrillDown, [{
    key: 'addOverlay',
    value: function addOverlay(element, className) {
      var html = domify('\n      <div class="drill-down-overlay">\n        <span class="' + className + '"></span>\n      </div>\n    ');

      var overlayId = this._overlays.add(element, {
        position: {
          top: 2,
          left: 2
        },
        html: html
      });

      // TODO(nikku): can we remove renamed to drillDown.enabled
      if (this._config.enabled !== false) {
        domClasses(html).add('interactive');

        this.bindEventListener(element, html, overlayId);
      }
    }

    /**
     * @param {Object} element
     * @param {Object} overlay
     * @param {string} id
     */

  }, {
    key: 'bindEventListener',
    value: function bindEventListener(element, overlay, id) {
      var _this2 = this;

      var overlays = this._overlays,
          eventBus = this._eventBus;

      var overlaysRoot = overlays._overlayRoot;

      domDelegate.bind(overlaysRoot, '[data-overlay-id="' + id + '"]', 'click', function () {

        var triggerDefault = eventBus.fire('drillDown.click', {
          element: element
        });

        if (triggerDefault === false) {
          return;
        }

        _this2.drillDown(element);
      });
    }

    /**
     * Drill down into the specific element.
     *
     * @param  {djs.model.Base} element
     *
     * @return {Boolean} whether drill down was executed
     */

  }, {
    key: 'drillDown',
    value: function drillDown(element) {

      var parent = this._injector.get('_parent', false);

      // no parent; skip drill down
      if (!parent) {
        return false;
      }

      var view = parent.getView(element.businessObject);

      // no view to drill down to
      if (!view) {
        return false;
      }

      parent.open(view);

      return true;
    }
  }]);

  return DrillDown;
}();

export default DrillDown;


DrillDown.$inject = ['injector', 'eventBus', 'overlays', 'config.drillDown'];
//# sourceMappingURL=DrillDown.js.map