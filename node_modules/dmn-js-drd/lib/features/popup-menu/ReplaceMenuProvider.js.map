{"version":3,"sources":["../../../src/features/popup-menu/ReplaceMenuProvider.js"],"names":["is","forEach","filter","replaceOptions","ReplaceMenuProvider","popupMenu","modeling","moddle","drdReplace","rules","translate","_popupMenu","_modeling","_moddle","_drdReplace","_rules","_translate","register","$inject","prototype","registerProvider","getEntries","element","businessObject","allowed","options","DECISION","option","notEmpty","actionName","decisionTable","literalExpression","notTable","notExp","_createEntries","menuEntries","self","definition","entry","_createMenuEntry","push","action","replaceElement","replaceAction","target","menuEntry","label","className","id","getHeaderEntries"],"mappings":"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","file":"ReplaceMenuProvider.js","sourcesContent":["import {\n  is\n} from 'dmn-js-shared/lib/util/ModelUtil';\n\nimport {\n  forEach,\n  filter\n} from 'min-dash';\n\nimport replaceOptions from '../replace/ReplaceOptions';\n\n\n/**\n * This module is an element agnostic replace menu provider for the popup menu.\n */\nexport default function ReplaceMenuProvider(\n    popupMenu, modeling, moddle,\n    drdReplace, rules, translate) {\n\n  this._popupMenu = popupMenu;\n  this._modeling = modeling;\n  this._moddle = moddle;\n  this._drdReplace = drdReplace;\n  this._rules = rules;\n  this._translate = translate;\n\n  this.register();\n}\n\nReplaceMenuProvider.$inject = [\n  'popupMenu',\n  'modeling',\n  'moddle',\n  'drdReplace',\n  'rules',\n  'translate'\n];\n\n\n/**\n * Register replace menu provider in the popup menu\n */\nReplaceMenuProvider.prototype.register = function() {\n  this._popupMenu.registerProvider('dmn-replace', this);\n};\n\n\n/**\n * Get all entries from replaceOptions for the given element.\n *\n * @param {djs.model.Base} element\n *\n * @return {Array<Object>} a list of menu entry items\n */\nReplaceMenuProvider.prototype.getEntries = function(element) {\n\n  var businessObject = element.businessObject;\n\n  var rules = this._rules;\n\n  if (!rules.allowed('shape.replace', { element: element })) {\n    return [];\n  }\n\n  if (is(businessObject, 'dmn:Decision')) {\n\n    var options = filter(replaceOptions.DECISION, function(option) {\n      var notEmpty = (\n        option.actionName === 'replace-with-empty-decision' &&\n          (businessObject.decisionTable || businessObject.literalExpression)\n      );\n      var notTable = (\n        option.actionName === 'replace-with-decision-table' &&\n          !businessObject.decisionTable\n      );\n      var notExp = (\n        option.actionName === 'replace-with-literal-expression' &&\n          !businessObject.literalExpression\n      );\n\n      return notEmpty || notTable || notExp;\n    });\n\n    return this._createEntries(element, options);\n  }\n\n  return [];\n};\n\n\n/**\n * Creates an array of menu entry objects for a given element.\n *\n * @param  {djs.model.Base} element\n * @param  {Object} replaceOptions\n *\n * @return {Array<Object>} a list of menu items\n */\nReplaceMenuProvider.prototype._createEntries = function(element, replaceOptions) {\n  var menuEntries = [];\n\n  var self = this;\n\n  forEach(replaceOptions, function(definition) {\n    var entry = self._createMenuEntry(definition, element);\n\n    menuEntries.push(entry);\n  });\n\n  return menuEntries;\n};\n\n\n/**\n * Creates and returns a single menu entry item.\n *\n * @param  {Object} definition a single replace options definition object\n * @param  {djs.model.Base} element\n * @param  {Function} [action] an action callback function which gets called when\n *                             the menu entry is being triggered.\n *\n * @return {Object} menu entry item\n */\nReplaceMenuProvider.prototype._createMenuEntry = function(definition, element, action) {\n  var replaceElement = this._drdReplace.replaceElement;\n  var translate = this._translate;\n\n  var replaceAction = function() {\n    return replaceElement(element, definition.target);\n  };\n\n  action = action || replaceAction;\n\n  var menuEntry = {\n    label: translate(definition.label),\n    className: definition.className,\n    id: definition.actionName,\n    action: action\n  };\n\n  return menuEntry;\n};\n\nReplaceMenuProvider.prototype.getHeaderEntries = function(element) {\n  return [];\n};\n"]}