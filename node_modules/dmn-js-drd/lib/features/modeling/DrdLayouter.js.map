{"version":3,"sources":["../../../src/features/modeling/DrdLayouter.js"],"names":["inherits","BaseLayouter","getMid","DrdLayouter","prototype","layoutConnection","connection","hints","source","target","waypoints","start","connectionStart","end","connectionEnd","middle","slice","length","getConnectionDocking","concat","point","shape","original"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;;AAEA,OAAOC,YAAP,MAAyB,oCAAzB;;AAEA,SACEC,MADF,QAEO,kCAFP;;AAIA,eAAe,SAASC,WAAT,GAAuB,CAAE;;AAExCH,SAASG,WAAT,EAAsBF,YAAtB;;AAGAE,YAAYC,SAAZ,CAAsBC,gBAAtB,GAAyC,UAASC,UAAT,EAAqBC,KAArB,EAA4B;;AAEnEA,UAAQA,SAAS,EAAjB;;AAEA,MAAIC,SAASF,WAAWE,MAAxB;AAAA,MACIC,SAASH,WAAWG,MADxB;AAAA,MAEIC,YAAYJ,WAAWI,SAF3B;AAAA,MAGIC,QAAQJ,MAAMK,eAHlB;AAAA,MAIIC,MAAMN,MAAMO,aAJhB;AAAA,MAKIC,MALJ;;AAOAL,cAAYA,aAAa,EAAzB;;AAEAK,WAASL,UAAUM,KAAV,CAAgB,CAAhB,EAAmBN,UAAUO,MAAV,GAAmB,CAAtC,CAAT;;AAEA,MAAI,CAACN,KAAL,EAAY;AACVA,YAAQO,qBAAqBR,aAAaA,UAAU,CAAV,CAAlC,EAAgDF,MAAhD,CAAR;AACD;;AAED,MAAI,CAACK,GAAL,EAAU;AACRA,UAAMK,qBAAqBR,aAAaA,UAAUA,UAAUO,MAAV,GAAmB,CAA7B,CAAlC,EAAmER,MAAnE,CAAN;AACD;;AAED,SAAO,CAAEE,KAAF,EAAUQ,MAAV,CAAiBJ,MAAjB,EAAyB,CAAEF,GAAF,CAAzB,CAAP;AACD,CAxBD;;AA0BA,SAASK,oBAAT,CAA8BE,KAA9B,EAAqCC,KAArC,EAA4C;AAC1C,SAAOD,QAASA,MAAME,QAAN,IAAkBF,KAA3B,GAAoClB,OAAOmB,KAAP,CAA3C;AACD","file":"DrdLayouter.js","sourcesContent":["import inherits from 'inherits';\n\nimport BaseLayouter from 'diagram-js/lib/layout/BaseLayouter';\n\nimport {\n  getMid\n} from 'diagram-js/lib/layout/LayoutUtil';\n\nexport default function DrdLayouter() {}\n\ninherits(DrdLayouter, BaseLayouter);\n\n\nDrdLayouter.prototype.layoutConnection = function(connection, hints) {\n\n  hints = hints || {};\n\n  var source = connection.source,\n      target = connection.target,\n      waypoints = connection.waypoints,\n      start = hints.connectionStart,\n      end = hints.connectionEnd,\n      middle;\n\n  waypoints = waypoints || [];\n\n  middle = waypoints.slice(1, waypoints.length - 1);\n\n  if (!start) {\n    start = getConnectionDocking(waypoints && waypoints[0], source);\n  }\n\n  if (!end) {\n    end = getConnectionDocking(waypoints && waypoints[waypoints.length - 1], target);\n  }\n\n  return [ start ].concat(middle, [ end ]);\n};\n\nfunction getConnectionDocking(point, shape) {\n  return point ? (point.original || point) : getMid(shape);\n}\n"]}