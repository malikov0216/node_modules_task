{"version":3,"sources":["../../../../src/features/modeling/behavior/ReplaceElementBehavior.js"],"names":["inherits","forEach","filter","CommandInterceptor","ReplaceElementBehaviour","eventBus","modeling","call","_modeling","postExecuted","e","context","oldShape","newShape","newId","id","unclaimId","businessObject","updateProperties","outgoing","connection","bo","extensionElements","extension","$instanceOf","sourceRef","href","requiredDecision","$parent","values","$type","source","$inject"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;;AAEA,SACEC,OADF,EAEEC,MAFF,QAGO,UAHP;;AAKA,OAAOC,kBAAP,MAA+B,2CAA/B;;AAGA;;;;AAIA,eAAe,SAASC,uBAAT,CAAiCC,QAAjC,EAA2CC,QAA3C,EAAqD;AAClEH,qBAAmBI,IAAnB,CAAwB,IAAxB,EAA8BF,QAA9B;;AAEA,OAAKG,SAAL,GAAiBF,QAAjB;;AAEA,OAAKG,YAAL,CAAkB,CAAE,eAAF,CAAlB,EAAuC,IAAvC,EAA6C,UAASC,CAAT,EAAY;AACvD,QAAIC,UAAUD,EAAEC,OAAhB;AAAA,QACIC,WAAWD,QAAQC,QADvB;AAAA,QAEIC,WAAWF,QAAQE,QAFvB;AAAA,QAGIC,QAAQD,SAASE,EAHrB;;AAMAT,aAASU,SAAT,CAAmBJ,SAASK,cAAT,CAAwBF,EAA3C,EAA+CH,SAASK,cAAxD;AACAX,aAASY,gBAAT,CAA0BL,QAA1B,EAAoC,EAAEE,IAAIH,SAASG,EAAf,EAApC;;AAEA;AACAd,YAAQY,SAASM,QAAjB,EAA2B,UAASC,UAAT,EAAqB;AAC9C,UAAIC,KAAKD,WAAWH,cAApB;AAAA,UACIK,iBADJ;AAAA,UAEIC,SAFJ;;AAIA,UAAIF,GAAGG,WAAH,CAAe,iBAAf,CAAJ,EAAuC;AACrCH,WAAGI,SAAH,CAAaC,IAAb,GAAoB,MAAMd,SAASG,EAAnC;AACAO,4BAAoBD,GAAGC,iBAAvB;AACD,OAHD,MAGO;AACLD,WAAGM,gBAAH,CAAoBD,IAApB,GAA2B,MAAMd,SAASG,EAA1C;AACAO,4BAAoBD,GAAGO,OAAH,CAAWN,iBAA/B;AACD;;AAEDC,kBAAYrB,OAAOoB,kBAAkBO,MAAzB,EAAiC,UAASN,SAAT,EAAoB;AAC/D,eAAOA,UAAUO,KAAV,KAAoB,YAApB,IAAoCP,UAAUQ,MAAV,KAAqBjB,KAAhE;AACD,OAFW,EAET,CAFS,CAAZ;;AAIA,UAAIS,SAAJ,EAAe;AACbA,kBAAUQ,MAAV,GAAmBnB,SAASG,EAA5B;AACD;AACF,KApBD;AAqBD,GAhCD;AAiCD;;AAEDf,SAASI,uBAAT,EAAkCD,kBAAlC;;AAEAC,wBAAwB4B,OAAxB,GAAkC,CAAE,UAAF,EAAc,UAAd,CAAlC","file":"ReplaceElementBehavior.js","sourcesContent":["import inherits from 'inherits';\n\nimport {\n  forEach,\n  filter\n} from 'min-dash';\n\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\n\n/**\n * Defines the behaviour of what happens to the elements inside a container\n * that morphs into another DRD element\n */\nexport default function ReplaceElementBehaviour(eventBus, modeling) {\n  CommandInterceptor.call(this, eventBus);\n\n  this._modeling = modeling;\n\n  this.postExecuted([ 'shape.replace' ], 1500, function(e) {\n    var context = e.context,\n        oldShape = context.oldShape,\n        newShape = context.newShape,\n        newId = newShape.id;\n\n\n    modeling.unclaimId(oldShape.businessObject.id, oldShape.businessObject);\n    modeling.updateProperties(newShape, { id: oldShape.id });\n\n    // update id of target connection references\n    forEach(newShape.outgoing, function(connection) {\n      var bo = connection.businessObject,\n          extensionElements,\n          extension;\n\n      if (bo.$instanceOf('dmn:Association')) {\n        bo.sourceRef.href = '#' + oldShape.id;\n        extensionElements = bo.extensionElements;\n      } else {\n        bo.requiredDecision.href = '#' + oldShape.id;\n        extensionElements = bo.$parent.extensionElements;\n      }\n\n      extension = filter(extensionElements.values, function(extension) {\n        return extension.$type === 'biodi:Edge' && extension.source === newId;\n      })[0];\n\n      if (extension) {\n        extension.source = oldShape.id;\n      }\n    });\n  });\n}\n\ninherits(ReplaceElementBehaviour, CommandInterceptor);\n\nReplaceElementBehaviour.$inject = [ 'eventBus', 'modeling' ];\n"]}