{"version":3,"sources":["../../../../src/features/modeling/behavior/ReplaceConnectionBehavior.js"],"names":["inherits","filter","CommandInterceptor","ReplaceConnectionBehavior","eventBus","modeling","drdRules","call","fixConnection","connection","source","target","parent","replacementAttrs","canConnect","type","waypoints","slice","removeConnection","connect","postExecuted","event","extensionElements","context","businessObject","values","extension","$type","oldSource","id","splice","indexOf","$inject"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;;AAEA,SACEC,MADF,QAEO,UAFP;;AAIA,OAAOC,kBAAP,MAA+B,2CAA/B;;AAGA,eAAe,SAASC,yBAAT,CAAmCC,QAAnC,EAA6CC,QAA7C,EAAuDC,QAAvD,EAAiE;;AAE9EJ,qBAAmBK,IAAnB,CAAwB,IAAxB,EAA8BH,QAA9B;;AAEA,WAASI,aAAT,CAAuBC,UAAvB,EAAmC;;AAEjC,QAAIC,SAASD,WAAWC,MAAxB;AAAA,QACIC,SAASF,WAAWE,MADxB;AAAA,QAEIC,SAASH,WAAWG,MAFxB;AAAA,QAGIC,gBAHJ;;AAKA;AACA;AACA;AACA,QAAI,CAACD,MAAL,EAAa;AACX;AACD;;AAEDC,uBAAmBP,SAASQ,UAAT,CAAoBJ,MAApB,EAA4BC,MAA5B,KAAuC,EAAEI,MAAM,iBAAR,EAA1D;AACAF,qBAAiBG,SAAjB,GAA6BP,WAAWO,SAAX,CAAqBC,KAArB,EAA7B;;AAEA;AACAZ,aAASa,gBAAT,CAA0BT,UAA1B;AACAJ,aAASc,OAAT,CAAiBT,MAAjB,EAAyBC,MAAzB,EAAiCE,gBAAjC;AACD;;AAED,OAAKO,YAAL,CAAkB,2BAAlB,EAA+C,UAASC,KAAT,EAAgB;;AAE7D;AACA,QAAIC,oBACFD,MAAME,OAAN,CAAcd,UAAd,CAAyBE,MAAzB,CAAgCa,cAAhC,CAA+CF,iBAA/C,CAAiEG,MADnE;;AAGA,QAAIC,YAAYzB,OAAOqB,iBAAP,EAA0B,UAASI,SAAT,EAAoB;AAC5D,aACEA,UAAUC,KAAV,KAAoB,YAApB,IACAD,UAAUhB,MAAV,KAAqBW,MAAME,OAAN,CAAcK,SAAd,CAAwBC,EAF/C;AAID,KALe,EAKb,CALa,CAAhB;;AAOA,QAAIH,SAAJ,EAAe;AACbJ,wBAAkBQ,MAAlB,CAAyBR,kBAAkBS,OAAlB,CAA0BL,SAA1B,CAAzB,EAA+D,CAA/D;AACD;AACF,GAhBD;;AAkBA,OAAKN,YAAL,CAAkB,CAChB,2BADgB,EAEhB,yBAFgB,CAAlB,EAGG,UAASC,KAAT,EAAgB;;AAEjB,QAAIZ,aAAaY,MAAME,OAAN,CAAcd,UAA/B;;AAEAD,kBAAcC,UAAd;AACD,GARD;AAUD;;AAEDT,SAASG,yBAAT,EAAoCD,kBAApC;;AAEAC,0BAA0B6B,OAA1B,GAAoC,CAClC,UADkC,EAElC,UAFkC,EAGlC,UAHkC,CAApC","file":"ReplaceConnectionBehavior.js","sourcesContent":["import inherits from 'inherits';\n\nimport {\n  filter\n} from 'min-dash';\n\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\n\nexport default function ReplaceConnectionBehavior(eventBus, modeling, drdRules) {\n\n  CommandInterceptor.call(this, eventBus);\n\n  function fixConnection(connection) {\n\n    var source = connection.source,\n        target = connection.target,\n        parent = connection.parent,\n        replacementAttrs;\n\n    // do not do anything if connection\n    // is already deleted (may happen due to other\n    // behaviors plugged-in before)\n    if (!parent) {\n      return;\n    }\n\n    replacementAttrs = drdRules.canConnect(source, target) || { type: 'dmn:Association' };\n    replacementAttrs.waypoints = connection.waypoints.slice();\n\n    // create a new connection\n    modeling.removeConnection(connection);\n    modeling.connect(source, target, replacementAttrs);\n  }\n\n  this.postExecuted('connection.reconnectStart', function(event) {\n\n    // remove old di information from target\n    var extensionElements =\n      event.context.connection.target.businessObject.extensionElements.values;\n\n    var extension = filter(extensionElements, function(extension) {\n      return (\n        extension.$type === 'biodi:Edge' &&\n        extension.source === event.context.oldSource.id\n      );\n    })[0];\n\n    if (extension) {\n      extensionElements.splice(extensionElements.indexOf(extension), 1);\n    }\n  });\n\n  this.postExecuted([\n    'connection.reconnectStart',\n    'connection.reconnectEnd'\n  ], function(event) {\n\n    var connection = event.context.connection;\n\n    fixConnection(connection);\n  });\n\n}\n\ninherits(ReplaceConnectionBehavior, CommandInterceptor);\n\nReplaceConnectionBehavior.$inject = [\n  'eventBus',\n  'modeling',\n  'drdRules'\n];\n"]}