{"version":3,"sources":["../../../src/features/modeling/DrdUpdater.js"],"names":["assign","map","forEach","pick","inherits","remove","collectionRemove","getBusinessObject","is","CommandInterceptor","DrdUpdater","eventBus","drdFactory","connectionDocking","drdRules","definitionPropertiesView","call","_drdFactory","_drdRules","_definitionPropertiesView","self","cropConnection","e","context","connection","cropped","waypoints","getCroppedWaypoints","executed","reverted","updateParent","element","shape","oldParent","target","reverseUpdateParent","parent","newParent","updateBounds","updateConnectionWaypoints","event","targetBO","businessObject","di","ext","updateSemanticParent","extensionElements","values","waypoint","index","x","y","push","idx","indexOf","splice","source","value","id","undefined","oldDI","update","oldTarget","$inject","prototype","parentShape","parentBusinessObject","updateExtensionElements","bounds","createDiBounds","width","height","$parent","containment","children","$instanceOf","get","semanticWaypoint","createDiWaypoint"],"mappings":"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","file":"DrdUpdater.js","sourcesContent":["import {\n  assign,\n  map,\n  forEach,\n  pick\n} from 'min-dash';\n\nimport inherits from 'inherits';\n\nimport {\n  remove as collectionRemove\n} from 'diagram-js/lib/util/Collections';\n\nimport {\n  getBusinessObject,\n  is\n} from 'dmn-js-shared/lib/util/ModelUtil';\n\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\n\n/**\n * A command interceptor responsible for updating elements after they've\n * been changed in the DRD view.\n */\nexport default function DrdUpdater(\n    eventBus,\n    drdFactory,\n    connectionDocking,\n    drdRules,\n    definitionPropertiesView) {\n\n  CommandInterceptor.call(this, eventBus);\n\n  this._drdFactory = drdFactory;\n  this._drdRules = drdRules;\n  this._definitionPropertiesView = definitionPropertiesView;\n\n  var self = this;\n\n\n  // connection cropping //////////////////////\n\n  // crop connection ends during create/update\n  function cropConnection(e) {\n    var context = e.context,\n        connection;\n\n    if (!context.cropped) {\n      connection = context.connection;\n      connection.waypoints = connectionDocking.getCroppedWaypoints(connection);\n      context.cropped = true;\n    }\n  }\n\n  this.executed([\n    'connection.layout',\n    'connection.create'\n  ], cropConnection);\n\n  this.reverted([ 'connection.layout' ], function(e) {\n    delete e.context.cropped;\n  });\n\n\n  // DRD + DI update //////////////////////\n\n  // update parent\n  function updateParent(e) {\n    var context = e.context,\n        element = context.shape || context.connection,\n        oldParent = context.oldParent;\n\n    // for all requirements the semantic parent is the target\n    if (context.connection && !is(element, 'dmn:Association')) {\n      oldParent = element.target;\n    }\n\n    self.updateParent(element, oldParent);\n  }\n\n  function reverseUpdateParent(e) {\n    var context = e.context;\n\n    var element = context.shape || context.connection,\n        // oldParent is the (old) new parent, because we are undoing\n        oldParent = context.parent || context.newParent;\n\n    // for all requirements the semantic parent is the target\n    if (context.connection && !is(element, 'dmn:Association')) {\n      oldParent = element.target;\n    }\n\n    self.updateParent(element, oldParent);\n  }\n\n  this.executed([\n    'shape.create',\n    'shape.delete',\n    'connection.create',\n    'connection.move',\n    'connection.delete'\n  ], updateParent);\n\n  this.reverted([\n    'shape.create',\n    'shape.delete',\n    'connection.create',\n    'connection.move',\n    'connection.delete'\n  ], reverseUpdateParent);\n\n\n  // update bounds\n  function updateBounds(e) {\n    var shape = e.context.shape;\n\n    if (!(is(shape, 'dmn:DRGElement') || is(shape, 'dmn:TextAnnotation'))) {\n      return;\n    }\n\n    self.updateBounds(shape);\n  }\n\n  this.executed([ 'shape.create', 'shape.move' ], updateBounds);\n\n  this.reverted([ 'shape.create', 'shape.move' ], updateBounds);\n\n  function updateConnectionWaypoints(e) {\n    self.updateConnectionWaypoints(e.context);\n  }\n\n  this.executed([\n    'connection.layout',\n    'connection.updateWaypoints',\n    'connection.move'\n  ], updateConnectionWaypoints);\n\n  this.reverted([\n    'connection.layout',\n    'connection.updateWaypoints',\n    'connection.move'\n  ], updateConnectionWaypoints);\n\n  this.executed([ 'connection.create' ], function(event) {\n    var context = event.context,\n        connection = context.connection,\n        targetBO = context.target.businessObject,\n        di, ext;\n\n    if (is(connection, 'dmn:Association')) {\n      updateParent(event);\n    } else {\n      // semantic parent is target (instead of graphical parent)\n      self.updateSemanticParent(connection.businessObject, targetBO);\n\n      // add di to target business object extension elements\n      di = context.di;\n      ext = targetBO.extensionElements.values;\n\n      // fix di waypoints, due to connection cropping\n      forEach(di.waypoints, function(waypoint, index) {\n        waypoint.x = connection.waypoints[index].x;\n        waypoint.y = connection.waypoints[index].y;\n      });\n\n      ext.push(di);\n    }\n  });\n\n  this.reverted([ 'connection.create' ], function(event) {\n    var context = event.context,\n        connection = context.connection,\n        di, ext, idx;\n\n    reverseUpdateParent(event);\n\n    if (!is(connection, 'dmn:Association')) {\n      // remove di from target business object extension elements\n      di = context.di;\n      ext = context.target.businessObject.extensionElements.values;\n      idx = ext.indexOf(di);\n\n      if (idx !== -1) {\n        ext.splice(idx, 1);\n      }\n    }\n  });\n\n  this.executed([ 'connection.delete' ], function(event) {\n    var context = event.context,\n        connection = getBusinessObject(context.connection),\n        source = context.source,\n        target = getBusinessObject(context.target),\n        index;\n\n    if (is(connection, 'dmn:Association')) {\n      return;\n    }\n\n    forEach(target.extensionElements.values, function(value, idx) {\n      if (is(value, 'biodi:Edge') && source.id === value.source) {\n        index = idx;\n\n        return false;\n      }\n    });\n\n    if (index !== undefined) {\n      context.oldDI = target.extensionElements.values[index];\n\n      target.extensionElements.values.splice(index, 1);\n    }\n  });\n\n  this.reverted([ 'connection.delete' ], function(event) {\n    var context = event.context,\n        connection = context.connection,\n        target = getBusinessObject(context.target),\n        oldDI = context.oldDI;\n\n    if (!oldDI || is(connection, 'dmn:Association')) {\n      return;\n    }\n\n    target.extensionElements.values.push(oldDI);\n  });\n\n  this.executed([ 'element.updateProperties' ], function(event) {\n    definitionPropertiesView.update();\n  });\n  this.reverted([ 'element.updateProperties' ], function(event) {\n    definitionPropertiesView.update();\n  });\n\n\n  this.reverted(['connection.reconnectEnd'], function(event) {\n    self.updateSemanticParent(\n      event.context.connection.businessObject,\n      event.context.oldTarget.businessObject\n    );\n  });\n\n}\n\ninherits(DrdUpdater, CommandInterceptor);\n\nDrdUpdater.$inject = [\n  'eventBus',\n  'drdFactory',\n  'connectionDocking',\n  'drdRules',\n  'definitionPropertiesView'\n];\n\n\n// implementation //////////////////////\n\nDrdUpdater.prototype.updateParent = function(element, oldParent) {\n  var parentShape = element.parent;\n\n  if (!is(element, 'dmn:DRGElement') && !is(element, 'dmn:Artifact')) {\n    parentShape = oldParent;\n  }\n\n  var businessObject = element.businessObject,\n      parentBusinessObject = parentShape && parentShape.businessObject;\n\n  this.updateSemanticParent(businessObject, parentBusinessObject);\n\n  this.updateExtensionElements(businessObject);\n};\n\n\nDrdUpdater.prototype.updateBounds = function(shape) {\n  var drdFactory = this._drdFactory;\n\n  var businessObject = getBusinessObject(shape),\n      extensionElements = businessObject.extensionElements,\n      values, bounds;\n\n  if (!extensionElements) {\n    return;\n  }\n\n  values = extensionElements.values;\n  bounds = values[0];\n\n  if (!bounds) {\n    values.push(drdFactory.createDiBounds({\n      x: shape.x,\n      y: shape.y,\n      width: shape.width,\n      height: shape.height\n    }));\n  } else {\n    values[0] = assign(bounds, {\n      x: shape.x,\n      y: shape.y,\n      width: shape.width,\n      height: shape.height\n    });\n  }\n};\n\n\nDrdUpdater.prototype.updateExtensionElements = function(businessObject) {\n  var extensionElements = businessObject.extensionElements;\n\n  if (extensionElements && !extensionElements.$parent) {\n    extensionElements.$parent = businessObject;\n  }\n};\n\n\nDrdUpdater.prototype.updateSemanticParent = function(businessObject, newParent) {\n\n  var containment, children;\n\n  if (businessObject.$parent === newParent) {\n    return;\n  }\n\n  if (businessObject.$instanceOf('dmn:DRGElement')) {\n    containment = 'drgElements';\n  } else if (businessObject.$instanceOf('dmn:Artifact')) {\n    containment = 'artifacts';\n  } else if (businessObject.$instanceOf('dmn:InformationRequirement')) {\n    containment = 'informationRequirement';\n  } else if (businessObject.$instanceOf('dmn:AuthorityRequirement')) {\n    containment = 'authorityRequirement';\n  } else if (businessObject.$instanceOf('dmn:KnowledgeRequirement')) {\n    containment = 'knowledgeRequirement';\n  }\n\n  if (businessObject.$parent) {\n    // remove from old parent\n    children = businessObject.$parent.get(containment);\n\n    collectionRemove(children, businessObject);\n  }\n\n  if (!newParent) {\n    businessObject.$parent = null;\n  } else {\n    // add to new parent\n    children = newParent.get(containment);\n    if (children) {\n      children.push(businessObject);\n      businessObject.$parent = newParent;\n    }\n  }\n};\n\n\nDrdUpdater.prototype.updateConnectionWaypoints = function(context) {\n  var drdFactory = this._drdFactory;\n\n  var connection = context.connection,\n      source = connection.source,\n      target = connection.target,\n      extensionElements;\n\n  if (is(connection, 'dmn:Association')) {\n    extensionElements = connection.businessObject.extensionElements;\n  } else {\n    extensionElements = target.businessObject.extensionElements;\n  }\n\n  // update di -> target extensionElements\n  extensionElements.values = map(extensionElements.values, function(value) {\n\n    if (is(value, 'biodi:Edge') && value.source === source.id) {\n      value.waypoints = [];\n\n      forEach(connection.waypoints, function(waypoint, index) {\n        var semanticWaypoint = drdFactory.createDiWaypoint(pick(waypoint, [ 'x', 'y' ]));\n\n        semanticWaypoint.$parent = value;\n\n        value.waypoints.push(semanticWaypoint);\n      });\n    }\n\n    return value;\n  });\n};\n"]}