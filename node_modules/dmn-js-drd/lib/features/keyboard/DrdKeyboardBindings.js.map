{"version":3,"sources":["../../../src/features/keyboard/DrdKeyboardBindings.js"],"names":["inherits","KeyboardBindings","DrdKeyboardBindings","injector","invoke","$inject","prototype","registerBindings","keyboard","editorActions","call","addListener","action","fn","isRegistered","context","event","keyEvent","isKey","isCmd","trigger","hasModifier"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;;AAEA,OAAOC,gBAAP,MAA6B,mDAA7B;;AAGA;;;;;;AAMA,eAAe,SAASC,mBAAT,CAA6BC,QAA7B,EAAuC;AACpDA,WAASC,MAAT,CAAgBH,gBAAhB,EAAkC,IAAlC;AACD;;AAEDD,SAASE,mBAAT,EAA8BD,gBAA9B;;AAEAC,oBAAoBG,OAApB,GAA8B,CAC5B,UAD4B,CAA9B;;AAKA;;;;;;AAMAH,oBAAoBI,SAApB,CAA8BC,gBAA9B,GAAiD,UAASC,QAAT,EAAmBC,aAAnB,EAAkC;;AAEjF;AACAR,mBAAiBK,SAAjB,CAA2BC,gBAA3B,CAA4CG,IAA5C,CAAiD,IAAjD,EAAuDF,QAAvD,EAAiEC,aAAjE;;AAEA;;;;;;;AAOA,WAASE,WAAT,CAAqBC,MAArB,EAA6BC,EAA7B,EAAiC;;AAE/B,QAAIJ,cAAcK,YAAd,CAA2BF,MAA3B,CAAJ,EAAwC;AACtCJ,eAASG,WAAT,CAAqBE,EAArB;AACD;AACF;;AAED;AACA;AACAF,cAAY,gBAAZ,EAA8B,UAASI,OAAT,EAAkB;;AAE9C,QAAIC,QAAQD,QAAQE,QAApB;;AAEA,QAAIT,SAASU,KAAT,CAAe,CAAC,GAAD,EAAM,GAAN,CAAf,EAA2BF,KAA3B,KAAqCR,SAASW,KAAT,CAAeH,KAAf,CAAzC,EAAgE;AAC9DP,oBAAcW,OAAd,CAAsB,gBAAtB;;AAEA,aAAO,IAAP;AACD;AACF,GATD;;AAWA;AACA;AACAT,cAAY,WAAZ,EAAyB,UAASI,OAAT,EAAkB;;AAEzC,QAAIC,QAAQD,QAAQE,QAApB;;AAEA,QAAIT,SAASa,WAAT,CAAqBL,KAArB,CAAJ,EAAiC;AAC/B;AACD;;AAED,QAAIR,SAASU,KAAT,CAAe,CAAC,GAAD,EAAM,GAAN,CAAf,EAA2BF,KAA3B,CAAJ,EAAuC;AACrCP,oBAAcW,OAAd,CAAsB,WAAtB;;AAEA,aAAO,IAAP;AACD;AACF,GAbD;;AAeA;AACA;AACAT,cAAY,eAAZ,EAA6B,UAASI,OAAT,EAAkB;;AAE7C,QAAIC,QAAQD,QAAQE,QAApB;;AAEA,QAAIT,SAASa,WAAT,CAAqBL,KAArB,CAAJ,EAAiC;AAC/B;AACD;;AAED,QAAIR,SAASU,KAAT,CAAe,CAAC,GAAD,EAAM,GAAN,CAAf,EAA2BF,KAA3B,CAAJ,EAAuC;AACrCP,oBAAcW,OAAd,CAAsB,eAAtB;;AAEA,aAAO,IAAP;AACD;AACF,GAbD;AAeD,CAlED","file":"DrdKeyboardBindings.js","sourcesContent":["import inherits from 'inherits';\n\nimport KeyboardBindings from 'diagram-js/lib/features/keyboard/KeyboardBindings';\n\n\n/**\n * DRD specific key bindings.\n *\n * @param {Keyboard} keyboard\n * @param {EditorActions} editorActions\n */\nexport default function DrdKeyboardBindings(injector) {\n  injector.invoke(KeyboardBindings, this);\n}\n\ninherits(DrdKeyboardBindings, KeyboardBindings);\n\nDrdKeyboardBindings.$inject = [\n  'injector'\n];\n\n\n/**\n * Register available keyboard bindings.\n *\n * @param {Keyboard} keyboard\n * @param {EditorActions} editorActions\n */\nDrdKeyboardBindings.prototype.registerBindings = function(keyboard, editorActions) {\n\n  // inherit default bindings\n  KeyboardBindings.prototype.registerBindings.call(this, keyboard, editorActions);\n\n  /**\n   * Add keyboard binding if respective editor action\n   * is registered.\n   *\n   * @param {String} action name\n   * @param {Function} fn that implements the key binding\n   */\n  function addListener(action, fn) {\n\n    if (editorActions.isRegistered(action)) {\n      keyboard.addListener(fn);\n    }\n  }\n\n  // select all elements\n  // CTRL + A\n  addListener('selectElements', function(context) {\n\n    var event = context.keyEvent;\n\n    if (keyboard.isKey(['a', 'A'], event) && keyboard.isCmd(event)) {\n      editorActions.trigger('selectElements');\n\n      return true;\n    }\n  });\n\n  // activate lasso tool\n  // L\n  addListener('lassoTool', function(context) {\n\n    var event = context.keyEvent;\n\n    if (keyboard.hasModifier(event)) {\n      return;\n    }\n\n    if (keyboard.isKey(['l', 'L'], event)) {\n      editorActions.trigger('lassoTool');\n\n      return true;\n    }\n  });\n\n  // activate direct editing\n  // E\n  addListener('directEditing', function(context) {\n\n    var event = context.keyEvent;\n\n    if (keyboard.hasModifier(event)) {\n      return;\n    }\n\n    if (keyboard.isKey(['e', 'E'], event)) {\n      editorActions.trigger('directEditing');\n\n      return true;\n    }\n  });\n\n};"]}