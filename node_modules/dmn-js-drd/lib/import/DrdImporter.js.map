{"version":3,"sources":["../../src/import/DrdImporter.js"],"names":["assign","map","is","elementData","semantic","attrs","id","type","$type","businessObject","getHREF","element","href","slice","collectWaypoints","edge","waypoints","waypoint","position","x","y","original","DrdImporter","eventBus","canvas","elementFactory","elementRegistry","_eventBus","_canvas","_elementRegistry","_elementFactory","$inject","prototype","root","diagram","createRoot","setRootElement","add","di","sourceShape","targetShape","elementDefinition","sourceID","targetID","$instanceOf","Math","round","width","height","createShape","addShape","fire","source","$parent","targetRef","_getShape","hidden","target","createConnection","addConnection","Error","get"],"mappings":"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","file":"DrdImporter.js","sourcesContent":["import {\n  assign,\n  map\n} from 'min-dash';\n\nimport {\n  is\n} from 'dmn-js-shared/lib/util/ModelUtil';\n\nfunction elementData(semantic, attrs) {\n  return assign({\n    id: semantic.id,\n    type: semantic.$type,\n    businessObject: semantic\n  }, attrs);\n}\n\nfunction getHREF(element) {\n  return element && element.href.slice(1);\n}\n\nfunction collectWaypoints(edge) {\n  var waypoints = edge.waypoints;\n\n  if (waypoints) {\n    return map(waypoints, function(waypoint) {\n      var position = { x: waypoint.x, y: waypoint.y };\n\n      return assign({ original: position }, position);\n    });\n  }\n}\n\nexport default function DrdImporter(\n    eventBus,\n    canvas,\n    elementFactory,\n    elementRegistry) {\n\n  this._eventBus = eventBus;\n  this._canvas = canvas;\n  this._elementRegistry = elementRegistry;\n  this._elementFactory = elementFactory;\n}\n\nDrdImporter.$inject = [\n  'eventBus',\n  'canvas',\n  'elementFactory',\n  'elementRegistry'\n];\n\n\nDrdImporter.prototype.root = function(diagram) {\n  var element = this._elementFactory.createRoot(elementData(diagram));\n\n  this._canvas.setRootElement(element);\n\n  return element;\n};\n\n/**\n * Add drd element (semantic) to the canvas.\n */\nDrdImporter.prototype.add = function(semantic, di) {\n  var elementFactory = this._elementFactory,\n      canvas = this._canvas,\n      eventBus = this._eventBus;\n\n  var element, waypoints, sourceShape, targetShape, elementDefinition,\n      sourceID, targetID;\n\n  if (di.$instanceOf('biodi:Bounds')) {\n    elementDefinition = elementData(semantic, {\n      x: Math.round(di.x),\n      y: Math.round(di.y),\n      width: Math.round(di.width),\n      height: Math.round(di.height)\n    });\n\n    element = elementFactory.createShape(elementDefinition);\n\n    canvas.addShape(element);\n\n    eventBus.fire('drdElement.added', { element: element, di: di });\n\n  } else if (di.$instanceOf('biodi:Edge')) {\n    waypoints = collectWaypoints(di);\n\n    sourceID = di.source;\n    targetID = semantic.$parent.id;\n\n    if (is(semantic, 'dmn:Association')) {\n      targetID = getHREF(semantic.targetRef);\n    }\n\n    sourceShape = this._getShape(sourceID);\n    targetShape = this._getShape(targetID);\n\n    if (sourceShape && targetShape) {\n      elementDefinition = elementData(semantic, {\n        hidden: false,\n        source: sourceShape,\n        target: targetShape,\n        waypoints: waypoints\n      });\n\n      element = elementFactory.createConnection(elementDefinition);\n\n      canvas.addConnection(element);\n\n      eventBus.fire('drdElement.added', { element: element, di: di });\n    }\n\n  } else {\n    throw new Error('unknown di for element ' + semantic.id);\n  }\n\n  return element;\n};\n\nDrdImporter.prototype._getShape = function(id) {\n  return this._elementRegistry.get(id);\n};\n"]}