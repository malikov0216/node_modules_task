{"version":3,"sources":["../src/Modeler.js"],"names":["inherits","NavigatedViewer","Modeler","options","call","BendpointsModule","ContextPadModule","DefinitionPropertiesModule","EditorActionsModule","GenerateDiModule","KeyboardModule","KeyboardMoveModule","KeyboardMoveSelectionModule","LabelEditingModule","ModelingModule","MoveModule","PaletteModule","prototype","_modelingModules","_modules","concat"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA,eAAe,SAASC,OAAT,CAAiBC,OAAjB,EAA0B;AACvCF,kBAAgBG,IAAhB,CAAqB,IAArB,EAA2BD,OAA3B;AACD;;AAEDH,SAASE,OAAT,EAAkBD,eAAlB;;AAGA;AACA;AACA;AACA;;AAEA,OAAOI,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,gBAAP,MAA6B,wBAA7B;AACA,OAAOC,0BAAP,MAAuC,0CAAvC;AACA,OAAOC,mBAAP,MAAgC,2BAAhC;AACA,OAAOC,gBAAP,MAA6B,wBAA7B;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA,OAAOC,kBAAP,MAA+B,yCAA/B;AACA,OAAOC,2BAAP,MAAwC,iDAAxC;AACA,OAAOC,kBAAP,MAA+B,0BAA/B;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;;AAEAd,QAAQe,SAAR,CAAkBC,gBAAlB,GAAqC;AACnC;AACAb,gBAFmC,EAGnCC,gBAHmC,EAInCC,0BAJmC,EAKnCC,mBALmC,EAMnCC,gBANmC,EAOnCC,cAPmC,EAQnCC,kBARmC,EASnCC,2BATmC,EAUnCC,kBAVmC,EAWnCC,cAXmC,EAYnCC,UAZmC,EAanCC,aAbmC,CAArC;;AAgBAd,QAAQe,SAAR,CAAkBE,QAAlB,GAA6B,GAAGC,MAAH,CAC3BlB,QAAQe,SAAR,CAAkBE,QADS,EAE3BjB,QAAQe,SAAR,CAAkBC,gBAFS,CAA7B","file":"Modeler.js","sourcesContent":["import inherits from 'inherits';\n\nimport NavigatedViewer from './NavigatedViewer';\n\n/**\n * A modeler for DMN tables.\n *\n *\n * ## Extending the Modeler\n *\n * In order to extend the viewer pass extension modules to bootstrap via the\n * `additionalModules` option. An extension module is an object that exposes\n * named services.\n *\n * The following example depicts the integration of a simple\n * logging component that integrates with interaction events:\n *\n *\n * ```javascript\n *\n * // logging component\n * function InteractionLogger(eventBus) {\n *   eventBus.on('element.hover', function(event) {\n *     console.log()\n *   })\n * }\n *\n * InteractionLogger.$inject = [ 'eventBus' ]; // minification save\n *\n * // extension module\n * var extensionModule = {\n *   __init__: [ 'interactionLogger' ],\n *   interactionLogger: [ 'type', InteractionLogger ]\n * };\n *\n * // extend the viewer\n * var dmnModeler = new Modeler({ additionalModules: [ extensionModule ] });\n * dmnModeler.importXML(...);\n * ```\n *\n *\n * ## Customizing / Replacing Components\n *\n * You can replace individual table components by redefining them in override modules.\n * This works for all components, including those defined in the core.\n *\n * Pass in override modules via the `options.additionalModules` flag like this:\n *\n * ```javascript\n * function CustomContextPadProvider(contextPad) {\n *\n *   contextPad.registerProvider(this);\n *\n *   this.getContextPadEntries = function(element) {\n *     // no entries, effectively disable the context pad\n *     return {};\n *   };\n * }\n *\n * CustomContextPadProvider.$inject = [ 'contextPad' ];\n *\n * var overrideModule = {\n *   contextPadProvider: [ 'type', CustomContextPadProvider ]\n * };\n *\n * var dmnModeler = new Modeler({ additionalModules: [ overrideModule ]});\n * ```\n *\n * @param {Object} [options] configuration options to pass to the viewer\n * @param {DOMElement} [options.container]\n *        the container to render the viewer in, defaults to body.\n * @param {String|Number} [options.width] the width of the viewer\n * @param {String|Number} [options.height] the height of the viewer\n * @param {Object} [options.moddleExtensions]\n *        extension packages to provide\n * @param {Array<didi.Module>} [options.modules]\n *        a list of modules to override the default modules\n * @param {Array<didi.Module>} [options.additionalModules]\n *        a list of modules to use with the default modules\n */\nexport default function Modeler(options) {\n  NavigatedViewer.call(this, options);\n}\n\ninherits(Modeler, NavigatedViewer);\n\n\n// modules the modeler is composed of\n//\n// - viewer + navigation modules\n// - modeling modules\n\nimport BendpointsModule from 'diagram-js/lib/features/bendpoints';\nimport ContextPadModule from './features/context-pad';\nimport DefinitionPropertiesModule from './features/definition-properties/modeler';\nimport EditorActionsModule from './features/editor-actions';\nimport GenerateDiModule from './features/generate-di';\nimport KeyboardModule from './features/keyboard';\nimport KeyboardMoveModule from 'diagram-js/lib/navigation/keyboard-move';\nimport KeyboardMoveSelectionModule from 'diagram-js/lib/features/keyboard-move-selection';\nimport LabelEditingModule from './features/label-editing';\nimport ModelingModule from './features/modeling';\nimport MoveModule from 'diagram-js/lib/features/move';\nimport PaletteModule from './features/palette';\n\nModeler.prototype._modelingModules = [\n  // modeling components\n  BendpointsModule,\n  ContextPadModule,\n  DefinitionPropertiesModule,\n  EditorActionsModule,\n  GenerateDiModule,\n  KeyboardModule,\n  KeyboardMoveModule,\n  KeyboardMoveSelectionModule,\n  LabelEditingModule,\n  ModelingModule,\n  MoveModule,\n  PaletteModule\n];\n\nModeler.prototype._modules = [].concat(\n  Modeler.prototype._modules,\n  Modeler.prototype._modelingModules\n);\n"]}