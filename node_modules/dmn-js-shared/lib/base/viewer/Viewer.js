var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { Injector } from 'didi';

import core from './core';

/**
 * A base for React-style viewers.
 */

var Viewer = function () {
  function Viewer() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Viewer);

    var injector = options.injector;


    if (!injector) {
      var _init2 = this._init(options),
          modules = _init2.modules,
          config = _init2.config;

      injector = createInjector(config, modules);
    }

    this.get = injector.get;

    this.invoke = injector.invoke;

    this.get('eventBus').fire('viewer.init');
  }

  /**
   * Intialize and return modules and config used for creation.
   *
   * @param  {Object} options
   *
   * @return {Object} { modules=[], config }
   */


  _createClass(Viewer, [{
    key: '_init',
    value: function _init(options) {
      var modules = options.modules,
          config = _objectWithoutProperties(options, ['modules']);

      return { modules: modules, config: config };
    }

    /**
     * Destroy. This results in removing the attachment from the container.
     */

  }, {
    key: 'destroy',
    value: function destroy() {
      var eventBus = this.get('eventBus');

      eventBus.fire('viewer.destroy');
    }

    /**
     * Clear. Should be used to reset the state of any stateful services.
     */

  }, {
    key: 'clear',
    value: function clear() {
      var eventBus = this.get('eventBus');

      eventBus.fire('viewer.clear');
    }
  }]);

  return Viewer;
}();

// helpers //////////////////////

export default Viewer;
function bootstrap(bootstrapModules) {

  var modules = [],
      components = [];

  function hasModule(m) {
    return modules.indexOf(m) >= 0;
  }

  function addModule(m) {
    modules.push(m);
  }

  function visit(m) {
    if (hasModule(m)) {
      return;
    }

    (m.__depends__ || []).forEach(visit);

    if (hasModule(m)) {
      return;
    }

    addModule(m);

    (m.__init__ || []).forEach(function (c) {
      components.push(c);
    });
  }

  bootstrapModules.forEach(visit);

  var injector = new Injector(modules);

  components.forEach(function (c) {

    try {
      // eagerly resolve component (fn or string)
      injector[typeof c === 'string' ? 'get' : 'invoke'](c);
    } catch (e) {
      console.error('Failed to instantiate component');
      console.error(e.stack);

      throw e;
    }
  });

  return injector;
}

function createInjector(config, modules) {
  var bootstrapModules = [{
    config: ['value', config]
  }, core].concat(modules || []);

  return bootstrap(bootstrapModules);
}
//# sourceMappingURL=Viewer.js.map