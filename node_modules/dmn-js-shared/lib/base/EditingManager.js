var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import Manager from './Manager';

import Ids from 'ids';

import { isAny } from '../util/ModelUtil';

var EditingManager = function (_Manager) {
  _inherits(EditingManager, _Manager);

  function EditingManager() {
    _classCallCheck(this, EditingManager);

    return _possibleConstructorReturn(this, (EditingManager.__proto__ || Object.getPrototypeOf(EditingManager)).apply(this, arguments));
  }

  _createClass(EditingManager, [{
    key: '_init',
    value: function _init(options) {
      var _this2 = this;

      _get(EditingManager.prototype.__proto__ || Object.getPrototypeOf(EditingManager.prototype), '_init', this).call(this, options);

      // hook ID collection into the modeler
      this.on('import.parse.complete', function (event) {
        if (!event.error) {
          _this2._collectIds(event.definitions, event.context);
        }
      });

      this.on('destroy', function () {
        _this2._moddle.ids.clear();
      });

      this.on('viewer.created', function (_ref) {
        var viewer = _ref.viewer;


        viewer.on('elements.changed', function (_ref2) {
          var elements = _ref2.elements;


          var viewsChanged = elements.some(function (e) {
            return isAny(e, ['dmn:Decision', 'dmn:Definitions']);
          });

          if (viewsChanged) {
            _this2._updateViews();
          }
        });
      });
    }

    /**
     * Collect ids processed during parsing of the
     * definitions object.
     *
     * @param {ModdleElement} definitions
     * @param {Context} context
     */

  }, {
    key: '_collectIds',
    value: function _collectIds(definitions, context) {

      var moddle = definitions.$model,
          ids = moddle.ids,
          id;

      // remove references from previous import
      ids.clear();

      for (id in context.elementsById) {
        ids.claim(id, context.elementsById[id]);
      }
    }
  }, {
    key: '_createModdle',
    value: function _createModdle(options) {
      var moddle = _get(EditingManager.prototype.__proto__ || Object.getPrototypeOf(EditingManager.prototype), '_createModdle', this).call(this, options);

      // attach ids to moddle to be able to track
      // and validated ids in the DMN 1.1 XML document
      // tree
      moddle.ids = new Ids([32, 36, 1]);

      return moddle;
    }
  }]);

  return EditingManager;
}(Manager);

export default EditingManager;
//# sourceMappingURL=EditingManager.js.map