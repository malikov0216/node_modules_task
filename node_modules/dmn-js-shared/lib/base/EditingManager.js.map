{"version":3,"sources":["../../src/base/EditingManager.js"],"names":["Manager","Ids","isAny","EditingManager","options","on","event","error","_collectIds","definitions","context","_moddle","ids","clear","viewer","elements","viewsChanged","some","e","_updateViews","moddle","$model","id","elementsById","claim"],"mappings":";;;;;;;;;;AAAA,OAAOA,OAAP,MAAoB,WAApB;;AAEA,OAAOC,GAAP,MAAgB,KAAhB;;AAEA,SAASC,KAAT,QAAsB,mBAAtB;;IAGqBC,c;;;;;;;;;;;0BAEbC,O,EAAS;AAAA;;AAEb,4HAAYA,OAAZ;;AAEA;AACA,WAAKC,EAAL,CAAQ,uBAAR,EAAiC,UAACC,KAAD,EAAW;AAC1C,YAAI,CAACA,MAAMC,KAAX,EAAkB;AAChB,iBAAKC,WAAL,CAAiBF,MAAMG,WAAvB,EAAoCH,MAAMI,OAA1C;AACD;AACF,OAJD;;AAMA,WAAKL,EAAL,CAAQ,SAAR,EAAmB,YAAM;AACvB,eAAKM,OAAL,CAAaC,GAAb,CAAiBC,KAAjB;AACD,OAFD;;AAIA,WAAKR,EAAL,CAAQ,gBAAR,EAA0B,gBAAgB;AAAA,YAAbS,MAAa,QAAbA,MAAa;;;AAExCA,eAAOT,EAAP,CAAU,kBAAV,EAA8B,iBAAkB;AAAA,cAAfU,QAAe,SAAfA,QAAe;;;AAE9C,cAAIC,eAAeD,SAASE,IAAT,CAAc,UAASC,CAAT,EAAY;AAC3C,mBAAOhB,MAAMgB,CAAN,EAAS,CAAE,cAAF,EAAkB,iBAAlB,CAAT,CAAP;AACD,WAFkB,CAAnB;;AAIA,cAAIF,YAAJ,EAAkB;AAChB,mBAAKG,YAAL;AACD;AACF,SATD;AAUD,OAZD;AAaD;;AAED;;;;;;;;;;gCAOYV,W,EAAaC,O,EAAS;;AAEhC,UAAIU,SAASX,YAAYY,MAAzB;AAAA,UACIT,MAAMQ,OAAOR,GADjB;AAAA,UAEIU,EAFJ;;AAIA;AACAV,UAAIC,KAAJ;;AAEA,WAAKS,EAAL,IAAWZ,QAAQa,YAAnB,EAAiC;AAC/BX,YAAIY,KAAJ,CAAUF,EAAV,EAAcZ,QAAQa,YAAR,CAAqBD,EAArB,CAAd;AACD;AACF;;;kCAEalB,O,EAAS;AACrB,UAAIgB,uIAA6BhB,OAA7B,CAAJ;;AAEA;AACA;AACA;AACAgB,aAAOR,GAAP,GAAa,IAAIX,GAAJ,CAAQ,CAAE,EAAF,EAAM,EAAN,EAAU,CAAV,CAAR,CAAb;;AAEA,aAAOmB,MAAP;AACD;;;;EA9DyCpB,O;;eAAvBG,c","file":"EditingManager.js","sourcesContent":["import Manager from './Manager';\n\nimport Ids from 'ids';\n\nimport { isAny } from '../util/ModelUtil';\n\n\nexport default class EditingManager extends Manager {\n\n  _init(options) {\n\n    super._init(options);\n\n    // hook ID collection into the modeler\n    this.on('import.parse.complete', (event) => {\n      if (!event.error) {\n        this._collectIds(event.definitions, event.context);\n      }\n    });\n\n    this.on('destroy', () => {\n      this._moddle.ids.clear();\n    });\n\n    this.on('viewer.created', ({ viewer }) => {\n\n      viewer.on('elements.changed', ({ elements }) => {\n\n        var viewsChanged = elements.some(function(e) {\n          return isAny(e, [ 'dmn:Decision', 'dmn:Definitions' ]);\n        });\n\n        if (viewsChanged) {\n          this._updateViews();\n        }\n      });\n    });\n  }\n\n  /**\n   * Collect ids processed during parsing of the\n   * definitions object.\n   *\n   * @param {ModdleElement} definitions\n   * @param {Context} context\n   */\n  _collectIds(definitions, context) {\n\n    var moddle = definitions.$model,\n        ids = moddle.ids,\n        id;\n\n    // remove references from previous import\n    ids.clear();\n\n    for (id in context.elementsById) {\n      ids.claim(id, context.elementsById[id]);\n    }\n  }\n\n  _createModdle(options) {\n    var moddle = super._createModdle(options);\n\n    // attach ids to moddle to be able to track\n    // and validated ids in the DMN 1.1 XML document\n    // tree\n    moddle.ids = new Ids([ 32, 36, 1 ]);\n\n    return moddle;\n  }\n\n}"]}