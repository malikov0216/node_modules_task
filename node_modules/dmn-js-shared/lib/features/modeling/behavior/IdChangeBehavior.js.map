{"version":3,"sources":["../../../../src/features/modeling/behavior/IdChangeBehavior.js"],"names":["forEach","CommandInterceptor","is","ID","IdChangeBehavior","eventBus","executed","updateIds","bind","context","element","oldProperties","properties","isIdChange","drgElements","getDrgElements","updateElementReferences","drgElement","id","updateEdges","$inject","definitions","$parent","oldId","handlers","authorityRequirement","requiredAuthority","requiredDecision","requiredInput","href","informationRequirement","knowledgeRequirement","requiredKnowledge","handler","key","extensionElements","values","extensionElement","source"],"mappings":"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","file":"IdChangeBehavior.js","sourcesContent":["import { forEach } from 'min-dash';\r\n\r\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\r\n\r\nimport { is } from '../../../util/ModelUtil';\r\n\r\nconst ID = 'id';\r\n\r\n\r\nexport default class IdChangeBehavior extends CommandInterceptor {\r\n  constructor(eventBus) {\r\n    super(eventBus);\r\n\r\n    this.executed('updateProperties', this.updateIds.bind(this));\r\n  }\r\n\r\n  updateIds({ context }) {\r\n    const { element, oldProperties, properties } = context;\r\n\r\n    if (!is(element, 'dmn:DRGElement') || !isIdChange(oldProperties, properties)) {\r\n      return;\r\n    }\r\n\r\n    const drgElements = getDrgElements(element);\r\n\r\n    drgElements.forEach(drgElement => {\r\n      updateElementReferences(drgElement, oldProperties.id, properties.id);\r\n\r\n      updateEdges(drgElement, oldProperties.id, properties.id);\r\n    });\r\n  }\r\n\r\n}\r\n\r\nIdChangeBehavior.$inject = [ 'eventBus' ];\r\n\r\n\r\n// helpers //////////////////////\r\n\r\nfunction isIdChange(oldProperties, properties) {\r\n  return ID in oldProperties && ID in properties;\r\n}\r\n\r\nfunction getDrgElements(element) {\r\n  const definitions = element.$parent;\r\n\r\n  const drgElements = definitions.drgElements;\r\n\r\n  return drgElements;\r\n}\r\n\r\nfunction updateElementReferences(element, oldId, id) {\r\n\r\n  const handlers = {\r\n\r\n    authorityRequirement: () => {\r\n      element.authorityRequirement.forEach(authorityRequirement => {\r\n        const {\r\n          requiredAuthority,\r\n          requiredDecision,\r\n          requiredInput\r\n        } = authorityRequirement;\r\n\r\n        if (requiredAuthority && requiredAuthority.href === `#${oldId}`) {\r\n          requiredAuthority.href = `#${id}`;\r\n        }\r\n\r\n        if (requiredDecision && requiredDecision.href === `#${oldId}`) {\r\n          requiredDecision.href = `#${id}`;\r\n        }\r\n\r\n        if (requiredInput && requiredInput.href === `#${oldId}`) {\r\n          requiredInput.href = `#${id}`;\r\n        }\r\n      });\r\n    },\r\n\r\n    informationRequirement: () => {\r\n      element.informationRequirement.forEach(informationRequirement => {\r\n        const { requiredDecision, requiredInput } = informationRequirement;\r\n\r\n        if (requiredDecision && requiredDecision.href === `#${oldId}`) {\r\n          requiredDecision.href = `#${id}`;\r\n        }\r\n\r\n        if (requiredInput && requiredInput.href === `#${oldId}`) {\r\n          requiredInput.href = `#${id}`;\r\n        }\r\n      });\r\n    },\r\n\r\n    knowledgeRequirement: () => {\r\n      element.knowledgeRequirement.forEach(knowledgeRequirement => {\r\n        const { requiredKnowledge } = knowledgeRequirement;\r\n\r\n        if (requiredKnowledge && requiredKnowledge.href === `#${oldId}`) {\r\n          requiredKnowledge.href = `#${id}`;\r\n        }\r\n      });\r\n    }\r\n\r\n  };\r\n\r\n  forEach(handlers, (handler, key) => {\r\n\r\n    if (element[key]) {\r\n      handler();\r\n    }\r\n\r\n  });\r\n}\r\n\r\nfunction updateEdges(element, oldId, id) {\r\n\r\n  if (element.extensionElements) {\r\n    element.extensionElements.values.forEach(extensionElement => {\r\n\r\n      if (is(extensionElement, 'biodi:Edge')) {\r\n\r\n        if (extensionElement.source === oldId) {\r\n          extensionElement.source = id;\r\n        }\r\n\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n}"]}