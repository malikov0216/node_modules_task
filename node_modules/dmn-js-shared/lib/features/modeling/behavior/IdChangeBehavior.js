var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { forEach } from 'min-dash';

import CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';

import { is } from '../../../util/ModelUtil';

var ID = 'id';

var IdChangeBehavior = function (_CommandInterceptor) {
  _inherits(IdChangeBehavior, _CommandInterceptor);

  function IdChangeBehavior(eventBus) {
    _classCallCheck(this, IdChangeBehavior);

    var _this = _possibleConstructorReturn(this, (IdChangeBehavior.__proto__ || Object.getPrototypeOf(IdChangeBehavior)).call(this, eventBus));

    _this.executed('updateProperties', _this.updateIds.bind(_this));
    return _this;
  }

  _createClass(IdChangeBehavior, [{
    key: 'updateIds',
    value: function updateIds(_ref) {
      var context = _ref.context;
      var element = context.element,
          oldProperties = context.oldProperties,
          properties = context.properties;


      if (!is(element, 'dmn:DRGElement') || !isIdChange(oldProperties, properties)) {
        return;
      }

      var drgElements = getDrgElements(element);

      drgElements.forEach(function (drgElement) {
        updateElementReferences(drgElement, oldProperties.id, properties.id);

        updateEdges(drgElement, oldProperties.id, properties.id);
      });
    }
  }]);

  return IdChangeBehavior;
}(CommandInterceptor);

export default IdChangeBehavior;


IdChangeBehavior.$inject = ['eventBus'];

// helpers //////////////////////

function isIdChange(oldProperties, properties) {
  return ID in oldProperties && ID in properties;
}

function getDrgElements(element) {
  var definitions = element.$parent;

  var drgElements = definitions.drgElements;

  return drgElements;
}

function updateElementReferences(element, oldId, id) {

  var handlers = {

    authorityRequirement: function authorityRequirement() {
      element.authorityRequirement.forEach(function (authorityRequirement) {
        var requiredAuthority = authorityRequirement.requiredAuthority,
            requiredDecision = authorityRequirement.requiredDecision,
            requiredInput = authorityRequirement.requiredInput;


        if (requiredAuthority && requiredAuthority.href === '#' + oldId) {
          requiredAuthority.href = '#' + id;
        }

        if (requiredDecision && requiredDecision.href === '#' + oldId) {
          requiredDecision.href = '#' + id;
        }

        if (requiredInput && requiredInput.href === '#' + oldId) {
          requiredInput.href = '#' + id;
        }
      });
    },

    informationRequirement: function informationRequirement() {
      element.informationRequirement.forEach(function (informationRequirement) {
        var requiredDecision = informationRequirement.requiredDecision,
            requiredInput = informationRequirement.requiredInput;


        if (requiredDecision && requiredDecision.href === '#' + oldId) {
          requiredDecision.href = '#' + id;
        }

        if (requiredInput && requiredInput.href === '#' + oldId) {
          requiredInput.href = '#' + id;
        }
      });
    },

    knowledgeRequirement: function knowledgeRequirement() {
      element.knowledgeRequirement.forEach(function (knowledgeRequirement) {
        var requiredKnowledge = knowledgeRequirement.requiredKnowledge;


        if (requiredKnowledge && requiredKnowledge.href === '#' + oldId) {
          requiredKnowledge.href = '#' + id;
        }
      });
    }

  };

  forEach(handlers, function (handler, key) {

    if (element[key]) {
      handler();
    }
  });
}

function updateEdges(element, oldId, id) {

  if (element.extensionElements) {
    element.extensionElements.values.forEach(function (extensionElement) {

      if (is(extensionElement, 'biodi:Edge')) {

        if (extensionElement.source === oldId) {
          extensionElement.source = id;
        }
      }
    });
  }
}
//# sourceMappingURL=IdChangeBehavior.js.map