{"version":3,"sources":["../../../../src/features/modeling/cmd/UpdatePropertiesHandler.js"],"names":["isObject","isDefined","reduce","getBusinessObject","ID","EditPropertiesHandler","elementRegistry","moddle","_elementRegistry","_moddle","context","element","properties","bo","updateProperties","changed","oldProperties","newProps","ids","result","value","key","propertyValue","get","isContainer","Error","isIdChange","unclaim","updateId","claim","set","$inject","newId","o"],"mappings":"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","file":"UpdatePropertiesHandler.js","sourcesContent":["import {\n  isObject,\n  isDefined,\n  reduce\n} from 'min-dash';\n\nimport {\n  getBusinessObject\n} from '../../../util/ModelUtil';\n\nconst ID = 'id';\n\n\n/**\n * A generic handler that implements property editing.\n */\nexport default class EditPropertiesHandler {\n\n  constructor(elementRegistry, moddle) {\n    this._elementRegistry = elementRegistry;\n    this._moddle = moddle;\n  }\n\n  /**\n   * <do>\n   */\n  execute(context) {\n\n    const {\n      element,\n      properties\n    } = context;\n\n    const bo = getBusinessObject(element);\n\n    const {\n      changed,\n      oldProperties\n    } = this.updateProperties(bo, properties);\n\n    context.oldProperties = oldProperties;\n\n    return [\n      ...changed,\n      element\n    ];\n  }\n\n  /**\n   * <undo>\n   */\n  revert(context) {\n    const {\n      element,\n      oldProperties\n    } = context;\n\n    var bo = getBusinessObject(element);\n\n    var {\n      changed\n    } = this.updateProperties(bo, oldProperties);\n\n    return [\n      ...changed,\n      element\n    ];\n  }\n\n\n  /**\n   * Update properties of the given business object\n   * and return { changed, oldProperties }.\n   */\n  updateProperties(bo, newProps) {\n\n    const ids = this._moddle.ids;\n\n    // Reduce over all new properties and return\n    //\n    // {\n    //  changed,\n    //  oldProperties\n    // }\n    return reduce(newProps, (result, value, key) => {\n\n      const propertyValue = bo.get(key);\n\n      // handle nested update\n      if (isContainer(value)) {\n\n        if (!isContainer(propertyValue)) {\n          throw new Error(\n            `non-existing property <${key}>: cannot update values`\n          );\n        }\n\n        let {\n          changed,\n          oldProperties\n        } = this.updateProperties(propertyValue, value);\n\n        return {\n          changed: [\n            ...result.changed,\n            ...changed,\n            propertyValue\n          ],\n          oldProperties: {\n            ...result.oldProperties,\n            [key]: oldProperties\n          }\n        };\n      }\n\n      // handle ID change\n      if (key === ID && isIdChange(bo, value)) {\n        ids.unclaim(bo[ID]);\n\n        this._elementRegistry.updateId(bo, value);\n\n        ids.claim(value, bo);\n      }\n\n      // handle plain update\n      bo.set(key, value);\n\n      return {\n        changed: result.changed,\n        oldProperties: {\n          ...result.oldProperties,\n          [key]: propertyValue\n        }\n      };\n\n    }, { changed: [], oldProperties: { } });\n  }\n\n}\n\nEditPropertiesHandler.$inject = [ 'elementRegistry', 'moddle' ];\n\n// helpers //////////////////////\n\nfunction isIdChange(element, newId) {\n  return element[ID] !== newId;\n}\n\n\nfunction isContainer(o) {\n  return (\n    isDefined(o) &&\n    isObject(o)\n  );\n}"]}