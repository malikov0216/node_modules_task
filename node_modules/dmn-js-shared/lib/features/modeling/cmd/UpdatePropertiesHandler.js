var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { isObject, isDefined, reduce } from 'min-dash';

import { getBusinessObject } from '../../../util/ModelUtil';

var ID = 'id';

/**
 * A generic handler that implements property editing.
 */

var EditPropertiesHandler = function () {
  function EditPropertiesHandler(elementRegistry, moddle) {
    _classCallCheck(this, EditPropertiesHandler);

    this._elementRegistry = elementRegistry;
    this._moddle = moddle;
  }

  /**
   * <do>
   */


  _createClass(EditPropertiesHandler, [{
    key: 'execute',
    value: function execute(context) {
      var element = context.element,
          properties = context.properties;


      var bo = getBusinessObject(element);

      var _updateProperties = this.updateProperties(bo, properties),
          changed = _updateProperties.changed,
          oldProperties = _updateProperties.oldProperties;

      context.oldProperties = oldProperties;

      return [].concat(_toConsumableArray(changed), [element]);
    }

    /**
     * <undo>
     */

  }, {
    key: 'revert',
    value: function revert(context) {
      var element = context.element,
          oldProperties = context.oldProperties;


      var bo = getBusinessObject(element);

      var _updateProperties2 = this.updateProperties(bo, oldProperties),
          changed = _updateProperties2.changed;

      return [].concat(_toConsumableArray(changed), [element]);
    }

    /**
     * Update properties of the given business object
     * and return { changed, oldProperties }.
     */

  }, {
    key: 'updateProperties',
    value: function updateProperties(bo, newProps) {
      var _this = this;

      var ids = this._moddle.ids;

      // Reduce over all new properties and return
      //
      // {
      //  changed,
      //  oldProperties
      // }
      return reduce(newProps, function (result, value, key) {

        var propertyValue = bo.get(key);

        // handle nested update
        if (isContainer(value)) {

          if (!isContainer(propertyValue)) {
            throw new Error('non-existing property <' + key + '>: cannot update values');
          }

          var _updateProperties3 = _this.updateProperties(propertyValue, value),
              changed = _updateProperties3.changed,
              oldProperties = _updateProperties3.oldProperties;

          return {
            changed: [].concat(_toConsumableArray(result.changed), _toConsumableArray(changed), [propertyValue]),
            oldProperties: _extends({}, result.oldProperties, _defineProperty({}, key, oldProperties))
          };
        }

        // handle ID change
        if (key === ID && isIdChange(bo, value)) {
          ids.unclaim(bo[ID]);

          _this._elementRegistry.updateId(bo, value);

          ids.claim(value, bo);
        }

        // handle plain update
        bo.set(key, value);

        return {
          changed: result.changed,
          oldProperties: _extends({}, result.oldProperties, _defineProperty({}, key, propertyValue))
        };
      }, { changed: [], oldProperties: {} });
    }
  }]);

  return EditPropertiesHandler;
}();

export default EditPropertiesHandler;


EditPropertiesHandler.$inject = ['elementRegistry', 'moddle'];

// helpers //////////////////////

function isIdChange(element, newId) {
  return element[ID] !== newId;
}

function isContainer(o) {
  return isDefined(o) && isObject(o);
}
//# sourceMappingURL=UpdatePropertiesHandler.js.map