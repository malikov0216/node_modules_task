{"version":3,"sources":["../../src/util/IdsUtil.js"],"names":["SPACE_REGEX","QNAME_REGEX","ID_REGEX","PLACEHOLDER_REGEX","validateId","businessObject","id","assigned","$model","ids","idExists","validateIdFormat","stripPlaceholders","containsSpace","test","value","replace"],"mappings":"AAAA,IAAMA,cAAc,IAApB;;AAEA;AACA,IAAMC,cAAc,kCAApB;;AAEA;AACA,IAAMC,WAAW,kBAAjB;;AAEA,IAAMC,oBAAoB,gBAA1B;;AAEA;;;;;;;;AAQA,OAAO,SAASC,UAAT,CAAoBC,cAApB,EAAoCC,EAApC,EAAwC;AAC7C,MAAMC,WAAWF,eAAeG,MAAf,CAAsBC,GAAtB,CAA0BF,QAA1B,CAAmCD,EAAnC,CAAjB;;AAEA,MAAMI,WAAWH,YAAYA,aAAaF,cAA1C;;AAEA,MAAI,CAACC,EAAD,IAAOI,QAAX,EAAqB;AACnB,WAAO,iCAAP;AACD;;AAED,SAAOC,iBAAiBL,EAAjB,CAAP;AACD;;AAGD,SAASK,gBAAT,CAA0BL,EAA1B,EAA8B;;AAE5BA,OAAKM,kBAAkBN,EAAlB,CAAL;;AAEA,MAAIO,cAAcP,EAAd,CAAJ,EAAuB;AACrB,WAAO,6BAAP;AACD;;AAED,MAAI,CAACJ,SAASY,IAAT,CAAcR,EAAd,CAAL,EAAwB;;AAEtB,QAAIL,YAAYa,IAAZ,CAAiBR,EAAjB,CAAJ,EAA0B;AACxB,aAAO,6BAAP;AACD;;AAED,WAAO,2BAAP;AACD;AACF;;AAGD,SAASO,aAAT,CAAuBE,KAAvB,EAA8B;AAC5B,SAAOf,YAAYc,IAAZ,CAAiBC,KAAjB,CAAP;AACD;;AAGD,SAASH,iBAAT,CAA2BN,EAA3B,EAA+B;;AAE7B;AACA;AACA;AACA,SAAOA,GAAGU,OAAH,CAAWb,iBAAX,EAA8B,IAA9B,CAAP;AACD","file":"IdsUtil.js","sourcesContent":["const SPACE_REGEX = /\\s/;\n\n// for QName validation as per http://www.w3.org/TR/REC-xml/#NT-NameChar\nconst QNAME_REGEX = /^([a-z][\\w-.]*:)?[a-z_][\\w-.]*$/i;\n\n// for ID validation as per BPMN Schema (QName - Namespace)\nconst ID_REGEX = /^[a-z_][\\w-.]*$/i;\n\nconst PLACEHOLDER_REGEX = /\\$\\{([^}]*)\\}/g;\n\n/**\n * Validates an ID.\n *\n * @param {ModdleElement} businessObject\n * @param {String} id\n *\n * @return {String} error message\n */\nexport function validateId(businessObject, id) {\n  const assigned = businessObject.$model.ids.assigned(id);\n\n  const idExists = assigned && assigned !== businessObject;\n\n  if (!id || idExists) {\n    return 'Element must have an unique id.';\n  }\n\n  return validateIdFormat(id);\n}\n\n\nfunction validateIdFormat(id) {\n\n  id = stripPlaceholders(id);\n\n  if (containsSpace(id)) {\n    return 'Id must not contain spaces.';\n  }\n\n  if (!ID_REGEX.test(id)) {\n\n    if (QNAME_REGEX.test(id)) {\n      return 'Id must not contain prefix.';\n    }\n\n    return 'Id must be a valid QName.';\n  }\n}\n\n\nfunction containsSpace(value) {\n  return SPACE_REGEX.test(value);\n}\n\n\nfunction stripPlaceholders(id) {\n\n  // replace expression e.g. ${VERSION_TAG}\n  // use only the content between ${}\n  // for the REGEX check\n  return id.replace(PLACEHOLDER_REGEX, '$1');\n}"]}