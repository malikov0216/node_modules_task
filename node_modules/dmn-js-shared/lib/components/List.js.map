{"version":3,"sources":["../../src/components/List.js"],"names":["Component","groupBy","RADIO","REMOVE_BTN_CLS","List","props","context","getRemoveClickHandler","item","e","stopPropagation","removeItem","getToggleClickHandler","toggleItem","onChange","newItems","state","items","filter","i","setState","type","map","isChecked","className","classes","push","groupedItems","asPairs","toPairs","join","groupTitle","pair","groupItems","value","isRemovable","object","entrys","key"],"mappings":"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","file":"List.js","sourcesContent":["import { Component } from 'inferno';\n\nimport { groupBy } from 'min-dash';\n\nconst RADIO = 'radio';\n\nconst REMOVE_BTN_CLS =\n  'remove dmn-icon-clear';\n\n/**\n * Shows a list of grouped items that can be checked\n * (checkboxes or radio buttons), removed.\n *\n * Example list of items:\n *\n * [\n *   { value: 'foo', isChecked: true, isRemovable: false, group: 'foo' },\n *   { value: 'bar', isChecked: false, isRemovable: true, group: 'bar' },\n *   { value: 'baz', isCheckable: false, group: 'baz' }\n * ]\n */\nexport default class List extends Component {\n\n  constructor(props, context) {\n    super(props, context);\n\n    const { items } = props;\n\n    this.state = {\n      items\n    };\n  }\n\n  componentWillReceiveProps(props) {\n    const { items } = props;\n\n    this.setState({\n      items\n    });\n  }\n\n  getRemoveClickHandler = (item) => {\n    return (e) => {\n      e.stopPropagation();\n\n      this.removeItem(item);\n    };\n  }\n\n  getToggleClickHandler = (item) => {\n    return (e) => {\n      e.stopPropagation();\n\n      this.toggleItem(item);\n    };\n  }\n\n  removeItem = (item) => {\n    const { onChange } = this.props;\n\n    // remove item\n    const newItems = this.state.items.filter(i => i !== item);\n\n    this.setState({\n      items: newItems\n    });\n\n    onChange && onChange(newItems);\n  }\n\n  toggleItem = (item) => {\n    const { onChange, type } = this.props;\n\n    // toggle item\n    const newItems = this.state.items.map(i => {\n      if (i === item) {\n        i.isChecked = !i.isChecked;\n      } else {\n\n        if (type === RADIO) {\n          i.isChecked = false;\n        }\n\n      }\n\n      return i;\n    });\n\n    this.setState({\n      items: newItems\n    });\n\n    onChange && onChange(newItems);\n  }\n\n  render() {\n    const { className, items, type } = this.props;\n\n    const classes = [\n      'dms-list-component'\n    ];\n\n    if (className) {\n      classes.push(className);\n    }\n\n    // group items by group title\n    const groupedItems = groupBy(items, 'group');\n\n    const asPairs = toPairs(groupedItems);\n\n    return (\n      <div className={ classes.join(' ') }>\n        {\n          asPairs.map(pair => {\n\n            const groupTitle = pair[0],\n                  groupItems = pair[1];\n\n            return (\n              <div className=\"group\">\n\n                <h4 className=\"dms-heading\">{ groupTitle }</h4>\n\n                <ul className=\"items no-wrap\">\n                  {\n                    groupItems.map(item => {\n\n                      return (\n                        <li className=\"item\">\n                          {\n                            type\n                              && <input\n                                type={ type }\n                                checked={ item.isChecked }\n                                className=\"item-toggle\"\n                                onClick={ this.getToggleClickHandler(item) } />\n                          }\n                          &nbsp;\n                          { item.value }\n                          {\n                            item.isRemovable\n                              && (<span\n                                title=\"Remove item\"\n                                onClick={ this.getRemoveClickHandler(item) }\n                                className={ REMOVE_BTN_CLS }>\n                              </span>)\n                          }\n                        </li>\n                      );\n\n                    })\n                  }\n                </ul>\n\n              </div>\n            );\n\n          })\n        }\n\n      </div>\n    );\n  }\n}\n\n\n// helpers ////////////\n\nfunction toPairs(object) {\n  const entrys = [];\n\n  for (let key in object) {\n    entrys.push([key, object[key]]);\n  }\n\n  return entrys;\n}"]}