var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode, createComponentVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

// eslint-disable-next-line
import Input from './Input';

/**
 * Input with optional validation.
 */

var ValidatedInput = function (_Component) {
  _inherits(ValidatedInput, _Component);

  function ValidatedInput(props, context) {
    _classCallCheck(this, ValidatedInput);

    var _this = _possibleConstructorReturn(this, (ValidatedInput.__proto__ || Object.getPrototypeOf(ValidatedInput)).call(this, props, context));

    var validate = props.validate,
        value = props.value;


    var validationWarning = validate ? validate(value || '') : undefined;

    _this.state = {
      validationWarning: validationWarning,
      value: value
    };

    _this.onInput = _this.onInput.bind(_this);
    _this.onKeyDown = _this.onKeyDown.bind(_this);
    _this.onKeyUp = _this.onKeyUp.bind(_this);
    return _this;
  }

  _createClass(ValidatedInput, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      var validate = props.validate,
          value = props.value;


      var validationWarning = validate ? validate(value || '') : undefined;

      this.setState({
        validationWarning: validationWarning,
        value: value
      });
    }
  }, {
    key: 'onInput',
    value: function onInput(value) {
      var _props = this.props,
          onInput = _props.onInput,
          validate = _props.validate;


      var validationWarning = validate ? validate(value) : undefined;

      this.setState({
        validationWarning: validationWarning,
        value: value
      });

      if (typeof onInput !== 'function') {
        return;
      }

      onInput && onInput({
        isValid: !validationWarning,
        value: value
      });
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(event) {
      var target = event.target,
          value = target.value;
      var _props2 = this.props,
          onKeyDown = _props2.onKeyDown,
          validate = _props2.validate;


      var validationWarning = validate ? validate(value) : undefined;

      if (typeof onKeyDown !== 'function') {
        return;
      }

      onKeyDown({
        isValid: !validationWarning,
        value: value,
        event: event
      });
    }
  }, {
    key: 'onKeyUp',
    value: function onKeyUp(event) {
      var target = event.target,
          value = target.value;
      var _props3 = this.props,
          onKeyUp = _props3.onKeyUp,
          validate = _props3.validate;


      var validationWarning = validate ? validate(value) : undefined;

      if (typeof onKeyUp !== 'function') {
        return;
      }

      onKeyUp({
        isValid: !validationWarning,
        value: value,
        event: event
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props4 = this.props,
          placeholder = _props4.placeholder,
          type = _props4.type,
          className = _props4.className;
      var _state = this.state,
          validationWarning = _state.validationWarning,
          value = _state.value;


      var parentClasses = ['dms-validated-input', className].join(' ');

      var inputClasses = [];

      if (validationWarning) {
        inputClasses.push('invalid');
      }

      return createVNode(1, 'div', parentClasses, [createComponentVNode(2, Input, {
        'className': inputClasses,
        'onInput': this.onInput,
        'onKeyDown': this.onKeyDown,
        'onKeyUp': this.onKeyUp,
        'placeholder': placeholder || '',
        'type': type,
        'value': value || ''
      }), validationWarning && createVNode(1, 'p', 'dms-hint dms-validation-warning', validationWarning, 0)], 0);
    }
  }]);

  return ValidatedInput;
}(Component);

export default ValidatedInput;
//# sourceMappingURL=ValidatedInput.js.map