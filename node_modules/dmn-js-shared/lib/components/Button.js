var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

var Button = function (_Component) {
  _inherits(Button, _Component);

  function Button(props, context) {
    _classCallCheck(this, Button);

    var _this = _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).call(this, props, context));

    _this.onClick = function (event) {
      var onClick = _this.props.onClick;


      if (typeof onClick !== 'function') {
        return;
      }

      onClick(event);
    };

    _this.onMouseDown = function (event) {
      var onMouseDown = _this.props.onMouseDown;


      if (typeof onMouseDown !== 'function') {
        return;
      }

      onMouseDown(event);
    };

    _this.onMouseUp = function (event) {
      var onMouseUp = _this.props.onMouseUp;


      if (typeof onMouseUp !== 'function') {
        return;
      }

      onMouseUp(event);
    };

    return _this;
  }

  _createClass(Button, [{
    key: 'render',
    value: function render() {
      var className = this.props.className;


      return createVNode(1, 'button', [className || '', 'button'].join(' '), this.props.children, 0, {
        'onClick': this.onClick,
        'onMouseDown': this.onMouseDown,
        'onMouseUp': this.onMouseUp
      });
    }
  }]);

  return Button;
}(Component);

export default Button;
//# sourceMappingURL=Button.js.map