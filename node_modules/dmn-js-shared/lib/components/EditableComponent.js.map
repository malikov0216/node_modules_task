{"version":3,"sources":["../../src/components/EditableComponent.js"],"names":["Component","ContentEditable","EditableComponent","props","context","onFocus","setState","focussed","onBlur","property","invalid","state","changing","injector","debounceInput","get","inputChanged","value","onChange","currentValue","onInput","validate","className","ctrlForNewline","getDisplayValue"],"mappings":"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","file":"EditableComponent.js","sourcesContent":["import { Component } from 'inferno';\n\nimport ContentEditable from './ContentEditable';\n\n\n/**\n * A base component for interactivity.\n *\n * @example\n *\n * class Foo extends EditableComponent {\n *\n *   render() {\n *     return (\n *       <div>{ this.getEditor() }</div>\n *     );\n *   }\n * }\n *\n * And in use:\n *\n * <Foo value={ blub }\n *      onChange={ (newValue) => { ... }\n *      onFocus={ () => { ... } }\n *      onBlur={ () => { ... } }\n *      validate={ (newValue) => { return 'some-error'; } }\n *      className=\"...\" } />\n *\n * Special classes added:\n *\n * * focused\n * * invalid\n *\n */\nexport default class EditableComponent extends Component {\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      changing: false,\n      focussed: false\n    };\n\n\n    const { injector } = context;\n\n    const debounceInput = injector.get('debounceInput');\n\n    this.inputChanged = debounceInput((value) => {\n      const { onChange } = this.props;\n\n      if (typeof onChange === 'function') {\n        onChange(value);\n      }\n\n      // only unset changed if user input and\n      // committed changed value equal. This prevents the\n      // input jumping back to the saved, good value.\n      const currentValue = this.state.changing;\n\n      this.setState({\n        changing: currentValue === value ? false : currentValue\n      });\n    });\n\n    this.onInput = (value) => {\n\n      var validate = this.props.validate || function() {};\n\n      var invalid = validate(value);\n\n      this.setState({\n        changing: value,\n        invalid: invalid\n      });\n\n      if (!invalid) {\n        this.inputChanged(value);\n      }\n    };\n  }\n\n  onFocus = () => {\n    this.setState({\n      focussed: true\n    });\n\n    var { onFocus } = this.props;\n\n    if (typeof onFocus === 'function') {\n      onFocus();\n    }\n  }\n\n  onBlur = (property) => {\n    this.setState({\n      focussed: false\n    });\n\n    const { invalid } = this.state;\n\n    if (invalid) {\n      this.setState({\n        changing: false,\n        invalid: false\n      });\n    }\n\n    const { onBlur } = this.props;\n\n    if (typeof onBlur === 'function') {\n      onBlur();\n    }\n  }\n\n  getClassName() {\n    var {\n      className\n    } = this.props;\n\n    var {\n      focussed,\n      invalid\n    } = this.state;\n\n    className += ' editable';\n\n    if (focussed) {\n      className += ' focussed';\n    }\n\n    if (invalid) {\n      className += ' invalid';\n    }\n\n    return className;\n  }\n\n  getDisplayValue() {\n\n    var {\n      value\n    } = this.props;\n\n    var {\n      focussed,\n      changing\n    } = this.state;\n\n    if (typeof changing === 'string') {\n      value = changing;\n    }\n\n    if (!value) {\n      value = focussed ? '' : '-';\n    }\n\n    return value;\n  }\n\n  getEditor(props = {}) {\n\n    return (\n      <ContentEditable\n        className={ props.className }\n        ctrlForNewline={ props.ctrlForNewline }\n        onFocus={ this.onFocus }\n        onBlur={ this.onBlur }\n        onInput={ this.onInput }\n        value={ this.getDisplayValue() } />\n    );\n  }\n\n}"]}