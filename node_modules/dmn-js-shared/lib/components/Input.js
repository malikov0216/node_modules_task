var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

var Input = function (_Component) {
  _inherits(Input, _Component);

  function Input(props, context) {
    _classCallCheck(this, Input);

    var _this = _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).call(this, props, context));

    _this.onInput = function (event) {
      var onInput = _this.props.onInput;


      if (typeof onInput !== 'function') {
        return;
      }

      onInput(event.target.value);
    };

    _this.onKeyDown = function (event) {
      var onKeyDown = _this.props.onKeyDown;


      if (typeof onKeyDown !== 'function') {
        return;
      }

      onKeyDown(event);
    };

    _this.onKeyUp = function (event) {
      var onKeyUp = _this.props.onKeyUp;


      if (typeof onKeyUp !== 'function') {
        return;
      }

      onKeyUp(event);
    };

    return _this;
  }

  _createClass(Input, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          placeholder = _props.placeholder,
          type = _props.type,
          value = _props.value;


      return createVNode(64, 'input', [className || '', 'dms-input'].join(' '), null, 1, {
        'placeholder': placeholder || '',
        'onInput': this.onInput,
        'onKeyDown': this.onKeyDown,
        'onKeyUp': this.onKeyUp,
        'spellcheck': 'false',
        'type': type || 'text',
        'value': value
      });
    }
  }]);

  return Input;
}(Component);

export default Input;
//# sourceMappingURL=Input.js.map