var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

var Select = function (_Component) {
  _inherits(Select, _Component);

  function Select(props, context) {
    _classCallCheck(this, Select);

    var _this = _possibleConstructorReturn(this, (Select.__proto__ || Object.getPrototypeOf(Select)).call(this, props, context));

    _initialiseProps.call(_this);

    var value = props.value;


    _this.state = {
      value: value
    };
    return _this;
  }

  _createClass(Select, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      var value = props.value;


      this.setState({
        value: value
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          options = _props.options;
      var value = this.state.value;


      return createVNode(256, 'select', [className || '', 'dms-select'].join(' '), (options || []).map(function (_ref) {
        var label = _ref.label,
            value = _ref.value;

        return createVNode(1, 'option', 'option', label, 0, {
          'value': value
        });
      }), 0, {
        'onChange': this.onChange,
        'value': value
      });
    }
  }]);

  return Select;
}(Component);

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.onChange = function (event) {
    var value = event.target.value;


    _this2.setState({
      value: value
    });

    var onChange = _this2.props.onChange;


    if (typeof onChange !== 'function') {
      return;
    }

    onChange(value);
  };
};

export default Select;
//# sourceMappingURL=Select.js.map