var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createComponentVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

import ContentEditable from './ContentEditable';

/**
 * A base component for interactivity.
 *
 * @example
 *
 * class Foo extends EditableComponent {
 *
 *   render() {
 *     return (
 *       <div>{ this.getEditor() }</div>
 *     );
 *   }
 * }
 *
 * And in use:
 *
 * <Foo value={ blub }
 *      onChange={ (newValue) => { ... }
 *      onFocus={ () => { ... } }
 *      onBlur={ () => { ... } }
 *      validate={ (newValue) => { return 'some-error'; } }
 *      className="..." } />
 *
 * Special classes added:
 *
 * * focused
 * * invalid
 *
 */

var EditableComponent = function (_Component) {
  _inherits(EditableComponent, _Component);

  function EditableComponent(props, context) {
    _classCallCheck(this, EditableComponent);

    var _this = _possibleConstructorReturn(this, (EditableComponent.__proto__ || Object.getPrototypeOf(EditableComponent)).call(this, props, context));

    _this.onFocus = function () {
      _this.setState({
        focussed: true
      });

      var onFocus = _this.props.onFocus;


      if (typeof onFocus === 'function') {
        onFocus();
      }
    };

    _this.onBlur = function (property) {
      _this.setState({
        focussed: false
      });

      var invalid = _this.state.invalid;


      if (invalid) {
        _this.setState({
          changing: false,
          invalid: false
        });
      }

      var onBlur = _this.props.onBlur;


      if (typeof onBlur === 'function') {
        onBlur();
      }
    };

    _this.state = {
      changing: false,
      focussed: false
    };

    var injector = context.injector;


    var debounceInput = injector.get('debounceInput');

    _this.inputChanged = debounceInput(function (value) {
      var onChange = _this.props.onChange;


      if (typeof onChange === 'function') {
        onChange(value);
      }

      // only unset changed if user input and
      // committed changed value equal. This prevents the
      // input jumping back to the saved, good value.
      var currentValue = _this.state.changing;

      _this.setState({
        changing: currentValue === value ? false : currentValue
      });
    });

    _this.onInput = function (value) {

      var validate = _this.props.validate || function () {};

      var invalid = validate(value);

      _this.setState({
        changing: value,
        invalid: invalid
      });

      if (!invalid) {
        _this.inputChanged(value);
      }
    };
    return _this;
  }

  _createClass(EditableComponent, [{
    key: 'getClassName',
    value: function getClassName() {
      var className = this.props.className;
      var _state = this.state,
          focussed = _state.focussed,
          invalid = _state.invalid;


      className += ' editable';

      if (focussed) {
        className += ' focussed';
      }

      if (invalid) {
        className += ' invalid';
      }

      return className;
    }
  }, {
    key: 'getDisplayValue',
    value: function getDisplayValue() {
      var value = this.props.value;
      var _state2 = this.state,
          focussed = _state2.focussed,
          changing = _state2.changing;


      if (typeof changing === 'string') {
        value = changing;
      }

      if (!value) {
        value = focussed ? '' : '-';
      }

      return value;
    }
  }, {
    key: 'getEditor',
    value: function getEditor() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


      return createComponentVNode(2, ContentEditable, {
        'className': props.className,
        'ctrlForNewline': props.ctrlForNewline,
        'onFocus': this.onFocus,
        'onBlur': this.onBlur,
        'onInput': this.onInput,
        'value': this.getDisplayValue()
      });
    }
  }]);

  return EditableComponent;
}(Component);

export default EditableComponent;
//# sourceMappingURL=EditableComponent.js.map