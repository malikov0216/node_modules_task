var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import { createComponentVNode, normalizeProps } from 'inferno';

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * A simple slot extension, built upon the components service.
 *
 * @type {Object}
 */
var ComponentWithSlots = {
  slotFill: function slotFill(slotProps, DefaultFill) {
    var type = slotProps.type,
        context = slotProps.context,
        props = _objectWithoutProperties(slotProps, ['type', 'context']);

    var Fill = this.components.getComponent(type, context) || DefaultFill;

    if (Fill) {
      return normalizeProps(createComponentVNode(2, Fill, _extends({}, context, props)));
    }

    return null;
  },
  slotFills: function slotFills(slotProps) {
    var type = slotProps.type,
        context = slotProps.context,
        props = _objectWithoutProperties(slotProps, ['type', 'context']);

    var fills = this.components.getComponents(type, context);

    return fills.map(function (Fill) {
      return normalizeProps(createComponentVNode(2, Fill, _extends({}, context, props)));
    });
  }
};

export default ComponentWithSlots;

ComponentWithSlots.$inject = ['components'];
//# sourceMappingURL=ComponentWithSlots.js.map