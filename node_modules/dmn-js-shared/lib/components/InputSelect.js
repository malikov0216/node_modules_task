var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component, createPortal } from 'inferno';

import { inject } from 'table-js/lib/components';

import { assign } from 'min-dash';

import { domify, remove as domRemove } from 'min-dom';

var InputSelect = function (_Component) {
  _inherits(InputSelect, _Component);

  function InputSelect(props, context) {
    _classCallCheck(this, InputSelect);

    var _this = _possibleConstructorReturn(this, (InputSelect.__proto__ || Object.getPrototypeOf(InputSelect)).call(this, props, context));

    _initialiseProps.call(_this);

    inject(_this);

    var value = props.value;


    _this.state = {
      value: value,
      optionsVisible: false
    };

    _this._portalEl = null;
    return _this;
  }

  _createClass(InputSelect, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      document.addEventListener('click', this.onGlobalClick);
      document.addEventListener('focusin', this.onFocusChanged);

      this.keyboard.addListener(this.onKeyboard);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      document.removeEventListener('focusin', this.onFocusChanged);
      document.removeEventListener('click', this.onGlobalClick);

      this.keyboard.removeListener(this.onKeyboard);

      this.removePortalEl();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      var value = props.value;


      this.setState({
        value: value
      });
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps, nextState) {
      var optionsVisible = nextState.optionsVisible;


      if (optionsVisible) {
        if (!this._portalEl) {
          this.addPortalEl();
        }
      } else {
        if (this._portalEl) {
          this.removePortalEl();
        }
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var optionsVisible = this.state.optionsVisible;


      if (!optionsVisible || !this.inputNode) {
        return;
      }

      var _inputNode$getBoundin = this.inputNode.getBoundingClientRect(),
          top = _inputNode$getBoundin.top,
          left = _inputNode$getBoundin.left,
          width = _inputNode$getBoundin.width,
          height = _inputNode$getBoundin.height;

      assign(this._portalEl.style, {
        top: top + height + 'px',
        left: left + 'px',
        width: width + 'px'
      });
    }
  }, {
    key: 'addPortalEl',
    value: function addPortalEl() {
      this._portalEl = domify('<div class="dms-select-options"></div>');

      var container = this.renderer.getContainer();

      container.appendChild(this._portalEl);
    }
  }, {
    key: 'removePortalEl',
    value: function removePortalEl() {
      if (this._portalEl) {
        domRemove(this._portalEl);

        this._portalEl = null;
      }
    }
  }, {
    key: 'focusInput',


    /**
     * Focus input node
     */
    value: function focusInput() {
      var node = this.inputNode;

      node.focus();

      // move cursor to end of input
      if ('selectionStart' in node) {
        node.selectionStart = 100000;
      }
    }
  }, {
    key: 'checkClose',
    value: function checkClose(focusTarget) {

      if (this._portalEl && !this._portalEl.contains(focusTarget) && !this.parentNode.contains(focusTarget)) {
        this.setOptionsVisible(false);
      }
    }
  }, {
    key: 'select',
    value: function select(direction) {
      var options = this.props.options;
      var value = this.state.value;


      if (!options) {
        return;
      }

      var option = options.filter(function (o) {
        return o.value === value;
      })[0];

      var idx = option ? options.indexOf(option) : -1;

      var nextIdx = idx === -1 ? direction === 1 ? 0 : options.length - 1 : (idx + direction) % options.length;

      var nextOption = options[nextIdx < 0 ? options.length + nextIdx : nextIdx];

      this.onChange(nextOption.value);
    }
  }, {
    key: 'setOptionsVisible',
    value: function setOptionsVisible(optionsVisible) {
      this.setState({
        optionsVisible: optionsVisible
      });
    }
  }, {
    key: 'renderOptions',
    value: function renderOptions(options, activeOption) {
      var _this2 = this;

      return createVNode(1, 'div', 'options', options.map(function (option) {
        return createVNode(1, 'div', ['option', activeOption === option ? 'active' : ''].join(' '), option.label, 0, {
          'data-value': option.value,
          'onClick': function onClick(e) {
            return _this2.onOptionClick(option.value, e);
          }
        });
      }), 0);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props = this.props,
          className = _props.className,
          options = _props.options,
          noInput = _props.noInput;
      var _state = this.state,
          optionsVisible = _state.optionsVisible,
          value = _state.value;


      var option = options ? options.filter(function (o) {
        return o.value === value;
      })[0] : false;

      var label = option ? option.label : value;

      return createVNode(1, 'div', [className || '', 'dms-input-select'].join(' '), [noInput ? createVNode(1, 'div', 'dms-input', label, 0, {
        'tabindex': '0',
        'onKeyDown': this.onKeyDown
      }, null, function (node) {
        return _this3.inputNode = node;
      }) : createVNode(64, 'input', 'dms-input', null, 1, {
        'onInput': this.onInput,
        'onKeyDown': this.onKeyDown,
        'spellcheck': 'false',
        'type': 'text',
        'value': value
      }, null, function (node) {
        return _this3.inputNode = node;
      }), createVNode(1, 'span', ['dms-input-select-icon', optionsVisible ? 'dmn-icon-up' : 'dmn-icon-down'].join(' ')), optionsVisible && createPortal(this.renderOptions(options, option), this._portalEl)], 0, {
        'onClick': this.onInputClick
      }, null, function (node) {
        return _this3.parentNode = node;
      });
    }
  }]);

  return InputSelect;
}(Component);

var _initialiseProps = function _initialiseProps() {
  var _this4 = this;

  this.onChange = function (value) {
    _this4.setState({
      value: value
    });

    var onChange = _this4.props.onChange;


    if (typeof onChange !== 'function') {
      return;
    }

    onChange(value);
  };

  this.onInputClick = function (event) {
    event.preventDefault();
    event.stopPropagation();

    _this4.setOptionsVisible(!_this4.state.optionsVisible);

    _this4.focusInput();
  };

  this.onInput = function (event) {
    var value = event.target.value;


    _this4.onChange(value);
  };

  this.onOptionClick = function (value, event) {
    event.preventDefault();
    event.stopPropagation();

    _this4.setOptionsVisible(false);

    _this4.onChange(value);

    _this4.focusInput();
  };

  this.onFocusChanged = function (evt) {
    _this4.checkClose(evt.target);
  };

  this.onGlobalClick = function (evt) {
    _this4.checkClose(evt.target);
  };

  this.onKeyDown = function (evt) {
    var optionsVisible = _this4.state.optionsVisible;


    var code = evt.which;

    // DOWN or UP
    if (code === 40 || code === 38) {

      evt.stopPropagation();
      evt.preventDefault();

      if (!optionsVisible) {
        _this4.setOptionsVisible(true);
      } else {
        _this4.select(code === 40 ? 1 : -1);
      }
    }

    if (optionsVisible) {

      // ENTER
      // ESC
      if (code === 13 || code === 27) {
        evt.stopPropagation();
        evt.preventDefault();

        _this4.setOptionsVisible(false);
      }
    }
  };

  this.onKeyboard = function (keycode) {
    var optionsVisible = _this4.state.optionsVisible;


    if (!optionsVisible) {
      return;
    }

    // close on ESC
    if (keycode === 27) {
      _this4.setOptionsVisible(false);

      return true;
    }
  };
};

export default InputSelect;


InputSelect.$inject = ['keyboard', 'renderer'];
//# sourceMappingURL=InputSelect.js.map