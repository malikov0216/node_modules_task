var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode, createTextVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

import { groupBy } from 'min-dash';

var RADIO = 'radio';

var REMOVE_BTN_CLS = 'remove dmn-icon-clear';

/**
 * Shows a list of grouped items that can be checked
 * (checkboxes or radio buttons), removed.
 *
 * Example list of items:
 *
 * [
 *   { value: 'foo', isChecked: true, isRemovable: false, group: 'foo' },
 *   { value: 'bar', isChecked: false, isRemovable: true, group: 'bar' },
 *   { value: 'baz', isCheckable: false, group: 'baz' }
 * ]
 */

var List = function (_Component) {
  _inherits(List, _Component);

  function List(props, context) {
    _classCallCheck(this, List);

    var _this = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, props, context));

    _this.getRemoveClickHandler = function (item) {
      return function (e) {
        e.stopPropagation();

        _this.removeItem(item);
      };
    };

    _this.getToggleClickHandler = function (item) {
      return function (e) {
        e.stopPropagation();

        _this.toggleItem(item);
      };
    };

    _this.removeItem = function (item) {
      var onChange = _this.props.onChange;

      // remove item

      var newItems = _this.state.items.filter(function (i) {
        return i !== item;
      });

      _this.setState({
        items: newItems
      });

      onChange && onChange(newItems);
    };

    _this.toggleItem = function (item) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          type = _this$props.type;

      // toggle item

      var newItems = _this.state.items.map(function (i) {
        if (i === item) {
          i.isChecked = !i.isChecked;
        } else {

          if (type === RADIO) {
            i.isChecked = false;
          }
        }

        return i;
      });

      _this.setState({
        items: newItems
      });

      onChange && onChange(newItems);
    };

    var items = props.items;


    _this.state = {
      items: items
    };
    return _this;
  }

  _createClass(List, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      var items = props.items;


      this.setState({
        items: items
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          className = _props.className,
          items = _props.items,
          type = _props.type;


      var classes = ['dms-list-component'];

      if (className) {
        classes.push(className);
      }

      // group items by group title
      var groupedItems = groupBy(items, 'group');

      var asPairs = toPairs(groupedItems);

      return createVNode(1, 'div', classes.join(' '), asPairs.map(function (pair) {

        var groupTitle = pair[0],
            groupItems = pair[1];

        return createVNode(1, 'div', 'group', [createVNode(1, 'h4', 'dms-heading', groupTitle, 0), createVNode(1, 'ul', 'items no-wrap', groupItems.map(function (item) {

          return createVNode(1, 'li', 'item', [type && createVNode(64, 'input', 'item-toggle', null, 1, {
            'type': type,
            'checked': item.isChecked,
            'onClick': _this2.getToggleClickHandler(item)
          }), createTextVNode('\xA0'), item.value, item.isRemovable && createVNode(1, 'span', REMOVE_BTN_CLS, null, 1, {
            'title': 'Remove item',
            'onClick': _this2.getRemoveClickHandler(item)
          })], 0);
        }), 0)], 4);
      }), 0);
    }
  }]);

  return List;
}(Component);

// helpers ////////////

export default List;
function toPairs(object) {
  var entrys = [];

  for (var key in object) {
    entrys.push([key, object[key]]);
  }

  return entrys;
}
//# sourceMappingURL=List.js.map