{"version":3,"sources":["../../src/components/ContentEditable.js"],"names":["Component","escapeHtml","getRange","setRange","applyRange","getWindowSelection","selectionUpdate","ContentEditable","props","context","onFocus","propsFocus","setState","focussed","onBlur","propsBlur","onKeydown","event","which","preventDefault","ctrlForNewline","isCmd","stopPropagation","insertLineBreak","onInput","propsInput","text","innerText","node","onPaste","noop","onKeypress","state","isIE","oldText","innerHTML","setTimeout","newProps","newState","range","selected","newText","newRange","value","className","replace","join","__html","brTag","document","createElement","selection","getRangeAt","cloneRange","br","deleteContents","insertNode","setStartAfter","setEndAfter","ua","window","navigator","userAgent","indexOf","metaKey","ctrlKey"],"mappings":"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","file":"ContentEditable.js","sourcesContent":["import { Component } from 'inferno';\n\nimport escapeHtml from 'escape-html';\n\nimport {\n  getRange,\n  setRange,\n  applyRange,\n  getWindowSelection\n} from 'selection-ranges';\n\nimport selectionUpdate from 'selection-update';\n\n\n/**\n * A content ediable that performs proper selection updates on\n * editable changes. It normalizes editor operations by allowing\n * only <br/> and plain text to be inserted.\n *\n * The callback `onInput(text)` recieves text (including line breaks)\n * only. Updating the value via props will update the selection\n * if needed, too.\n *\n * @example\n *\n * class SomeComponent extends Component {\n *\n *   render() {\n *     return (\n *       <ContentEditable\n *         className=\"some classes\"\n *         value={ this.state.text }\n *         onInput={ this.handleInput }\n *         onFocus={ ... }\n *         onBlur={ ... } />\n *     );\n *   }\n *\n * }\n *\n */\nexport default class ContentEditable extends Component {\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {};\n\n    // TODO(nikku): remove once we drop IE 11 support\n    if (isIE()) {\n\n      // onInput shim for IE <= 11\n      this.onPaste = this.onKeypress = (event) => {\n\n        var oldText = this.node.innerHTML;\n\n        setTimeout(() => {\n\n          var text = this.node.innerHTML;\n          if (oldText !== text) {\n            this.onInput(event);\n          }\n        }, 0);\n      };\n\n    }\n  }\n\n  componentWillUpdate(newProps, newState) {\n\n    // save old selection + text for later\n    var node = this.node;\n\n    var range = newState.focussed && getRange(node);\n\n    this.selected = range && {\n      range: range,\n      text: innerText(node)\n    };\n  }\n\n  componentDidUpdate() {\n\n    var selected = this.selected;\n\n    if (!selected) {\n      return;\n    }\n\n    // compute and restore selection based on\n    // (possibly new) text\n\n    const range = selected.range;\n    const text = selected.text;\n\n    const node = this.node;\n\n    const newText = innerText(node);\n\n    const newRange = (\n      newText !== text\n        ? selectionUpdate(range, text, newText)\n        : range\n    );\n\n    setRange(node, newRange);\n  }\n\n  onFocus = () => {\n    var propsFocus = this.props.onFocus;\n\n    this.setState({\n      focussed: true\n    });\n\n    if (typeof propsFocus === 'function') {\n      propsFocus();\n    }\n  }\n\n  onBlur = () => {\n    var propsBlur = this.props.onBlur;\n\n    this.setState({\n      focussed: false\n    });\n\n    if (typeof propsBlur === 'function') {\n      propsBlur();\n    }\n  }\n\n  onKeydown = (event) => {\n    // enter\n    if (event.which === 13) {\n\n      // prevent default action (<br/> insert)\n      event.preventDefault();\n\n      if (this.props.ctrlForNewline && !isCmd(event)) {\n        return;\n      }\n\n      event.stopPropagation();\n\n      insertLineBreak();\n\n      this.onInput(event);\n    }\n\n  }\n\n  onInput = (event) => {\n\n    var propsInput = this.props.onInput;\n\n    if (typeof propsInput !== 'function') {\n      return;\n    }\n\n    var text = innerText(this.node);\n\n    propsInput(text);\n  }\n\n  // stubs for modern browsers; actual implementation\n  // for IE 11 to polyfill missing <input> event on [contentediable]\n  onPaste = noop;\n  onKeypress = noop;\n\n\n  render(props) {\n\n    var {\n      value,\n      className\n    } = props;\n\n    // QUIRK: must add trailing <br/> for line\n    // breaks to properly work\n    value =\n      escapeHtml(value)\n        .replace(/\\r?\\n/g, '<br/>') + '<br/>';\n\n    return (\n      <div\n        className={ [ className || '', 'content-editable' ].join(' ') }\n        contentEditable=\"true\"\n        spellcheck=\"false\"\n        onInput={ this.onInput }\n        onKeypress={ this.onKeypress }\n        onPaste={ this.onPaste }\n        onFocus={ this.onFocus }\n        onBlur={ this.onBlur }\n        onKeydown={ this.onKeydown }\n        ref={ node => this.node = node }\n        dangerouslySetInnerHTML={ { __html: value } }></div>\n    );\n  }\n\n}\n\nfunction brTag() {\n  return document.createElement('br');\n}\n\nfunction innerText(node) {\n  // QUIRK: we must remove the last trailing <br/>, if any\n  return node.innerText.replace(/\\n$/, '');\n}\n\nfunction insertLineBreak() {\n\n  // insert line break at current insertation\n  // point; this assumes that the correct element, i.e.\n  // a <ContentEditable /> is currently focussed\n  var selection = getWindowSelection();\n\n  var range = selection.getRangeAt(0);\n\n  if (!range) {\n    return;\n  }\n\n  var newRange = range.cloneRange();\n\n  var br = brTag();\n\n  newRange.deleteContents();\n\n  newRange.insertNode(br);\n\n  newRange.setStartAfter(br);\n  newRange.setEndAfter(br);\n\n  applyRange(newRange);\n}\n\nfunction noop() { }\n\nfunction isIE() {\n  var ua = window.navigator.userAgent;\n\n  return (\n    // IE 10 or older\n    ua.indexOf('MSIE ') > 0 ||\n    // IE 11\n    ua.indexOf('Trident/') > 0\n  );\n}\n\nfunction isCmd(event) {\n  return event.metaKey || event.ctrlKey;\n}"]}