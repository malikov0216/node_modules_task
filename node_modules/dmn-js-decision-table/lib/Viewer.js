var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import Table from 'table-js';

import { importDecision } from './import/Importer';

import { assign } from 'min-dash';

import { domify, remove as domRemove } from 'min-dom';

import annotationsModule from './features/annotations';
import coreModule from './core';
import decisionTableHeadModule from './features/decision-table-head';
import decisionTablePropertiesModule from './features/decision-table-properties';
import decisionRuleIndicesModule from './features/decision-rule-indices';
import decisoinRulesModule from './features/decision-rules';
import hitPolicyModule from './features/hit-policy';
import viewDrdModule from './features/view-drd';
import PoweredByModule from './features/powered-by';

var Viewer = function (_Table) {
  _inherits(Viewer, _Table);

  function Viewer() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Viewer);

    var container = Viewer._createContainer();

    var _this = _possibleConstructorReturn(this, (Viewer.__proto__ || Object.getPrototypeOf(Viewer)).call(this, assign(options, {
      renderer: {
        container: container
      }
    })));

    _this._container = container;
    return _this;
  }

  _createClass(Viewer, [{
    key: 'open',
    value: function open(decision, done) {

      var err;

      // use try/catch to not swallow synchronous exceptions
      // that may be raised during model parsing
      try {

        if (this._decision) {
          // clear existing rendered diagram
          this.clear();
        }

        // update decision
        this._decision = decision;

        // perform import
        return importDecision(this, decision, done);
      } catch (e) {
        err = e;
      }

      // handle synchronously thrown exception
      return done(err);
    }

    /**
     * Initialize the table, returning { modules: [], config }.
     *
     * @param  {Object} options
     *
     * @return {Object} init config
     */

  }, {
    key: '_init',
    value: function _init(options) {
      var modules = options.modules,
          additionalModules = options.additionalModules,
          config = _objectWithoutProperties(options, ['modules', 'additionalModules']);

      var baseModules = modules || this.getModules();
      var extraModules = additionalModules || [];
      var staticModules = [{
        decisionTable: ['value', this]
      }];

      var allModules = [PoweredByModule].concat(_toConsumableArray(baseModules), _toConsumableArray(extraModules), staticModules);

      return {
        modules: allModules,
        config: config
      };
    }

    /**
     * Register an event listener
     *
     * Remove a previously added listener via {@link #off(event, callback)}.
     *
     * @param {String} event
     * @param {Number} [priority]
     * @param {Function} callback
     * @param {Object} [that]
     */

  }, {
    key: 'on',
    value: function on(event, priority, callback, target) {
      return this.get('eventBus').on(event, priority, callback, target);
    }

    /**
     * De-register an event listener
     *
     * @param {String} event
     * @param {Function} callback
     */

  }, {
    key: 'off',
    value: function off(event, callback) {
      this.get('eventBus').off(event, callback);
    }

    /**
     * Emit an event on the underlying {@link EventBus}
     *
     * @param  {String} type
     * @param  {Object} event
     *
     * @return {Object} event processing result (if any)
     */

  }, {
    key: '_emit',
    value: function _emit(type, event) {
      return this.get('eventBus').fire(type, event);
    }

    /**
     * Attach viewer to given parent node.
     *
     * @param  {Element} parentNode
     */

  }, {
    key: 'attachTo',
    value: function attachTo(parentNode) {

      if (!parentNode) {
        throw new Error('parentNode required');
      }

      // ensure we detach from the
      // previous, old parent
      this.detach();

      var container = this._container;

      parentNode.appendChild(container);

      this._emit('attach', {});
    }

    /**
     * Detach viewer from parent node, if attached.
     */

  }, {
    key: 'detach',
    value: function detach() {

      var container = this._container,
          parentNode = container.parentNode;

      if (!parentNode) {
        return;
      }

      this._emit('detach', {});

      domRemove(container);
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      _get(Viewer.prototype.__proto__ || Object.getPrototypeOf(Viewer.prototype), 'destroy', this).call(this);

      this.detach();
    }
  }, {
    key: 'getModules',
    value: function getModules() {
      return Viewer._getModules();
    }
  }], [{
    key: '_getModules',
    value: function _getModules() {
      return [annotationsModule, coreModule, decisionTableHeadModule, decisionTablePropertiesModule, decisionRuleIndicesModule, decisoinRulesModule, hitPolicyModule, viewDrdModule];
    }
  }, {
    key: '_createContainer',
    value: function _createContainer() {
      return domify('<div class="dmn-decision-table-container"></div>');
    }
  }]);

  return Viewer;
}(Table);

export default Viewer;
//# sourceMappingURL=Viewer.js.map