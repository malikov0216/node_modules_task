var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode, createComponentVNode, createTextVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

import ValidatedInput from 'dmn-js-shared/lib/components/ValidatedInput';

import { getSampleDate, validateISOString, parseString } from '../Utils';

var OutputDateEdit = function (_Component) {
  _inherits(OutputDateEdit, _Component);

  function OutputDateEdit(props, context) {
    _classCallCheck(this, OutputDateEdit);

    var _this = _possibleConstructorReturn(this, (OutputDateEdit.__proto__ || Object.getPrototypeOf(OutputDateEdit)).call(this, props, context));

    _this._modeling = context.injector.get('modeling');

    var element = _this.props.context.element;


    var parsedString = parseString(element.businessObject.text);

    _this.state = {
      date: parsedString ? parsedString.date : ''
    };

    var debounceInput = context.injector.get('debounceInput');

    _this.debouncedEditCell = debounceInput(_this.editCell.bind(_this));
    _this.editCell = _this.editCell.bind(_this);

    _this.onClick = _this.onClick.bind(_this);
    _this.onInput = _this.onInput.bind(_this);
    return _this;
  }

  _createClass(OutputDateEdit, [{
    key: 'editCell',
    value: function editCell(cell, text) {
      this._modeling.editCell(cell, text);
    }
  }, {
    key: 'onClick',
    value: function onClick() {
      var element = this.props.context.element;


      var date = getSampleDate();

      this.setState({
        date: date
      });

      this.editCell(element.businessObject, 'date and time("' + date + '")');
    }
  }, {
    key: 'onInput',
    value: function onInput(_ref) {
      var isValid = _ref.isValid,
          value = _ref.value;

      if (isValid) {
        var element = this.props.context.element;


        this.setState({
          date: value
        });

        this.debouncedEditCell(element.businessObject, 'date and time("' + value + '")');
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var date = this.state.date;


      return createVNode(1, 'div', 'context-menu-container simple-date-edit', [createVNode(1, 'h3', 'dms-heading', createTextVNode('Edit Date'), 2), createVNode(1, 'h4', 'dms-heading', createTextVNode('Set Date'), 2), createVNode(1, 'div', null, [createComponentVNode(2, ValidatedInput, {
        'onInput': this.onInput,
        'placeholder': 'e.g. ' + getSampleDate(),
        'validate': validateISOString,
        'value': date,
        'className': 'dms-block'
      }), createVNode(1, 'p', 'dms-hint', [createTextVNode('Set date '), createVNode(1, 'a', 'use-today', createTextVNode('to today'), 2, {
        'href': '#',
        'onClick': this.onClick
      }), createTextVNode('.')], 4)], 4)], 4);
    }
  }]);

  return OutputDateEdit;
}(Component);

export default OutputDateEdit;
//# sourceMappingURL=OutputDateEdit.js.map