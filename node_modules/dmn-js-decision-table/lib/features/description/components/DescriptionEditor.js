var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode, createComponentVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

import { isString } from 'min-dash';

import { query as domQuery } from 'min-dom';

import EditableComponent from 'dmn-js-shared/lib/components/EditableComponent';

var DescriptionEditor = function (_Component) {
  _inherits(DescriptionEditor, _Component);

  function DescriptionEditor(props, context) {
    _classCallCheck(this, DescriptionEditor);

    var _this = _possibleConstructorReturn(this, (DescriptionEditor.__proto__ || Object.getPrototypeOf(DescriptionEditor)).call(this, props, context));

    _this.onElementsChanged = function () {
      _this.forceUpdate();
    };

    _this.changeDescription = function (value) {
      _this._modeling.updateProperties(_this._element, {
        description: value
      });
    };

    _this._elementRegistry = context.injector.get('elementRegistry');
    _this._modeling = context.injector.get('modeling');

    _this._changeSupport = _this.context.changeSupport;

    var id = _this.props.context.id;


    _this._element = _this._elementRegistry.get(id);
    return _this;
  }

  _createClass(DescriptionEditor, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      if (this._element) {
        this._changeSupport.onElementsChanged(this._element.id, this.onElementsChanged);
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var autoFocus = this.props.context.autoFocus;


      if (autoFocus && this.node) {
        var editor = getEditor(this.node);

        editor.focus();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this._element) {
        this._changeSupport.offElementsChanged(this._element.id, this.onElementsChanged);

        var businessObject = this._element.businessObject;
        var description = businessObject.description;

        // if empty description remove description

        if (isString(description) && !description.length) {
          this.changeDescription(null);
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      if (!this._element) {
        return;
      }

      var businessObject = this._element.businessObject;
      var description = businessObject.description;


      if (!isString(description)) {
        return;
      }

      return createVNode(1, 'div', 'context-menu-container description-editor', createComponentVNode(2, Editor, {
        'className': 'dms-input',
        'onChange': this.changeDescription,
        'value': description
      }), 2, null, null, function (node) {
        return _this2.node = node;
      });
    }
  }]);

  return DescriptionEditor;
}(Component);

export default DescriptionEditor;

var Editor = function (_EditableComponent) {
  _inherits(Editor, _EditableComponent);

  function Editor() {
    _classCallCheck(this, Editor);

    return _possibleConstructorReturn(this, (Editor.__proto__ || Object.getPrototypeOf(Editor)).apply(this, arguments));
  }

  _createClass(Editor, [{
    key: 'render',
    value: function render() {
      return createVNode(1, 'div', this.getClassName(), this.getEditor(), 0);
    }
  }]);

  return Editor;
}(EditableComponent);

// helpers //////////

function getEditor(container) {
  return domQuery('.content-editable', container);
}
//# sourceMappingURL=DescriptionEditor.js.map