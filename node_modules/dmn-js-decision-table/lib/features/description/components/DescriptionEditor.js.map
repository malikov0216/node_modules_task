{"version":3,"sources":["../../../../src/features/description/components/DescriptionEditor.js"],"names":["Component","isString","query","domQuery","EditableComponent","DescriptionEditor","props","context","onElementsChanged","forceUpdate","changeDescription","value","_modeling","updateProperties","_element","description","_elementRegistry","injector","get","_changeSupport","changeSupport","id","autoFocus","node","editor","getEditor","focus","offElementsChanged","businessObject","length","Editor","getClassName","container"],"mappings":";;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,SAA1B;;AAEA,SAASC,QAAT,QAAyB,UAAzB;;AAEA,SAASC,SAASC,QAAlB,QAAkC,SAAlC;;AAEA,OAAOC,iBAAP,MAA8B,gDAA9B;;IAEqBC,iB;;;AACnB,6BAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,sIACpBD,KADoB,EACbC,OADa;;AAAA,UAa5BC,iBAb4B,GAaR,YAAM;AACxB,YAAKC,WAAL;AACD,KAf2B;;AAAA,UAgD5BC,iBAhD4B,GAgDR,UAACC,KAAD,EAAW;AAC7B,YAAKC,SAAL,CAAeC,gBAAf,CAAgC,MAAKC,QAArC,EAA+C;AAC7CC,qBAAaJ;AADgC,OAA/C;AAGD,KApD2B;;AAG1B,UAAKK,gBAAL,GAAwBT,QAAQU,QAAR,CAAiBC,GAAjB,CAAqB,iBAArB,CAAxB;AACA,UAAKN,SAAL,GAAiBL,QAAQU,QAAR,CAAiBC,GAAjB,CAAqB,UAArB,CAAjB;;AAEA,UAAKC,cAAL,GAAsB,MAAKZ,OAAL,CAAaa,aAAnC;;AAN0B,QAQlBC,EARkB,GAQX,MAAKf,KAAL,CAAWC,OARA,CAQlBc,EARkB;;;AAU1B,UAAKP,QAAL,GAAgB,MAAKE,gBAAL,CAAsBE,GAAtB,CAA0BG,EAA1B,CAAhB;AAV0B;AAW3B;;;;yCAMoB;AACnB,UAAI,KAAKP,QAAT,EAAmB;AACjB,aAAKK,cAAL,CAAoBX,iBAApB,CAAsC,KAAKM,QAAL,CAAcO,EAApD,EAAwD,KAAKb,iBAA7D;AACD;AACF;;;wCAEmB;AAAA,UACVc,SADU,GACI,KAAKhB,KAAL,CAAWC,OADf,CACVe,SADU;;;AAGlB,UAAIA,aAAa,KAAKC,IAAtB,EAA4B;AAC1B,YAAMC,SAASC,UAAU,KAAKF,IAAf,CAAf;;AAEAC,eAAOE,KAAP;AACD;AACF;;;2CAEsB;AACrB,UAAI,KAAKZ,QAAT,EAAmB;AACjB,aAAKK,cAAL,CAAoBQ,kBAApB,CAAuC,KAAKb,QAAL,CAAcO,EAArD,EAAyD,KAAKb,iBAA9D;;AADiB,YAGToB,cAHS,GAGU,KAAKd,QAHf,CAGTc,cAHS;AAAA,YAKTb,WALS,GAKOa,cALP,CAKTb,WALS;;AAOjB;;AACA,YAAId,SAASc,WAAT,KAAyB,CAACA,YAAYc,MAA1C,EAAkD;AAChD,eAAKnB,iBAAL,CAAuB,IAAvB;AACD;AACF;AACF;;;6BAQQ;AAAA;;AACP,UAAI,CAAC,KAAKI,QAAV,EAAoB;AAClB;AACD;;AAHM,UAKCc,cALD,GAKoB,KAAKd,QALzB,CAKCc,cALD;AAAA,UAOCb,WAPD,GAOiBa,cAPjB,CAOCb,WAPD;;;AASP,UAAI,CAACd,SAASc,WAAT,CAAL,EAA4B;AAC1B;AACD;;AAED,mCAEU,2CAFV;AAAA,qBAKgB,WALhB;AAAA,oBAMiB,KAAKL,iBANtB;AAAA,iBAOcK;AAPd,yBAGU;AAAA,eAAQ,OAAKQ,IAAL,GAAYA,IAApB;AAAA,OAHV;AAUD;;;;EA9E4CvB,S;;eAA1BK,iB;;IAiFfyB,M;;;;;;;;;;;6BACK;AACP,mCACmB,KAAKC,YAAL,EADnB,EAGM,KAAKN,SAAL,EAHN;AAOD;;;;EATkBrB,iB;;AAYrB;;AAEA,SAASqB,SAAT,CAAmBO,SAAnB,EAA8B;AAC5B,SAAO7B,SAAS,mBAAT,EAA8B6B,SAA9B,CAAP;AACD","file":"DescriptionEditor.js","sourcesContent":["import { Component } from 'inferno';\r\n\r\nimport { isString } from 'min-dash';\r\n\r\nimport { query as domQuery } from 'min-dom';\r\n\r\nimport EditableComponent from 'dmn-js-shared/lib/components/EditableComponent';\r\n\r\nexport default class DescriptionEditor extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this._elementRegistry = context.injector.get('elementRegistry');\r\n    this._modeling = context.injector.get('modeling');\r\n\r\n    this._changeSupport = this.context.changeSupport;\r\n\r\n    const { id } = this.props.context;\r\n\r\n    this._element = this._elementRegistry.get(id);\r\n  }\r\n\r\n  onElementsChanged = () => {\r\n    this.forceUpdate();\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (this._element) {\r\n      this._changeSupport.onElementsChanged(this._element.id, this.onElementsChanged);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { autoFocus } = this.props.context;\r\n\r\n    if (autoFocus && this.node) {\r\n      const editor = getEditor(this.node);\r\n\r\n      editor.focus();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this._element) {\r\n      this._changeSupport.offElementsChanged(this._element.id, this.onElementsChanged);\r\n\r\n      const { businessObject } = this._element;\r\n\r\n      const { description } = businessObject;\r\n\r\n      // if empty description remove description\r\n      if (isString(description) && !description.length) {\r\n        this.changeDescription(null);\r\n      }\r\n    }\r\n  }\r\n\r\n  changeDescription = (value) => {\r\n    this._modeling.updateProperties(this._element, {\r\n      description: value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (!this._element) {\r\n      return;\r\n    }\r\n\r\n    const { businessObject } = this._element;\r\n\r\n    const { description } = businessObject;\r\n\r\n    if (!isString(description)) {\r\n      return;\r\n    }\r\n\r\n    return (\r\n      <div\r\n        class=\"context-menu-container description-editor\"\r\n        ref={ node => this.node = node }>\r\n        <Editor\r\n          className=\"dms-input\"\r\n          onChange={ this.changeDescription }\r\n          value={ description } />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Editor extends EditableComponent {\r\n  render() {\r\n    return (\r\n      <div className={ this.getClassName() }>\r\n        {\r\n          this.getEditor()\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// helpers //////////\r\n\r\nfunction getEditor(container) {\r\n  return domQuery('.content-editable', container);\r\n}"]}