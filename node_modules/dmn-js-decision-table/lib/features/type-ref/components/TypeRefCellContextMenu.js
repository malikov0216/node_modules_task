var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode, createComponentVNode, createTextVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

import { is, isInput, isOutput } from 'dmn-js-shared/lib/util/ModelUtil';

import InputSelect from 'dmn-js-shared/lib/components/InputSelect';

var TYPES = ['string', 'boolean', 'integer', 'long', 'double', 'date'];

var TypeRefCellContextMenu = function (_Component) {
  _inherits(TypeRefCellContextMenu, _Component);

  function TypeRefCellContextMenu(props, context) {
    _classCallCheck(this, TypeRefCellContextMenu);

    var _this = _possibleConstructorReturn(this, (TypeRefCellContextMenu.__proto__ || Object.getPrototypeOf(TypeRefCellContextMenu)).call(this, props));

    _this.onTypeChange = function (value) {
      var element = _this.props.context.element;


      var actualElement = is(element, 'dmn:LiteralExpression') ? element.$parent : element;

      var newProperties = void 0;

      if (isInput(actualElement)) {
        newProperties = {
          inputExpression: {
            typeRef: value
          }
        };
      } else if (isOutput(actualElement)) {
        newProperties = {
          typeRef: value
        };
      }

      _this._modeling.updateProperties(actualElement, newProperties);
    };

    _this._modeling = context.injector.get('modeling');
    return _this;
  }

  _createClass(TypeRefCellContextMenu, [{
    key: 'render',
    value: function render() {
      var element = this.props.context.element;


      var typeRef = (is(element, 'dmn:InputClause') ? element.inputExpression : element).typeRef;

      var typeRefOptions = TYPES.map(function (t) {
        return {
          label: t,
          value: t
        };
      });

      return createVNode(1, 'div', 'type-ref-edit context-menu-container', [createVNode(1, 'label', 'dms-label', createTextVNode('Type:'), 2), createComponentVNode(2, InputSelect, {
        'className': 'type-ref-edit-select',
        'onChange': this.onTypeChange,
        'options': typeRefOptions,
        'value': typeRef
      })], 4);
    }
  }]);

  return TypeRefCellContextMenu;
}(Component);

export default TypeRefCellContextMenu;
//# sourceMappingURL=TypeRefCellContextMenu.js.map