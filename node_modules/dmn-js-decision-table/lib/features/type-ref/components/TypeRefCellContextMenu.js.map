{"version":3,"sources":["../../../../src/features/type-ref/components/TypeRefCellContextMenu.js"],"names":["Component","is","isInput","isOutput","InputSelect","TYPES","TypeRefCellContextMenu","props","context","onTypeChange","value","element","actualElement","$parent","newProperties","inputExpression","typeRef","_modeling","updateProperties","injector","get","typeRefOptions","map","label","t"],"mappings":";;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,SAA1B;;AAEA,SAASC,EAAT,EAAaC,OAAb,EAAsBC,QAAtB,QAAsC,kCAAtC;;AAEA,OAAOC,WAAP,MAAwB,0CAAxB;;AAEA,IAAMC,QAAQ,CACZ,QADY,EAEZ,SAFY,EAGZ,SAHY,EAIZ,MAJY,EAKZ,QALY,EAMZ,MANY,CAAd;;IAUqBC,sB;;;AAEnB,kCAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,gJACpBD,KADoB;;AAAA,UAM5BE,YAN4B,GAMb,UAACC,KAAD,EAAW;AAAA,UAEtBC,OAFsB,GAGpB,MAAKJ,KAAL,CAAWC,OAHS,CAEtBG,OAFsB;;;AAKxB,UAAMC,gBAAgBX,GAAGU,OAAH,EAAY,uBAAZ,IAClBA,QAAQE,OADU,GAElBF,OAFJ;;AAIA,UAAIG,sBAAJ;;AAEA,UAAIZ,QAAQU,aAAR,CAAJ,EAA4B;AAC1BE,wBAAgB;AACdC,2BAAiB;AACfC,qBAASN;AADM;AADH,SAAhB;AAKD,OAND,MAMO,IAAIP,SAASS,aAAT,CAAJ,EAA6B;AAClCE,wBAAgB;AACdE,mBAASN;AADK,SAAhB;AAGD;;AAED,YAAKO,SAAL,CAAeC,gBAAf,CAAgCN,aAAhC,EAA+CE,aAA/C;AACD,KA9B2B;;AAG1B,UAAKG,SAAL,GAAiBT,QAAQW,QAAR,CAAiBC,GAAjB,CAAqB,UAArB,CAAjB;AAH0B;AAI3B;;;;6BA4BQ;AAAA,UACCT,OADD,GACa,KAAKJ,KAAL,CAAWC,OADxB,CACCG,OADD;;;AAGP,UAAMK,UAAU,CACdf,GAAGU,OAAH,EAAY,iBAAZ,IACEA,QAAQI,eADV,GAEEJ,OAHY,EAIdK,OAJF;;AAMA,UAAMK,iBAAiBhB,MAAMiB,GAAN,CAAU,aAAK;AACpC,eAAO;AACLC,iBAAOC,CADF;AAELd,iBAAOc;AAFF,SAAP;AAID,OALsB,CAAvB;;AAOA,mCACiB,sCADjB,2BAEqB,WAFrB;AAAA,qBAKgB,sBALhB;AAAA,oBAMiB,KAAKf,YANtB;AAAA,mBAOgBY,cAPhB;AAAA,iBAQcL;AARd;AAWD;;;;EA7DiDhB,S;;eAA/BM,sB","file":"TypeRefCellContextMenu.js","sourcesContent":["import { Component } from 'inferno';\n\nimport { is, isInput, isOutput } from 'dmn-js-shared/lib/util/ModelUtil';\n\nimport InputSelect from 'dmn-js-shared/lib/components/InputSelect';\n\nconst TYPES = [\n  'string',\n  'boolean',\n  'integer',\n  'long',\n  'double',\n  'date'\n];\n\n\nexport default class TypeRefCellContextMenu extends Component {\n\n  constructor(props, context) {\n    super(props);\n\n    this._modeling = context.injector.get('modeling');\n  }\n\n  onTypeChange = (value) => {\n    const {\n      element\n    } = this.props.context;\n\n    const actualElement = is(element, 'dmn:LiteralExpression')\n      ? element.$parent\n      : element;\n\n    let newProperties;\n\n    if (isInput(actualElement)) {\n      newProperties = {\n        inputExpression: {\n          typeRef: value\n        }\n      };\n    } else if (isOutput(actualElement)) {\n      newProperties = {\n        typeRef: value\n      };\n    }\n\n    this._modeling.updateProperties(actualElement, newProperties);\n  }\n\n  render() {\n    const { element } = this.props.context;\n\n    const typeRef = (\n      is(element, 'dmn:InputClause') ?\n        element.inputExpression :\n        element\n    ).typeRef;\n\n    const typeRefOptions = TYPES.map(t => {\n      return {\n        label: t,\n        value: t\n      };\n    });\n\n    return (\n      <div className=\"type-ref-edit context-menu-container\">\n        <label className=\"dms-label\">Type:</label>\n\n        <InputSelect\n          className=\"type-ref-edit-select\"\n          onChange={ this.onTypeChange }\n          options={ typeRefOptions }\n          value={ typeRef } />\n      </div>\n    );\n  }\n}"]}