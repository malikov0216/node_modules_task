var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

import { is } from 'dmn-js-shared/lib/util/ModelUtil';

var TypeRefCell = function (_Component) {
  _inherits(TypeRefCell, _Component);

  function TypeRefCell(props) {
    _classCallCheck(this, TypeRefCell);

    var _this = _possibleConstructorReturn(this, (TypeRefCell.__proto__ || Object.getPrototypeOf(TypeRefCell)).call(this, props));

    _this.onClick = function (event) {

      var element = _this.getTypeRefTarget();

      _this._eventBus.fire('typeRef.edit', {
        event: event,
        element: element
      });
    };

    _this.onContextmenu = function (event) {
      var element = _this.props.element;


      var actualElement = element;

      if (is(element, 'dmn:LiteralExpression')) {
        actualElement = element.$parent;
      }

      _this._eventBus.fire('cell.contextmenu', {
        event: event,
        node: event.node,
        id: actualElement.id
      });
    };

    _this.onElementsChanged = function () {
      _this.forceUpdate();
    };

    return _this;
  }

  _createClass(TypeRefCell, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var injector = this.context.injector;


      this._changeSupport = this.context.changeSupport;
      this._sheet = injector.get('sheet');
      this._eventBus = injector.get('eventBus');

      var target = this.getTypeRefTarget();

      this._changeSupport.onElementsChanged(target.id, this.onElementsChanged);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var target = this.getTypeRefTarget();

      this._changeSupport.offElementsChanged(target.id, this.onElementsChanged);
    }
  }, {
    key: 'getTypeRefTarget',
    value: function getTypeRefTarget() {
      var element = this.props.element;


      return is(element, 'dmn:InputClause') ? element.inputExpression : element;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          element = _props.element,
          className = _props.className;


      var actualClassName = (className || '') + ' type-ref';

      var colId = is(element, 'dmn:LiteralExpression') ? element.$parent.id : element.id;

      return createVNode(1, 'th', actualClassName, element.typeRef, 0, {
        'title': 'Data Type',
        'data-col-id': colId,
        'onClick': this.onClick,
        'onContextmenu': this.onContextmenu
      });
    }
  }]);

  return TypeRefCell;
}(Component);

export default TypeRefCell;
//# sourceMappingURL=TypeRefCell.js.map