function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { closest as domClosest } from 'min-dom';

import TypeRefCell from './components/TypeRefCell';
import TypeRefCellContextMenu from './components/TypeRefCellContextMenu';

var TypeRef = function TypeRef(components, contextMenu, eventBus, renderer) {
  _classCallCheck(this, TypeRef);

  components.onGetComponent('cell', function (_ref) {
    var cellType = _ref.cellType;

    if (cellType === 'input-header-type-ref' || cellType === 'output-header-type-ref') {
      return TypeRefCell;
    }
  });

  components.onGetComponent('context-menu', function () {
    var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (context.contextMenuType && context.contextMenuType === 'type-ref-edit') {
      return TypeRefCellContextMenu;
    }
  });

  eventBus.on('typeRef.edit', function (_ref2) {
    var event = _ref2.event,
        element = _ref2.element;
    var target = event.target;


    var node = domClosest(target, 'th', true);

    var _node$getBoundingClie = node.getBoundingClientRect(),
        left = _node$getBoundingClie.left,
        top = _node$getBoundingClie.top,
        width = _node$getBoundingClie.width,
        height = _node$getBoundingClie.height;

    var container = renderer.getContainer();

    contextMenu.open({
      x: left + container.parentNode.scrollLeft,
      y: top + container.parentNode.scrollTop,
      width: width,
      height: height
    }, {
      contextMenuType: 'type-ref-edit',
      element: element,
      offset: {
        x: 4,
        y: 4
      }
    });
  });
};

export default TypeRef;


TypeRef.$inject = ['components', 'contextMenu', 'eventBus', 'renderer'];
//# sourceMappingURL=TypeRefEditingProvider.js.map