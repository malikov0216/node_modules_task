var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode, createComponentVNode, createTextVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

import { is } from 'dmn-js-shared/lib/util/ModelUtil';

import List from 'dmn-js-shared/lib/components/List';

import ValidatedInput from 'dmn-js-shared/lib/components/ValidatedInput';

import { getValuesArray, parseString } from '../Utils';

var AllowedValuesEditing = function (_Component) {
  _inherits(AllowedValuesEditing, _Component);

  function AllowedValuesEditing(props, context) {
    _classCallCheck(this, AllowedValuesEditing);

    var _this = _possibleConstructorReturn(this, (AllowedValuesEditing.__proto__ || Object.getPrototypeOf(AllowedValuesEditing)).call(this, props, context));

    _initialiseProps.call(_this);

    _this._modeling = context.injector.get('modeling');
    _this._changeSupport = context.changeSupport;

    var target = _this.getAllowedValuesTarget();

    var parsedString = parseString(target.inputValues && target.inputValues.text || target.outputValues && target.outputValues.text || '');

    if (parsedString) {
      _this.state = {
        values: parsedString.values.map(function (value) {
          return {
            value: value,
            isCheckable: false,
            isRemovable: true,
            group: 'Predefined Values'
          };
        }),
        inputValue: ''
      };
    } else {
      _this.state = {
        values: null,
        inputValue: ''
      };
    }
    return _this;
  }

  _createClass(AllowedValuesEditing, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var target = this.getAllowedValuesTarget();

      this._changeSupport.onElementsChanged(target.id, this.onElementsChanged);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var target = this.getAllowedValuesTarget();

      this._changeSupport.offElementsChanged(target.id, this.onElementsChanged);
    }
  }, {
    key: 'getAllowedValuesTarget',
    value: function getAllowedValuesTarget() {
      var element = this.props.context.element;


      if (is(element, 'dmn:LiteralExpression')) {
        return element.$parent;
      } else {
        return element;
      }
    }

    /**
     * Add new value on ENTER.
     */

  }, {
    key: 'render',
    value: function render() {
      var element = this.props.context.element;
      var _state = this.state,
          inputValue = _state.inputValue,
          values = _state.values;


      return element.typeRef === 'string' ? createVNode(1, 'div', 'context-menu-container allowed-values-edit', [createVNode(1, 'hr', 'dms-hrule'), !isNull(values) && values.length > 0 && createComponentVNode(2, List, {
        'items': values,
        'onChange': this.onListChange
      }), !isNull(values) && !values.length && createVNode(1, 'div', null, [createVNode(1, 'h4', 'dms-heading', createTextVNode('Predefined Values'), 2), createVNode(1, 'span', 'placeholder', createTextVNode('No values'), 2)], 4), !isNull(values) && createVNode(1, 'p', 'dms-hint', createVNode(1, 'a', 'del-values', createTextVNode('Clear predefined values.'), 2, {
        'href': '#',
        'onClick': this.handleRemovePredifinedValuesClick
      }), 2), createVNode(1, 'h4', 'dms-heading', createTextVNode('Add Predefined Values'), 2), createComponentVNode(2, ValidatedInput, {
        'onInput': this.onInput,
        'onKeyDown': this.onKeyDown,
        'placeholder': '"value", "value", ...',
        'type': 'text',
        'validate': function validate(value) {
          if (!parseString(value)) {
            return 'Strings must be in double quotes.';
          }
        },
        'value': inputValue
      })], 0) : null;
    }
  }]);

  return AllowedValuesEditing;
}(Component);

// helpers //////////////////////

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.onElementsChanged = function () {
    _this2.forceUpdate();
  };

  this.setPredefinedValues = function (values) {

    // inputClause or outputClause
    var target = _this2.getAllowedValuesTarget();

    _this2.setState({
      values: values
    });

    _this2._modeling.editAllowedValues(target, values && getValuesArray(values));
  };

  this.onListChange = function (values) {
    _this2.setPredefinedValues(values);
  };

  this.onInput = function (_ref) {
    var isValid = _ref.isValid,
        value = _ref.value;

    _this2.setState({
      inputValue: value
    });
  };

  this.onKeyDown = function (_ref2) {
    var isValid = _ref2.isValid,
        event = _ref2.event;


    if (!isEnter(event.keyCode)) {
      return;
    }

    event.stopPropagation();
    event.preventDefault();

    if (isValid) {
      var _state2 = _this2.state,
          inputValue = _state2.inputValue,
          values = _state2.values;


      var parsedString = parseString(inputValue);

      _this2.onListChange((values || []).concat(parsedString.values.map(function (value) {
        return {
          value: value,
          isCheckable: false,
          isRemovable: true,
          group: 'Predefined Values'
        };
      })));

      _this2.setState({
        inputValue: ''
      });
    }
  };

  this.handleRemovePredifinedValuesClick = function (e) {
    e.stopPropagation();

    _this2.removePredefinedValues();
  };

  this.removePredefinedValues = function () {
    _this2.setPredefinedValues(null);
  };
};

export default AllowedValuesEditing;
function isEnter(keyCode) {
  return keyCode === 13;
}

function isNull(value) {
  return value === null;
}
//# sourceMappingURL=AllowedValuesEditing.js.map