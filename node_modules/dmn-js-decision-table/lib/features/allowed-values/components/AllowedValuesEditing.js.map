{"version":3,"sources":["../../../../src/features/allowed-values/components/AllowedValuesEditing.js"],"names":["Component","is","List","ValidatedInput","getValuesArray","parseString","AllowedValuesEditing","props","context","_modeling","injector","get","_changeSupport","changeSupport","target","getAllowedValuesTarget","parsedString","inputValues","text","outputValues","state","values","map","value","isCheckable","isRemovable","group","inputValue","onElementsChanged","id","offElementsChanged","element","$parent","typeRef","isNull","length","onListChange","handleRemovePredifinedValuesClick","onInput","onKeyDown","forceUpdate","setPredefinedValues","setState","editAllowedValues","isValid","event","isEnter","keyCode","stopPropagation","preventDefault","concat","e","removePredefinedValues"],"mappings":"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","file":"AllowedValuesEditing.js","sourcesContent":["import { Component } from 'inferno';\n\nimport { is } from 'dmn-js-shared/lib/util/ModelUtil';\n\nimport List from 'dmn-js-shared/lib/components/List';\n\nimport ValidatedInput from 'dmn-js-shared/lib/components/ValidatedInput';\n\nimport {\n  getValuesArray,\n  parseString\n} from '../Utils';\n\n\nexport default class AllowedValuesEditing extends Component {\n\n  constructor(props, context) {\n    super(props, context);\n\n    this._modeling = context.injector.get('modeling');\n    this._changeSupport = context.changeSupport;\n\n    const target = this.getAllowedValuesTarget();\n\n    const parsedString = parseString(\n      (target.inputValues && target.inputValues.text) ||\n      (target.outputValues && target.outputValues.text) ||\n      ''\n    );\n\n    if (parsedString) {\n      this.state = {\n        values: parsedString.values.map(value => {\n          return {\n            value,\n            isCheckable: false,\n            isRemovable: true,\n            group: 'Predefined Values'\n          };\n        }),\n        inputValue: ''\n      };\n    } else {\n      this.state = {\n        values: null,\n        inputValue: ''\n      };\n    }\n  }\n\n  onElementsChanged = () => {\n    this.forceUpdate();\n  }\n\n  componentWillMount() {\n    const target = this.getAllowedValuesTarget();\n\n    this._changeSupport.onElementsChanged(target.id, this.onElementsChanged);\n  }\n\n  componentWillUnmount() {\n    const target = this.getAllowedValuesTarget();\n\n    this._changeSupport.offElementsChanged(target.id, this.onElementsChanged);\n  }\n\n  setPredefinedValues = (values) => {\n\n    // inputClause or outputClause\n    const target = this.getAllowedValuesTarget();\n\n    this.setState({\n      values\n    });\n\n    this._modeling.editAllowedValues(\n      target,\n      values && getValuesArray(values)\n    );\n  }\n\n  onListChange = (values) => {\n    this.setPredefinedValues(values);\n  }\n\n  getAllowedValuesTarget() {\n    const { element } = this.props.context;\n\n    if (is(element, 'dmn:LiteralExpression')) {\n      return element.$parent;\n    } else {\n      return element;\n    }\n  }\n\n  onInput = ({ isValid, value }) => {\n    this.setState({\n      inputValue: value\n    });\n  }\n\n  /**\n   * Add new value on ENTER.\n   */\n  onKeyDown = ({ isValid, event }) => {\n\n    if (!isEnter(event.keyCode)) {\n      return;\n    }\n\n    event.stopPropagation();\n    event.preventDefault();\n\n    if (isValid) {\n      const {\n        inputValue,\n        values\n      } = this.state;\n\n      const parsedString = parseString(inputValue);\n\n      this.onListChange((values || []).concat(parsedString.values.map(value => {\n        return {\n          value,\n          isCheckable: false,\n          isRemovable: true,\n          group: 'Predefined Values'\n        };\n      })));\n\n      this.setState({\n        inputValue: ''\n      });\n\n    }\n  }\n\n  handleRemovePredifinedValuesClick = (e) => {\n    e.stopPropagation();\n\n    this.removePredefinedValues();\n  }\n\n  removePredefinedValues = () => {\n    this.setPredefinedValues(null);\n  }\n\n  render() {\n    const { element } = this.props.context;\n\n    const {\n      inputValue,\n      values\n    } = this.state;\n\n    return (\n      element.typeRef === 'string' ?\n        <div className=\"context-menu-container allowed-values-edit\">\n          <hr className=\"dms-hrule\" />\n          {\n            !isNull(values)\n              && values.length > 0\n              && <List\n                items={ values }\n                onChange={ this.onListChange } />\n          }\n\n          {\n            !isNull(values)\n              && !values.length\n              && <div>\n                <h4 className=\"dms-heading\">\n                  Predefined Values\n                </h4>\n                <span className=\"placeholder\">No values</span>\n              </div>\n          }\n\n          {\n            !isNull(values)\n              && <p class=\"dms-hint\">\n                <a href=\"#\" className=\"del-values\"\n                  onClick={ this.handleRemovePredifinedValuesClick }>\n                  Clear predefined values.\n                </a>\n              </p>\n          }\n\n          <h4 className=\"dms-heading\">\n            Add Predefined Values\n          </h4>\n\n          <ValidatedInput\n            onInput={ this.onInput }\n            onKeyDown={ this.onKeyDown }\n            placeholder={ '\"value\", \"value\", ...' }\n            type=\"text\"\n            validate={ value => {\n              if (!parseString(value)) {\n                return 'Strings must be in double quotes.';\n              }\n            } }\n            value={ inputValue } />\n\n        </div>\n        : null\n    );\n  }\n}\n\n\n// helpers //////////////////////\n\nfunction isEnter(keyCode) {\n  return keyCode === 13;\n}\n\nfunction isNull(value) {\n  return value === null;\n}"]}