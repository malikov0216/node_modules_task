function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';

import { is, isInput } from 'dmn-js-shared/lib/util/ModelUtil';

/**
 * Makes sure allowed values are removed if type is set to
 * something other than string.
 */

var AllowedValuesUpdateBehavior = function (_CommandInterceptor) {
  _inherits(AllowedValuesUpdateBehavior, _CommandInterceptor);

  function AllowedValuesUpdateBehavior(eventBus, modeling) {
    _classCallCheck(this, AllowedValuesUpdateBehavior);

    var _this = _possibleConstructorReturn(this, (AllowedValuesUpdateBehavior.__proto__ || Object.getPrototypeOf(AllowedValuesUpdateBehavior)).call(this, eventBus));

    _this.postExecuted('updateProperties', function (event) {
      var _event$context = event.context,
          element = _event$context.element,
          properties = _event$context.properties;


      var actualProperties = isInput(element) ? properties.inputExpression : properties;

      if (actualProperties && actualProperties.typeRef && actualProperties.typeRef !== 'string') {

        var target = is(element, 'dmn:LiteralExpression') ? element.$parent : element;

        // delete allowed values
        modeling.editAllowedValues(target, null);
      }
    });
    return _this;
  }

  return AllowedValuesUpdateBehavior;
}(CommandInterceptor);

export default AllowedValuesUpdateBehavior;


AllowedValuesUpdateBehavior.$inject = ['eventBus', 'modeling'];
//# sourceMappingURL=AllowedValuesUpdateBehavior.js.map