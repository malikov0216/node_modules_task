{"version":3,"sources":["../../../src/features/editor-actions/DecisionTableEditorActions.js"],"names":["is","DecisionTableEditorActions","copyCutPaste","editorActions","modeling","selection","cellSelection","sheet","actions","addRule","addRow","type","addRuleAbove","context","rule","hasSelection","get","row","root","getRoot","index","rows","indexOf","addRuleBelow","removeRule","removeRow","addInput","businessObject","input","addCol","length","addInputLeft","col","cols","addInputRight","removeInput","removeCol","addOutput","output","addOutputLeft","addOutputRight","removeOutput","addClause","clause","addClauseLeft","addClauseRight","removeClause","selectCellAbove","selectCell","selectCellBelow","copy","element","cut","pasteBefore","pasteAfter","register","$inject"],"mappings":"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","file":"DecisionTableEditorActions.js","sourcesContent":["import { is } from 'dmn-js-shared/lib/util/ModelUtil';\n\nexport default class DecisionTableEditorActions {\n\n  constructor(copyCutPaste, editorActions, modeling, selection, cellSelection, sheet) {\n    const actions = {\n      addRule() {\n        return modeling.addRow({ type: 'dmn:DecisionRule' });\n      },\n      addRuleAbove(context) {\n        let rule = context && context.rule;\n\n        if (!rule && !selection.hasSelection()) {\n          return;\n        }\n\n        rule = rule || selection.get().row;\n\n        const root = sheet.getRoot(),\n              index = root.rows.indexOf(rule);\n\n        if (index === -1) {\n          return;\n        }\n\n        return modeling.addRow({ type: 'dmn:DecisionRule' }, index);\n      },\n      addRuleBelow(context) {\n        let rule = context && context.rule;\n\n        if (!rule && !selection.hasSelection()) {\n          return;\n        }\n\n        rule = rule || selection.get().row;\n\n        const root = sheet.getRoot(),\n              index = root.rows.indexOf(rule);\n\n        if (index === -1) {\n          return;\n        }\n\n        return modeling.addRow({ type: 'dmn:DecisionRule' }, index + 1);\n      },\n      removeRule(context) {\n        let rule = context && context.rule;\n\n        if (!rule && !selection.hasSelection()) {\n          return;\n        }\n\n        rule = rule || selection.get().row;\n\n        modeling.removeRow(rule);\n      },\n      addInput() {\n        const root = sheet.getRoot(),\n              businessObject = root.businessObject;\n\n        const { input } = businessObject;\n\n        return modeling.addCol({\n          type: 'dmn:InputClause'\n        }, input ? input.length : 0);\n      },\n      addInputLeft(context) {\n        let input = context && context.input;\n\n        if (!input && !selection.hasSelection()) {\n          return;\n        }\n\n        input = input || selection.get().col;\n\n        const root = sheet.getRoot(),\n              index = root.cols.indexOf(input);\n\n        if (index === -1) {\n          return;\n        }\n\n        return modeling.addCol({ type: 'dmn:InputClause' }, index);\n      },\n      addInputRight(context) {\n        let input = context && context.input;\n\n        if (!input && !selection.hasSelection()) {\n          return;\n        }\n\n        input = input || selection.get().col;\n\n        const root = sheet.getRoot(),\n              index = root.cols.indexOf(input);\n\n        if (index === -1) {\n          return;\n        }\n\n        return modeling.addCol({ type: 'dmn:InputClause' }, index + 1);\n      },\n      removeInput(context) {\n        let input = context && context.input;\n\n        if (!input && !selection.hasSelection()) {\n          return;\n        }\n\n        input = input || selection.get().col;\n\n        modeling.removeCol(input);\n      },\n      addOutput() {\n        const root = sheet.getRoot(),\n              businessObject = root.businessObject;\n\n        const { input, output } = businessObject;\n\n        return modeling.addCol(\n          { type: 'dmn:OutputClause' },\n          input.length + output.length\n        );\n      },\n      addOutputLeft(context) {\n        let output = context && context.output;\n\n        if (!output && !selection.hasSelection()) {\n          return;\n        }\n\n        output = output || selection.get().col;\n\n        const root = sheet.getRoot(),\n              index = root.cols.indexOf(output);\n\n        if (index === -1) {\n          return;\n        }\n\n        return modeling.addCol({ type: 'dmn:OutputClause' }, index);\n      },\n      addOutputRight(context) {\n        let output = context && context.output;\n\n        if (!output && !selection.hasSelection()) {\n          return;\n        }\n\n        output = output || selection.get().col;\n\n        const root = sheet.getRoot(),\n              index = root.cols.indexOf(output);\n\n        if (index === -1) {\n          return;\n        }\n\n        return modeling.addCol({ type: 'dmn:OutputClause' }, index + 1);\n      },\n      removeOutput(context) {\n        let output = context && context.output;\n\n        if (!output && !selection.hasSelection()) {\n          return;\n        }\n\n        output = output || selection.get().col;\n\n        modeling.removeCol(output);\n      },\n      addClause() {\n        if (!selection.hasSelection()) {\n          return;\n        }\n\n        const clause = selection.get().col;\n\n        if (is(clause, 'dmn:InputClause')) {\n          return actions.addInput({ input: clause });\n        } else if (is(clause, 'dmn:OutputClause')) {\n          return actions.addOutput({ output: clause });\n        }\n      },\n      addClauseLeft() {\n        if (!selection.hasSelection()) {\n          return;\n        }\n\n        const clause = selection.get().col;\n\n        if (is(clause, 'dmn:InputClause')) {\n          return actions.addInputLeft({ input: clause });\n        } else if (is(clause, 'dmn:OutputClause')) {\n          return actions.addOutputLeft({ output: clause });\n        }\n      },\n      addClauseRight() {\n        if (!selection.hasSelection()) {\n          return;\n        }\n\n        const clause = selection.get().col;\n\n        if (is(clause, 'dmn:InputClause')) {\n          return actions.addInputRight({ input: clause });\n        } else if (is(clause, 'dmn:OutputClause')) {\n          return actions.addOutputRight({ output: clause });\n        }\n      },\n      removeClause() {\n        if (!selection.hasSelection()) {\n          return;\n        }\n\n        const clause = selection.get().col;\n\n        if (is(clause, 'dmn:InputClause')) {\n          return actions.removeInput({ input: clause });\n        } else if (is(clause, 'dmn:OutputClause')) {\n          return actions.removeOutput({ output: clause });\n        }\n      },\n      selectCellAbove() {\n        return cellSelection.selectCell('above');\n      },\n      selectCellBelow() {\n        return cellSelection.selectCell('below');\n      },\n      copy({ element }) {\n        copyCutPaste.copy(element);\n      },\n      cut({ element }) {\n        copyCutPaste.cut(element);\n      },\n      pasteBefore({ element }) {\n        return copyCutPaste.pasteBefore(element);\n      },\n      pasteAfter({ element }) {\n        return copyCutPaste.pasteAfter(element);\n      }\n    };\n\n    editorActions.register(actions);\n  }\n}\n\nDecisionTableEditorActions.$inject = [\n  'copyCutPaste',\n  'editorActions',\n  'modeling',\n  'selection',\n  'cellSelection',\n  'sheet'\n];"]}