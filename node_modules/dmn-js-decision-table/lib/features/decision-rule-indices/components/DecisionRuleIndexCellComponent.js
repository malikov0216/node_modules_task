var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode, createComponentVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

var DecisionRulesIndexCellComponent = function (_Component) {
  _inherits(DecisionRulesIndexCellComponent, _Component);

  function DecisionRulesIndexCellComponent() {
    _classCallCheck(this, DecisionRulesIndexCellComponent);

    return _possibleConstructorReturn(this, (DecisionRulesIndexCellComponent.__proto__ || Object.getPrototypeOf(DecisionRulesIndexCellComponent)).apply(this, arguments));
  }

  _createClass(DecisionRulesIndexCellComponent, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          row = _props.row,
          rowIndex = _props.rowIndex;
      var components = this.context.components;


      var innerComponents = components.getComponents('cell-inner', {
        cellType: 'rule-index',
        row: row,
        rowIndex: rowIndex
      });

      return createVNode(1, 'td', 'rule-index', [innerComponents && innerComponents.map(function (InnerComponent) {
        return createComponentVNode(2, InnerComponent, {
          'row': row,
          'rowIndex': rowIndex
        });
      }), rowIndex + 1], 0, {
        'data-row-id': row.id
      });
    }
  }]);

  return DecisionRulesIndexCellComponent;
}(Component);

export default DecisionRulesIndexCellComponent;
//# sourceMappingURL=DecisionRuleIndexCellComponent.js.map