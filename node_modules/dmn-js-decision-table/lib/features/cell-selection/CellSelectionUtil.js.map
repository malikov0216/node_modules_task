{"version":3,"sources":["../../../src/features/cell-selection/CellSelectionUtil.js"],"names":["closest","matches","query","cssEscape","setRange","getRange","SELECTABLE_SELECTOR","ELEMENT_SELECTOR","getElementId","node","getAttribute","getElementCoords","coordsAttr","split","row","col","getNodeByCoords","elementCoords","container","getNodeById","elementId","isUnselectableNode","findSelectableAncestor","getFocusableNode","el","selector","ensureFocus","focusEl","document","body","contains","activeElement","focus","range","end","start"],"mappings":";;AAAA,SACEA,OADF,EAEEC,OAFF,EAGEC,KAHF,QAIO,SAJP;;AAMA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,SACEC,QADF,EAEEC,QAFF,QAGO,kBAHP;;AAKA,OAAO,IAAMC,sBAAsB,mBAA5B;;AAEP,OAAO,IAAMC,mBAAmB,mBAAzB;;AAGP,OAAO,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AACjC,SAAOA,KAAKC,YAAL,CAAkB,iBAAlB,CAAP;AACD;;AAED,OAAO,SAASC,gBAAT,CAA0BF,IAA1B,EAAgC;AACrC,MAAMG,aAAaH,KAAKC,YAAL,CAAkB,aAAlB,CAAnB;;AAEA,MAAI,CAACE,UAAL,EAAiB;AACf,WAAO,IAAP;AACD;;AALoC,0BAOhBA,WAAWC,KAAX,CAAiB,GAAjB,CAPgB;AAAA;AAAA,MAO7BC,GAP6B;AAAA,MAOxBC,GAPwB;;AASrC,SAAO;AACLD,YADK;AAELC;AAFK,GAAP;AAID;;AAED,OAAO,SAASC,eAAT,CAAyBC,aAAzB,EAAwCC,SAAxC,EAAmD;AACxD,MAAMN,aAAgBK,cAAcH,GAA9B,SAAqCG,cAAcF,GAAzD;;AAEA,SAAOb,yBAAwBC,UAAUS,UAAV,CAAxB,SAAoDM,SAApD,CAAP;AACD;;AAED,OAAO,SAASC,WAAT,CAAqBC,SAArB,EAAgCF,SAAhC,EAA2C;AAChD,SAAOhB,6BAA4BC,UAAUiB,SAAV,CAA5B,SAAuDF,SAAvD,CAAP;AACD;;AAED,OAAO,SAASG,kBAAT,CAA4BZ,IAA5B,EAAkC;AACvC,SAAOT,QAAQS,IAAR,EAAc,cAAd,EAA8B,IAA9B,CAAP;AACD;;AAED;;;;;;;AAOA,OAAO,SAASa,sBAAT,CAAgCb,IAAhC,EAAsC;AAC3C,SAAOT,QAAQS,IAAR,EAAcF,gBAAd,EAAgC,IAAhC,CAAP;AACD;;AAED;;;;;;;AAOA,OAAO,SAASgB,gBAAT,CAA0BC,EAA1B,EAA8B;;AAEnC,MAAMC,WAAWnB,mBAAjB;;AAEA,SACEL,QAAQuB,EAAR,EAAYC,QAAZ,IACID,EADJ,GAEItB,MAAMuB,QAAN,EAAgBD,EAAhB,CAHN;AAKD;;AAED;;;;;AAKA,OAAO,SAASE,WAAT,CAAqBF,EAArB,EAAyB;;AAE9B,MAAMG,UAAUJ,iBAAiBC,EAAjB,CAAhB;;AAEA,MAAI,CAACG,OAAL,EAAc;AACZ;AACD;;AAED;AACA;AACA,MAAI,CAACC,SAASC,IAAT,CAAcC,QAAd,CAAuBH,OAAvB,CAAL,EAAsC;AACpC;AACD;;AAED;AACA,MAAIC,SAASG,aAAT,KAA2BJ,OAA/B,EAAwC;AACtC;AACD;;AAED;AACAA,UAAQK,KAAR;;AAEA;AACA,MAAMC,QAAQ5B,SAASsB,OAAT,CAAd;;AAEA,MAAI,CAACM,KAAD,IAAUA,MAAMC,GAAN,KAAc,CAA5B,EAA+B;AAC7B9B,aAASuB,OAAT,EAAkB,EAAEQ,OAAO,IAAT,EAAeD,KAAK,IAApB,EAAlB;AACD;AACF","file":"CellSelectionUtil.js","sourcesContent":["import {\n  closest,\n  matches,\n  query\n} from 'min-dom';\n\nimport cssEscape from 'css.escape';\n\nimport {\n  setRange,\n  getRange\n} from 'selection-ranges';\n\nexport const SELECTABLE_SELECTOR = '[contenteditable]';\n\nexport const ELEMENT_SELECTOR = '[data-element-id]';\n\n\nexport function getElementId(node) {\n  return node.getAttribute('data-element-id');\n}\n\nexport function getElementCoords(node) {\n  const coordsAttr = node.getAttribute('data-coords');\n\n  if (!coordsAttr) {\n    return null;\n  }\n\n  const [ row, col ] = coordsAttr.split(':');\n\n  return {\n    row,\n    col\n  };\n}\n\nexport function getNodeByCoords(elementCoords, container) {\n  const coordsAttr = `${elementCoords.row}:${elementCoords.col}`;\n\n  return query(`[data-coords=\"${ cssEscape(coordsAttr) }\"]`, container);\n}\n\nexport function getNodeById(elementId, container) {\n  return query(`[data-element-id=\"${ cssEscape(elementId) }\"]`, container);\n}\n\nexport function isUnselectableNode(node) {\n  return closest(node, '.no-deselect', true);\n}\n\n/**\n * Find semantically _selectable_ element in the nodes ancestors.\n *\n * @param {Element} node\n *\n * @return {Element} node\n */\nexport function findSelectableAncestor(node) {\n  return closest(node, ELEMENT_SELECTOR, true);\n}\n\n/**\n * Return focusable node in selectable el.\n *\n * @param  {Element} el\n *\n * @return {Element}\n */\nexport function getFocusableNode(el) {\n\n  const selector = SELECTABLE_SELECTOR;\n\n  return (\n    matches(el, selector)\n      ? el\n      : query(selector, el)\n  );\n}\n\n/**\n * Ensure element or element childNode has the proper focus.\n *\n * @param {Element} el\n */\nexport function ensureFocus(el) {\n\n  const focusEl = getFocusableNode(el);\n\n  if (!focusEl) {\n    return;\n  }\n\n  // QUIRK: otherwise range and focus related actions may\n  // yield errors in older browsers (PhantomJS / IE)\n  if (!document.body.contains(focusEl)) {\n    return;\n  }\n\n  // nothing to do, if element already has focus\n  if (document.activeElement === focusEl) {\n    return;\n  }\n\n  // (1) focus\n  focusEl.focus();\n\n  // (2) set cursor to element end\n  const range = getRange(focusEl);\n\n  if (!range || range.end === 0) {\n    setRange(focusEl, { start: 5000, end: 5000 });\n  }\n}"]}