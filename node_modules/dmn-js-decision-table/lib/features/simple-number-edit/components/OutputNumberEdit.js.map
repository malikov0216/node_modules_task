{"version":3,"sources":["../../../../src/features/simple-number-edit/components/OutputNumberEdit.js"],"names":["Component","Input","parseString","OutputNumberEdit","props","context","_modeling","injector","get","element","parsedString","businessObject","text","state","value","debounceInput","debouncedEditCell","editCell","bind","onInput","cell","setState"],"mappings":";;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,SAA1B;;AAEA,OAAOC,KAAP,MAAkB,oCAAlB;;AAEA,SAASC,WAAT,QAA4B,UAA5B;;IAGqBC,gB;;;AAEnB,4BAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,oIACpBD,KADoB,EACbC,OADa;;AAG1B,UAAKC,SAAL,GAAiBD,QAAQE,QAAR,CAAiBC,GAAjB,CAAqB,UAArB,CAAjB;;AAH0B,QAKlBC,OALkB,GAKN,MAAKL,KAAL,CAAWC,OALL,CAKlBI,OALkB;;;AAO1B,QAAMC,eAAeR,YAAYO,QAAQE,cAAR,CAAuBC,IAAnC,CAArB;;AAEA,QAAIF,YAAJ,EAAkB;AAChB,YAAKG,KAAL,GAAa;AACXC,eAAOJ,aAAaI;AADT,OAAb;AAGD,KAJD,MAIO;AACL,YAAKD,KAAL,GAAa;AACXC,eAAO;AADI,OAAb;AAGD;;AAED,QAAMC,gBAAgBV,QAAQE,QAAR,CAAiBC,GAAjB,CAAqB,eAArB,CAAtB;;AAEA,UAAKQ,iBAAL,GAAyBD,cAAc,MAAKE,QAAL,CAAcC,IAAd,OAAd,CAAzB;AACA,UAAKD,QAAL,GAAgB,MAAKA,QAAL,CAAcC,IAAd,OAAhB;;AAEA,UAAKC,OAAL,GAAe,MAAKA,OAAL,CAAaD,IAAb,OAAf;AAxB0B;AAyB3B;;;;6BAEQE,I,EAAMR,I,EAAM;AACnB,WAAKN,SAAL,CAAeW,QAAf,CAAwBG,IAAxB,EAA8BR,IAA9B;AACD;;;4BAEOE,K,EAAO;AAAA,UACLL,OADK,GACO,KAAKL,KAAL,CAAWC,OADlB,CACLI,OADK;;;AAGb,WAAKO,iBAAL,CAAuBP,QAAQE,cAA/B,EAA+CG,KAA/C;;AAEA,WAAKO,QAAL,CAAc;AACZP;AADY,OAAd;AAGD;;;6BAEQ;AAAA,UACCA,KADD,GACW,KAAKD,KADhB,CACCC,KADD;;;AAGP,mCACa,2CADb,wBAGc,aAHd,2DAKc,aALd;AAAA,mBAQgB,KAAKK,OARrB;AAAA,gBASW,QATX;AAAA,iBAUcL;AAVd;AAcD;;;;EA5D2Cd,S;;eAAzBG,gB","file":"OutputNumberEdit.js","sourcesContent":["import { Component } from 'inferno';\r\n\r\nimport Input from 'dmn-js-shared/lib/components/Input';\r\n\r\nimport { parseString } from '../Utils';\r\n\r\n\r\nexport default class OutputNumberEdit extends Component {\r\n\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this._modeling = context.injector.get('modeling');\r\n\r\n    const { element } = this.props.context;\r\n\r\n    const parsedString = parseString(element.businessObject.text);\r\n\r\n    if (parsedString) {\r\n      this.state = {\r\n        value: parsedString.value\r\n      };\r\n    } else {\r\n      this.state = {\r\n        value: ''\r\n      };\r\n    }\r\n\r\n    const debounceInput = context.injector.get('debounceInput');\r\n\r\n    this.debouncedEditCell = debounceInput(this.editCell.bind(this));\r\n    this.editCell = this.editCell.bind(this);\r\n\r\n    this.onInput = this.onInput.bind(this);\r\n  }\r\n\r\n  editCell(cell, text) {\r\n    this._modeling.editCell(cell, text);\r\n  }\r\n\r\n  onInput(value) {\r\n    const { element } = this.props.context;\r\n\r\n    this.debouncedEditCell(element.businessObject, value);\r\n\r\n    this.setState({\r\n      value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { value } = this.state;\r\n\r\n    return (\r\n      <div class=\"context-menu-container simple-number-edit\">\r\n\r\n        <h3 class=\"dms-heading\">Edit Number</h3>\r\n\r\n        <h4 class=\"dms-heading\">Set Value</h4>\r\n\r\n        <Input\r\n          onInput={ this.onInput }\r\n          type=\"number\"\r\n          value={ value } />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}"]}