{"version":3,"sources":["../../../../src/features/simple-number-edit/components/InputNumberEdit.js"],"names":["Component","Input","InputSelect","getComparisonString","getRangeString","parseString","COMPARISON","RANGE","InputNumberEdit","props","context","_modeling","injector","get","element","parsedString","businessObject","text","state","type","comparisonOperator","operator","comparisonValue","value","rangeStartValue","values","rangeEndValue","rangeStartType","start","rangeEndType","end","debounceInput","debouncedEditCell","editCell","bind","onComparisonOperatorChange","onComparisonValueChange","onTypeChange","onRangeStartTypeChange","onRangeStartValueChange","onRangeEndTypeChange","onRangeEndValueChange","cell","setState","comparisonOperatorOptions","label","rangeTypeOptions","typeOptions","renderComparison","renderRange"],"mappings":"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","file":"InputNumberEdit.js","sourcesContent":["import { Component } from 'inferno';\r\n\r\nimport Input from 'dmn-js-shared/lib/components/Input';\r\nimport InputSelect from 'dmn-js-shared/lib/components/InputSelect';\r\n\r\nimport {\r\n  getComparisonString,\r\n  getRangeString,\r\n  parseString\r\n} from '../Utils';\r\n\r\nconst COMPARISON = 'comparison',\r\n      RANGE = 'range';\r\n\r\n\r\nexport default class InputNumberEdit extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this._modeling = context.injector.get('modeling');\r\n\r\n    const { element } = this.props.context;\r\n\r\n    const parsedString = parseString(element.businessObject.text);\r\n\r\n    if (parsedString) {\r\n      this.state = {\r\n        type: parsedString.type,\r\n        comparisonOperator: parsedString.operator || 'equals',\r\n        comparisonValue: parsedString.value || 0,\r\n        rangeStartValue: parsedString.values ? parsedString.values[0] : 0,\r\n        rangeEndValue: parsedString.values ? parsedString.values[1] : 0,\r\n        rangeStartType: parsedString.start || 'include',\r\n        rangeEndType: parsedString.end || 'include'\r\n      };\r\n    } else {\r\n      this.state = {\r\n        type: COMPARISON,\r\n        comparisonOperator: 'equals',\r\n        comparisonValue: 0,\r\n        rangeStartValue: 0,\r\n        rangeEndValue: 0,\r\n        rangeStartType: 'include',\r\n        rangeEndType: 'include'\r\n      };\r\n    }\r\n\r\n    const debounceInput = context.injector.get('debounceInput');\r\n\r\n    this.debouncedEditCell = debounceInput(this.editCell.bind(this));\r\n    this.editCell = this.editCell.bind(this);\r\n\r\n    this.onComparisonOperatorChange = this.onComparisonOperatorChange.bind(this);\r\n    this.onComparisonValueChange = this.onComparisonValueChange.bind(this);\r\n    this.onTypeChange = this.onTypeChange.bind(this);\r\n    this.onRangeStartTypeChange = this.onRangeStartTypeChange.bind(this);\r\n    this.onRangeStartValueChange = this.onRangeStartValueChange.bind(this);\r\n    this.onRangeEndTypeChange = this.onRangeEndTypeChange.bind(this);\r\n    this.onRangeEndValueChange = this.onRangeEndValueChange.bind(this);\r\n  }\r\n\r\n  editCell(cell, text) {\r\n    this._modeling.editCell(cell, text);\r\n  }\r\n\r\n  onTypeChange(value) {\r\n    const { element } = this.props.context;\r\n\r\n    const {\r\n      comparisonOperator,\r\n      comparisonValue,\r\n      rangeStartValue,\r\n      rangeEndValue,\r\n      rangeStartType,\r\n      rangeEndType\r\n    } = this.state;\r\n\r\n    if (value === COMPARISON) {\r\n      this.editCell(\r\n        element.businessObject,\r\n        getComparisonString(comparisonOperator, comparisonValue)\r\n      );\r\n    } else {\r\n      this.editCell(\r\n        element.businessObject,\r\n        getRangeString(rangeStartValue, rangeEndValue, rangeStartType, rangeEndType)\r\n      );\r\n    }\r\n\r\n    this.setState({\r\n      type: value\r\n    });\r\n  }\r\n\r\n  onComparisonOperatorChange(value) {\r\n    const { element } = this.props.context;\r\n\r\n    const { type, comparisonValue } = this.state;\r\n\r\n    if (type === COMPARISON) {\r\n      this.editCell(element.businessObject, getComparisonString(value, comparisonValue));\r\n\r\n      this.setState({\r\n        comparisonOperator: value\r\n      });\r\n    }\r\n  }\r\n\r\n  onComparisonValueChange(comparisonValue) {\r\n    const { element } = this.props.context;\r\n\r\n    const { type, comparisonOperator } = this.state;\r\n\r\n    if (type === COMPARISON) {\r\n      this.debouncedEditCell(\r\n        element.businessObject,\r\n        getComparisonString(comparisonOperator, comparisonValue)\r\n      );\r\n\r\n      this.setState({\r\n        comparisonValue\r\n      });\r\n    }\r\n  }\r\n\r\n  onRangeStartTypeChange(value) {\r\n    const { element } = this.props.context;\r\n\r\n    const { type, rangeStartValue, rangeEndValue, rangeEndType } = this.state;\r\n\r\n    if (type === RANGE) {\r\n      this.editCell(\r\n        element.businessObject,\r\n        getRangeString(rangeStartValue, rangeEndValue, value, rangeEndType)\r\n      );\r\n\r\n      this.setState({\r\n        rangeStartType: value\r\n      });\r\n    }\r\n  }\r\n\r\n  onRangeStartValueChange(value) {\r\n    const { element } = this.props.context;\r\n\r\n    const { type, rangeEndValue, rangeStartType, rangeEndType } = this.state;\r\n\r\n    if (type === RANGE) {\r\n      this.editCell(\r\n        element.businessObject,\r\n        getRangeString(value, rangeEndValue, rangeStartType, rangeEndType)\r\n      );\r\n\r\n      this.setState({\r\n        rangeStartValue: value\r\n      });\r\n    }\r\n  }\r\n\r\n  onRangeEndTypeChange(value) {\r\n    const { element } = this.props.context;\r\n\r\n    const { type, rangeStartValue, rangeEndValue, rangeStartType } = this.state;\r\n\r\n    if (type === RANGE) {\r\n      this.editCell(\r\n        element.businessObject,\r\n        getRangeString(rangeStartValue, rangeEndValue, rangeStartType, value)\r\n      );\r\n\r\n      this.setState({\r\n        rangeEndType: value\r\n      });\r\n    }\r\n  }\r\n\r\n  onRangeEndValueChange(value) {\r\n    const { element } = this.props.context;\r\n\r\n    const { type, rangeStartValue, rangeStartType, rangeEndType } = this.state;\r\n\r\n    if (type === RANGE) {\r\n      this.editCell(\r\n        element.businessObject,\r\n        getRangeString(rangeStartValue, value, rangeStartType, rangeEndType)\r\n      );\r\n\r\n      this.setState({\r\n        rangeEndValue: value\r\n      });\r\n    }\r\n  }\r\n\r\n  renderComparison(comparisonOperator, comparisonValue) {\r\n    const comparisonOperatorOptions = [{\r\n      label: 'Equals',\r\n      value: 'equals'\r\n    }, {\r\n      label: 'Less',\r\n      value: 'less'\r\n    }, {\r\n      label: 'Less or equals',\r\n      value: 'lessEquals'\r\n    }, {\r\n      label: 'Greater',\r\n      value: 'greater'\r\n    }, {\r\n      label: 'Greater or equals',\r\n      value: 'greaterEquals'\r\n    }];\r\n\r\n    return (\r\n      <div className=\"comparison\">\r\n\r\n        <h4 className=\"dms-heading\">Value</h4>\r\n\r\n        <div className=\"dms-fill-row\">\r\n          <InputSelect\r\n            noInput={ true }\r\n            onChange={ this.onComparisonOperatorChange }\r\n            options={ comparisonOperatorOptions }\r\n            value={ comparisonOperator } />\r\n\r\n          &nbsp;\r\n\r\n          <Input\r\n            className=\"comparison-number-input\"\r\n            onInput={ this.onComparisonValueChange }\r\n            type=\"number\"\r\n            value={ comparisonValue } />\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderRange(rangeStartValue, rangeEndValue, rangeStartType, rangeEndType) {\r\n    const rangeTypeOptions = [{\r\n      label: 'Include',\r\n      value: 'include'\r\n    }, {\r\n      label: 'Exclude',\r\n      value: 'exclude'\r\n    }];\r\n\r\n    return (\r\n      <div className=\"range\">\r\n        <h4 className=\"dms-heading\">Start Value</h4>\r\n\r\n        <div className=\"dms-fill-row\">\r\n          <InputSelect\r\n            noInput={ true }\r\n            onChange={ this.onRangeStartTypeChange }\r\n            options={ rangeTypeOptions }\r\n            value={ rangeStartType } />\r\n\r\n          &nbsp;\r\n\r\n          <Input\r\n            className=\"range-start-number-input\"\r\n            onInput={ this.onRangeStartValueChange }\r\n            type=\"number\"\r\n            value={ rangeStartValue } />\r\n        </div>\r\n\r\n        <h4 className=\"dms-heading\">\r\n          End Value\r\n        </h4>\r\n\r\n        <div className=\"dms-fill-row\">\r\n          <InputSelect\r\n            noInput={ true }\r\n            onChange={ this.onRangeEndTypeChange }\r\n            options={ rangeTypeOptions }\r\n            value={ rangeEndType } />\r\n\r\n          &nbsp;\r\n\r\n          <Input\r\n            className=\"range-end-number-input\"\r\n            onInput={ this.onRangeEndValueChange }\r\n            type=\"number\"\r\n            value={ rangeEndValue } />\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      type,\r\n      comparisonOperator,\r\n      comparisonValue,\r\n      rangeStartValue,\r\n      rangeEndValue,\r\n      rangeStartType,\r\n      rangeEndType\r\n    } = this.state;\r\n\r\n    const typeOptions = [{\r\n      label: 'Comparison',\r\n      value: COMPARISON\r\n    }, {\r\n      label: 'Range',\r\n      value: RANGE\r\n    }];\r\n\r\n    return (\r\n      <div class=\"context-menu-container simple-number-edit\">\r\n\r\n        <h3 class=\"dms-heading\">Edit Number</h3>\r\n\r\n        <div className=\"dms-fill-row\">\r\n          <InputSelect\r\n            noInput={ true }\r\n            onChange={ this.onTypeChange }\r\n            options={ typeOptions }\r\n            value={ type } />\r\n        </div>\r\n\r\n        {\r\n          type === COMPARISON\r\n            && this.renderComparison(comparisonOperator, comparisonValue)\r\n        }\r\n\r\n        {\r\n          type === RANGE\r\n            && this.renderRange(\r\n              rangeStartValue,\r\n              rangeEndValue,\r\n              rangeStartType,\r\n              rangeEndType\r\n            )\r\n        }\r\n\r\n      </div>\r\n    );\r\n  }\r\n}"]}