var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode, createTextVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

var AddInput = function (_Component) {
  _inherits(AddInput, _Component);

  function AddInput(props, context) {
    _classCallCheck(this, AddInput);

    var _this = _possibleConstructorReturn(this, (AddInput.__proto__ || Object.getPrototypeOf(AddInput)).call(this, props, context));

    _this.onElementsChanged = function () {
      _this.forceUpdate();
    };

    _this.handleClick = function (e) {
      e.stopPropagation();

      _this.add();
    };

    _this.add = function () {
      _this._eventBus.fire('addInput');
    };

    _this._sheet = context.injector.get('sheet');
    _this._eventBus = context.injector.get('eventBus');

    _this._changeSupport = context.changeSupport;
    return _this;
  }

  _createClass(AddInput, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var root = this.getRoot();

      this._changeSupport.onElementsChanged(root.id, this.onElementsChanged);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var root = this.getRoot();

      this._changeSupport.offElementsChanged(root.id, this.onElementsChanged);
    }
  }, {
    key: 'getRoot',
    value: function getRoot() {
      return this._sheet.getRoot();
    }
  }, {
    key: 'render',
    value: function render() {
      var _getRoot = this.getRoot(),
          businessObject = _getRoot.businessObject;

      var inputs = businessObject.input;

      if (!inputs || !inputs.length) {
        return null;
      }

      var colspan = inputs.length;

      return createVNode(1, 'th', 'input-cell inputs-label actionable add-input header', [createTextVNode('Input '), createVNode(1, 'span', 'add-input dmn-icon-plus action-icon', null, 1, {
        'title': 'Add Input'
      })], 4, {
        'onClick': this.handleClick,
        'colspan': colspan
      });
    }
  }]);

  return AddInput;
}(Component);

export default AddInput;
//# sourceMappingURL=AddInput.js.map