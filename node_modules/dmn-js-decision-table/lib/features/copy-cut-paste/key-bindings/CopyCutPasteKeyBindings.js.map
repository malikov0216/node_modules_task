{"version":3,"sources":["../../../../src/features/copy-cut-paste/key-bindings/CopyCutPasteKeyBindings.js"],"names":["getRange","event","domEvent","getFocusableNode","getNodeById","isCmd","isShift","CopyPasteKeyBindings","injector","eventBus","clipboard","cellSelection","elementRegistry","editorActions","renderer","_clearClipboard","_clipboard","clear","_registerBindings","copy","key","modifiers","cell","_getSelectedCell","_editorActions","trigger","element","col","row","cut","paste","pasted","_cellSelection","selectCell","forEach","l","_keyboard","addListener","_elementRegistry","get","_renderer","on","bind","document","unbind","elementId","getCellSelection","container","getContainer","node","focusableNode","activeElement","range","start","end","$inject"],"mappings":"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","file":"CopyCutPasteKeyBindings.js","sourcesContent":["import {\n  getRange\n} from 'selection-ranges';\n\nimport {\n  event as domEvent\n} from 'min-dom';\n\nimport {\n  getFocusableNode,\n  getNodeById\n} from '../../cell-selection/CellSelectionUtil';\n\nimport {\n  isCmd,\n  isShift\n} from '../../keyboard/KeyboardUtil';\n\n\n/**\n * Keybindings for Copy + Paste\n */\nexport default class CopyPasteKeyBindings {\n\n  constructor(\n      injector, eventBus, clipboard,\n      cellSelection, elementRegistry, editorActions,\n      renderer) {\n\n    this._clipboard = clipboard;\n    this._cellSelection = cellSelection;\n    this._elementRegistry = elementRegistry;\n    this._editorActions = editorActions;\n    this._keyboard = injector.get('keyboard', false);\n    this._renderer = renderer;\n\n    if (!this._keyboard) {\n      return;\n    }\n\n    eventBus.on('keyboard.init', this._registerBindings);\n\n    eventBus.on('keyboard.bind', () => {\n      domEvent.bind(document, 'copy', this._clearClipboard, true);\n      domEvent.bind(document, 'cut', this._clearClipboard, true);\n    });\n\n    eventBus.on('keyboard.unbind', () => {\n      domEvent.unbind(document, 'copy', this._clearClipboard, true);\n      domEvent.unbind(document, 'cut', this._clearClipboard, true);\n    });\n  }\n\n  _clearClipboard = () => {\n    this._clipboard.clear();\n  }\n\n  /**\n   * Return the selected cell within the decision table.\n   *\n   * This verifies that a cell ready for copy-or-paste is\n   * actual selected by the user, in the Browser UI.\n   *\n   * @return {Cell}\n   */\n  _getSelectedCell() {\n\n    const elementId = this._cellSelection.getCellSelection();\n\n    // we may have no selection\n    if (!elementId) {\n      return;\n    }\n\n    const cell = this._elementRegistry.get(elementId);\n\n    // selection may not be a cell\n    if (!cell) {\n      return;\n    }\n\n    const container = this._renderer.getContainer();\n\n    const node = getNodeById(elementId, container);\n\n    const focusableNode = getFocusableNode(node);\n\n    // focusable element in selection may not be actual\n    // browser focus, i.e. when a menu is open\n    if (document.activeElement !== focusableNode) {\n      return;\n    }\n\n    const range = getRange(node);\n\n    // user may attempt native copy-paste operation right now\n    // don't interfere with normal text copying\n    if (range && (range.start !== range.end)) {\n      return;\n    }\n\n    return cell;\n  }\n\n\n  _registerBindings = () => {\n\n    // copy\n    // CTRL/CMD + C\n    const copy = (key, modifiers) => {\n\n      if (isCmd(modifiers) && (key === 67)) {\n        const cell = this._getSelectedCell();\n\n        if (!cell) {\n          return;\n        }\n\n        if (isShift(modifiers)) {\n          this._editorActions.trigger('copy', {\n            element: cell.col\n          });\n        } else {\n          this._editorActions.trigger('copy', {\n            element: cell.row\n          });\n        }\n\n        return true;\n      }\n    };\n\n    // cut\n    // CTRL/CMD + X\n    const cut = (key, modifiers) => {\n\n      if (isCmd(modifiers) && (key === 88)) {\n\n        const cell = this._getSelectedCell();\n\n        if (!cell) {\n          return;\n        }\n\n        if (isShift(modifiers)) {\n          this._editorActions.trigger('cut', {\n            element: cell.col\n          });\n        } else {\n          this._editorActions.trigger('cut', {\n            element: cell.row\n          });\n        }\n\n        return true;\n      }\n    };\n\n    // paste\n    // CTRL/CMD + V\n    const paste = (key, modifiers) => {\n\n      let pasted;\n\n      if (isCmd(modifiers) && (key === 86)) {\n\n        const cell = this._getSelectedCell();\n\n        if (!cell) {\n          return;\n        }\n\n        if (isShift(modifiers)) {\n          pasted = this._editorActions.trigger('pasteAfter', {\n            element: cell.col\n          });\n\n          if (pasted) {\n            this._cellSelection.selectCell('right');\n          }\n        } else {\n          pasted = this._editorActions.trigger('pasteAfter', {\n            element: cell.row\n          });\n\n          if (pasted) {\n            this._cellSelection.selectCell('below');\n          }\n        }\n      }\n\n      // indicate, whether we could paste\n      return typeof pasted !== 'undefined';\n    };\n\n    // register listeners\n    [ copy, cut, paste ].forEach((l) => {\n      this._keyboard.addListener(l);\n    });\n  }\n\n}\n\n\nCopyPasteKeyBindings.$inject = [\n  'injector',\n  'eventBus',\n  'clipboard',\n  'cellSelection',\n  'elementRegistry',\n  'editorActions',\n  'renderer'\n];"]}