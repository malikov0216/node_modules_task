{"version":3,"sources":["../../../src/features/copy-cut-paste/DescriptorUtil.js"],"names":["isArray","forEach","keys","reduce","createHooks","copyTableProperties","copyBusinessObjectProperties","reviveHooks","reviveBusinessObject","reviveTableElement","createDescriptor","element","cache","hooks","createDescriptors0","createDescriptor0","elements","result","currentCache","descriptorCache","currentDescriptors","root","id","descriptor","existingDescriptor","element0","evaluateHooks","create","hook","Row","Col","Cell","newDesc","type","getType","cells0","cells","businessObject","bo0","createBoDescriptor","Error","bo","boCache","existingBoDesc","$type","$descriptor","properties","property","value","name","map","value0","b","reviveDescriptor","entry","reviveCache","reviveDescriptors0","reviveDescriptor0","descriptors","existingElement","evaluateReviveHooks","revive","createCache","elementAttrs","Constructor","getConstructor","newElement","cell","row","col","createBo","boDescriptor","existingBo","newBoAttrs","val","val0","key","_keepIds","_model","ids","assigned","newBo","_dmnFactory","newBoAttr","$parent","a"],"mappings":"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","file":"DescriptorUtil.js","sourcesContent":["import {\n  isArray,\n  forEach,\n  keys,\n  reduce\n} from 'min-dash';\n\n// creating descriptors //////////\n\nconst createHooks = [\n  copyTableProperties,\n  copyBusinessObjectProperties\n];\n\nconst reviveHooks = [\n  reviveBusinessObject,\n  reviveTableElement\n];\n\n/**\n * Return a serializable snapshot of the given elements.\n *\n * @param {Array<Base>} elements list of table elements\n *\n * @return {Tree} descriptor tree\n */\nexport function createDescriptor(element, cache, hooks) {\n\n  hooks = hooks || createHooks;\n  cache = cache || {};\n\n  if (isArray(element)) {\n    return createDescriptors0(element, cache, hooks);\n  } else {\n    return createDescriptor0(element, cache, hooks);\n  }\n\n}\n\n\n/**\n * Create descriptors of elements, returning { descriptors: [], descriptorCache }.\n *\n * @param {Array<Base>} elements list of table elements\n * @param {Object} cache the create cache\n *\n * @return {Object} new descriptors + updated cache\n */\nfunction createDescriptors0(elements, cache, hooks) {\n\n  return reduce(elements, (result, element) => {\n\n    var currentCache = result.descriptorCache,\n        currentDescriptors = result.root;\n\n    let {\n      root,\n      descriptorCache\n    } = createDescriptor0(element, currentCache, hooks);\n\n    return {\n      root: [\n        ...currentDescriptors,\n        root\n      ],\n      descriptorCache: {\n        ...currentCache,\n        ...descriptorCache\n      }\n    };\n  }, {\n    root: [],\n    descriptorCache: cache\n  });\n}\n\nfunction createDescriptor0(element, cache, hooks) {\n\n  var id = element.id;\n\n  var descriptor = {\n    id: id\n  };\n\n  var elements = cache.elements || {};\n\n  var existingDescriptor = elements[id];\n\n  // element already created; nothing to do\n  if (existingDescriptor) {\n    return {\n      root: existingDescriptor,\n      descriptorCache: cache\n    };\n  }\n\n  // we're new; need to initialize element via hooks\n  // we assume we're not handling recursive data structures\n  // here. Otherwise we'd need to pre-populate the cache\n  // with the given element\n  let element0 = evaluateHooks(element, descriptor, hooks, {\n    ...cache,\n    elements\n  });\n\n  return {\n    root: element0.root,\n    descriptorCache: {\n      ...element0.descriptorCache,\n      elements: {\n        ...element0.descriptorCache.elements,\n        [id]: element0.root\n      }\n    }\n  };\n}\n\n\nfunction evaluateHooks(element, descriptor, hooks, cache) {\n\n  function create(element, descriptorCache) {\n    return createDescriptor(element, descriptorCache, hooks);\n  }\n\n  return reduce(hooks, function(result, hook) {\n    return hook(\n      element,\n      result.root,\n      result.descriptorCache,\n      create\n    );\n  }, {\n    root: descriptor,\n    descriptorCache: cache\n  });\n}\n\n\nimport {\n  Row,\n  Col,\n  Cell\n} from 'table-js/lib/model';\n\n\nfunction copyTableProperties(element, descriptor, cache, create) {\n\n  var descriptorCache = cache;\n\n  var newDesc = {\n    ...descriptor,\n    type: getType(element)\n  };\n\n  if (\n    element instanceof Row ||\n    element instanceof Col\n  ) {\n    let cells0 = create(element.cells, descriptorCache);\n\n    newDesc.cells = cells0.root;\n    descriptorCache = cells0.descriptorCache;\n  }\n\n  return {\n    root: newDesc,\n    descriptorCache\n  };\n}\n\n\nfunction copyBusinessObjectProperties(element, descriptor, cache) {\n\n  var businessObject = element.businessObject;\n\n  if (!businessObject) {\n    return {\n      root: descriptor,\n      descriptorCache: cache\n    };\n  }\n\n  // need to clone businessObject\n  var bo0 = createBoDescriptor(businessObject, cache);\n\n  return {\n    root: {\n      ...descriptor,\n      businessObject: bo0.root\n    },\n    descriptorCache: bo0.descriptorCache\n  };\n}\n\n\nfunction getType(element) {\n\n  if (element instanceof Row) {\n    return 'row';\n  }\n\n  if (element instanceof Col) {\n    return 'col';\n  }\n\n  if (element instanceof Cell) {\n    return 'cell';\n  }\n\n  throw new Error('cannot deduce element type: #' + element.id);\n}\n\n\nfunction createBoDescriptor(bo, cache) {\n  var boCache,\n      existingBoDesc;\n\n  var id = bo.id;\n\n  if (id) {\n    boCache = cache.boCache || {};\n\n    existingBoDesc = boCache[id];\n\n    // businessObject already created; nothing to do\n    if (existingBoDesc) {\n      return {\n        root: existingBoDesc,\n        descriptorCache: cache\n      };\n    }\n  }\n\n  var descriptor = {\n    $type: bo.$type\n  };\n\n  if (id) {\n    descriptor.id = id;\n\n    boCache = {\n      ...boCache,\n      [id]: descriptor\n    };\n\n    cache = {\n      ...cache,\n      boCache\n    };\n  }\n\n  // TODO(nikku): distinguish relations and containment\n  // Need to build up the whole tree and revive relations afterwards\n\n  // ITERATE OVER ALL SET PROPERTIES\n  // (Object.keys(bo) or via bo.$descriptor....)\n\n  bo.$descriptor.properties.forEach(function(property) {\n    var value = bo[property.name];\n\n    // const propertyDescriptor = bo.$model.getPropertyDescriptor(bo, property.name),\n    //       isId = propertyDescriptor.isId,\n    //       isReference = propertyDescriptor.isReference;\n\n    // not set\n    if (!value) {\n      return;\n    }\n\n    // arrays of moddle elements\n    if (isArray(value)) {\n      value = value.map(b => {\n        var value0 = createBoDescriptor(b, cache);\n\n        cache = value0.descriptorCache;\n\n        return value0.root;\n      });\n    }\n\n    // moddle elements\n    if (value.$type) {\n      let value0 = createBoDescriptor(value, cache);\n\n      cache = value0.descriptorCache;\n      value = value0.root;\n    }\n\n    // other values\n    descriptor[property.name] = value;\n  });\n\n  return {\n    root: descriptor,\n    descriptorCache: cache\n  };\n}\n\n\n\n// reviving //////////\n\nexport function reviveDescriptor(entry, reviveCache, hooks) {\n\n  hooks = hooks || reviveHooks;\n  reviveCache = reviveCache || {};\n\n  if (isArray(entry.root)) {\n    return reviveDescriptors0(entry, reviveCache, hooks);\n  } else {\n    return reviveDescriptor0(entry, reviveCache, hooks);\n  }\n}\n\n\n/**\n * TBD: document this!\n *\n * @param  {[type]} entry       [description]\n * @param  {[type]} reviveCache [description]\n * @param  {[type]} hooks       [description]\n * @return {[type]}             [description]\n */\nfunction reviveDescriptors0(entry, reviveCache, hooks) {\n\n  let descriptors = entry.root;\n  let descriptorCache = entry.descriptorCache;\n\n  return reduce(descriptors, (result, element) => {\n\n    var currentCache = result.reviveCache,\n        currentDescriptors = result.root;\n\n    let {\n      root,\n      reviveCache\n    } = reviveDescriptor0({ root: element, descriptorCache }, currentCache, hooks);\n\n    return {\n      root: [\n        ...currentDescriptors,\n        root\n      ],\n      reviveCache\n    };\n  }, {\n    root: [],\n    reviveCache\n  });\n}\n\n/**\n * TBD: document this!\n *\n * @param  {[type]} entry [description]\n * @param  {[type]} cache [description]\n * @param  {[type]} hooks [description]\n * @return {[type]}       [description]\n */\nfunction reviveDescriptor0(entry, reviveCache, hooks) {\n\n  var descriptor = entry.root;\n\n  var id = descriptor.id;\n\n  var elements = reviveCache.elements || {};\n\n  var existingElement = elements[id];\n\n  // element already created; nothing to do\n  if (existingElement) {\n    return {\n      root: existingElement,\n      reviveCache: reviveCache\n    };\n  }\n\n  // start with a fake element; haha <3\n  var element = {\n    id: id\n  };\n\n  // we're new; need to initialize element via hooks\n  let element0 = evaluateReviveHooks(entry, element, hooks, {\n    ...reviveCache,\n    elements\n  });\n\n  return {\n    root: element0.root,\n    reviveCache: {\n      ...element0.reviveCache,\n      elements: {\n        ...element0.reviveCache.elements,\n        [id]: element0.root\n      }\n    }\n  };\n}\n\n// entry = { root, descriptorCache }\n// element = { id: foo }\n// hooks = [ ... ]\n// reviveCache = { ... }\nfunction evaluateReviveHooks(entry, element, hooks, reviveCache) {\n\n  function revive(entry, reviveCache) {\n    return reviveDescriptor(entry, reviveCache, hooks);\n  }\n\n  return reduce(hooks, function(result, hook) {\n    return hook(\n      entry,\n      result.root,\n      result.reviveCache,\n      revive\n    );\n  }, {\n    root: element,\n    reviveCache: reviveCache\n  });\n}\n\n\nfunction reviveTableElement(entry, element, reviveCache, revive) {\n  var descriptor = entry.root;\n  var createCache = entry.descriptorCache;\n\n  var elementAttrs = {\n    ...element\n  };\n\n  // make sure table element ID is same as moddle element ID\n  if (element.businessObject && element.businessObject.id) {\n    elementAttrs.id = element.businessObject.id;\n  }\n\n  if (\n    descriptor.type === 'row' ||\n    descriptor.type === 'col'\n  ) {\n    let cells0 = revive({\n      root: descriptor.cells,\n      descriptorCache: createCache\n    }, reviveCache);\n\n    elementAttrs.cells = cells0.root;\n    reviveCache = cells0.reviveCache;\n  }\n\n  var Constructor = getConstructor(descriptor);\n\n  var newElement = new Constructor(elementAttrs);\n\n  // set parent row or col\n  if (newElement instanceof Row) {\n    newElement.cells.forEach(cell => {\n      cell.row = newElement;\n    });\n  } else if (newElement instanceof Col) {\n    newElement.cells.forEach(cell => {\n      cell.col = newElement;\n    });\n  }\n\n  return {\n    root: newElement,\n    reviveCache\n  };\n}\n\n\nfunction reviveBusinessObject(entry, element, reviveCache) {\n  var businessObject = entry.root.businessObject;\n\n  if (!businessObject) {\n    return {\n      root: element,\n      reviveCache\n    };\n  }\n\n  // need to clone businessObject\n  var bo0 = createBo({\n    root: businessObject,\n    descriptorCache: entry.descriptorCache\n  }, reviveCache);\n\n  return {\n    root: {\n      ...element,\n      businessObject: bo0.root\n    },\n    reviveCache: bo0.reviveCache\n  };\n}\n\n\nfunction getConstructor(descriptor) {\n\n  switch (descriptor.type) {\n  case 'row':\n    return Row;\n  case 'cell':\n    return Cell;\n  case 'col':\n    return Col;\n  default:\n    throw new Error('unknown element type: #' + descriptor.type);\n  }\n}\n\n\nfunction createBo(entry, reviveCache) {\n  var boDescriptor = entry.root;\n\n  var id = boDescriptor.id;\n\n  let boCache,\n      existingBo;\n\n  if (id) {\n    boCache = reviveCache.boCache || {};\n\n    existingBo = boCache[id];\n\n    // businessObject already created; nothing to do\n    if (existingBo) {\n      return {\n        root: existingBo,\n        reviveCache\n      };\n    }\n  }\n\n  var newBoAttrs = {};\n\n  // set attrs for new business object (might include creating other business objects)\n  keys(boDescriptor).forEach(key => {\n    let val,\n        val0;\n\n    if (boDescriptor[key].$type) {\n      val0 = createBo({\n        root: boDescriptor[key]\n      }, reviveCache);\n\n      val = val0.root;\n\n      reviveCache = val0.reviveCache;\n      boCache = reviveCache.boCache || {};\n    } else if (isArray(boDescriptor[key])) {\n      val = boDescriptor[key].map(b => {\n        val0 = createBo({\n          root: b\n        }, reviveCache);\n\n        reviveCache = val0.reviveCache;\n        boCache = reviveCache.boCache || {};\n\n        return val0.root;\n      });\n    } else {\n      val = boDescriptor[key];\n    }\n\n    newBoAttrs[key] = val;\n  });\n\n  const type = newBoAttrs.$type;\n\n  delete newBoAttrs.$type;\n\n  // generate new ID if not supposed to be kept or already assigned\n  if (!reviveCache._keepIds\n    || reviveCache._model.ids.assigned(newBoAttrs.id)) {\n\n    delete newBoAttrs.id;\n  }\n\n  var newBo = reviveCache._dmnFactory.create(type, newBoAttrs);\n\n  // set up $parent relationships for moddle elements\n  forEach(newBoAttrs, newBoAttr => {\n    if (newBoAttr.$type) {\n      newBoAttr.$parent = newBo;\n    }\n\n    if (isArray(newBoAttr)) {\n      newBoAttr.forEach(a => a.$parent = newBo);\n    }\n  });\n\n  if (id) {\n    boCache = {\n      ...boCache,\n      [id]: newBo\n    };\n\n    reviveCache = {\n      ...reviveCache,\n      boCache\n    };\n  }\n\n  return {\n    root: newBo,\n    reviveCache\n  };\n\n}"]}