var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode, createTextVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint-disable max-len */

import { is } from 'dmn-js-shared/lib/util/ModelUtil';

import { Cell } from 'table-js/lib/model';

var ContextMenu = function () {
  function ContextMenu(components, contextMenu, clipboard, editorActions, eventBus, elementRegistry, modeling, sheet, rules) {
    var _this = this;

    _classCallCheck(this, ContextMenu);

    this._contextMenu = contextMenu;
    this._clipboard = clipboard;
    this._editorActions = editorActions;
    this._elementRegistry = elementRegistry;
    this._eventBus = eventBus;
    this._modeling = modeling;
    this._sheet = sheet;
    this._rules = rules;

    this._getEntries = this._getEntries.bind(this);

    components.onGetComponent('context-menu', function () {
      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (context.contextMenuType && context.contextMenuType === 'context-menu') {
        var entries = _this._getEntries(context);

        var element = _this._elementRegistry.get(context.id);

        var additionalCellEntries = isCell(element) && components.getComponents('context-menu-cell-additional', context);

        if (additionalCellEntries && additionalCellEntries.length) {
          var cellEntriesGroup = createVNode(1, 'div', 'context-menu-group context-menu-group-cell', [createVNode(1, 'h4', 'context-menu-group-title', createTextVNode('Cell'), 2), additionalCellEntries], 0);

          return function () {
            return createVNode(1, 'div', 'context-menu-flex', (entries || []).concat([cellEntriesGroup]), 0);
          };
        } else {
          return function () {
            return createVNode(1, 'div', 'context-menu-flex', entries || [], 0);
          };
        }
      }
    });

    eventBus.on('cell.contextmenu', function (_ref) {
      var event = _ref.event,
          id = _ref.id,
          node = _ref.node;

      event.preventDefault();

      contextMenu.open({
        x: event.pageX,
        y: event.pageY
      }, {
        contextMenuType: 'context-menu',
        id: id
      });
    });
  }

  _createClass(ContextMenu, [{
    key: '_getEntries',
    value: function _getEntries(context) {
      var _this2 = this;

      var handlers = {
        addRuleAbove: function addRuleAbove(rule) {
          _this2._editorActions.trigger('addRuleAbove', { rule: rule });

          _this2._contextMenu.close();
        },
        addRuleBelow: function addRuleBelow(rule) {
          _this2._editorActions.trigger('addRuleBelow', { rule: rule });

          _this2._contextMenu.close();
        },
        removeRule: function removeRule(rule) {
          _this2._editorActions.trigger('removeRule', { rule: rule });

          _this2._contextMenu.close();
        },
        addInputLeft: function addInputLeft(input) {
          _this2._editorActions.trigger('addInputLeft', { input: input });

          _this2._contextMenu.close();
        },
        addInputRight: function addInputRight(input) {
          _this2._editorActions.trigger('addInputRight', { input: input });

          _this2._contextMenu.close();
        },
        removeInput: function removeInput(input) {
          _this2._editorActions.trigger('removeInput', { input: input });

          _this2._contextMenu.close();
        },
        addOutputLeft: function addOutputLeft(output) {
          _this2._editorActions.trigger('addOutputLeft', { output: output });

          _this2._contextMenu.close();
        },
        addOutputRight: function addOutputRight(output) {
          _this2._editorActions.trigger('addOutputRight', { output: output });

          _this2._contextMenu.close();
        },
        removeOutput: function removeOutput(output) {
          _this2._editorActions.trigger('removeOutput', { output: output });

          _this2._contextMenu.close();
        },
        copy: function copy(element) {
          _this2._editorActions.trigger('copy', { element: element });

          _this2._contextMenu.close();
        },
        cut: function cut(element) {
          _this2._editorActions.trigger('cut', { element: element });

          _this2._contextMenu.close();
        },
        pasteBefore: function pasteBefore(element) {
          _this2._editorActions.trigger('pasteBefore', { element: element });

          _this2._contextMenu.close();
        },
        pasteAfter: function pasteAfter(element) {
          _this2._editorActions.trigger('pasteAfter', { element: element });

          _this2._contextMenu.close();
        }
      };

      var id = context && context.id;

      if (!id) {
        return null;
      }

      var element = this._elementRegistry.get(id);

      if (!element) {
        return null;
      }

      var clipboardData = this._clipboard.get() || {};

      var entries = [];

      if (is(element.row, 'dmn:DecisionRule')) {
        var canPaste = this._rules.allowed('paste', {
          data: clipboardData.elements,
          target: element.row
        });

        entries.push(createVNode(1, 'div', 'context-menu-group context-menu-group-rule', [createVNode(1, 'h4', 'context-menu-group-title', createTextVNode('Rule'), 2), createVNode(1, 'div', 'context-menu-group-entry context-menu-entry-add-rule-above', [createVNode(1, 'span', 'context-menu-group-entry-icon dmn-icon-up'), createTextVNode('Add Above')], 4, {
          'onClick': function onClick() {
            return handlers.addRuleAbove(element.row);
          }
        }), createVNode(1, 'div', 'context-menu-group-entry context-menu-entry-add-rule-below', [createVNode(1, 'span', 'context-menu-group-entry-icon dmn-icon-down'), createTextVNode('Add Below')], 4, {
          'onClick': function onClick() {
            return handlers.addRuleBelow(element.row);
          }
        }), createVNode(1, 'div', 'context-menu-group-entry context-menu-entry-remove-rule', [createVNode(1, 'span', 'context-menu-group-entry-icon dmn-icon-clear'), createTextVNode('Remove')], 4, {
          'onClick': function onClick() {
            return handlers.removeRule(element.row);
          }
        }), createVNode(1, 'div', 'context-menu-group-entry context-menu-entry-copy-rule', [createVNode(1, 'span', 'context-menu-group-entry-icon dmn-icon-copy'), createTextVNode('Copy')], 4, {
          'onClick': function onClick() {
            return handlers.copy(element.row);
          }
        }), createVNode(1, 'div', 'context-menu-group-entry context-menu-entry-cut-rule', [createVNode(1, 'span', 'context-menu-group-entry-icon dmn-icon-cut'), createTextVNode('Cut')], 4, {
          'onClick': function onClick() {
            return handlers.cut(element.row);
          }
        }), createVNode(1, 'div', 'context-menu-group-entry ' + (canPaste ? '' : 'disabled') + ' context-menu-entry-paste-rule-above', [createVNode(1, 'span', 'context-menu-group-entry-icon dmn-icon-paste'), createTextVNode('Paste Above')], 4, {
          'onClick': function onClick() {
            return handlers.pasteBefore(element.row);
          }
        }), createVNode(1, 'div', 'context-menu-group-entry ' + (canPaste ? '' : 'disabled') + ' context-menu-entry-paste-rule-below', [createVNode(1, 'span', 'context-menu-group-entry-icon dmn-icon-paste'), createTextVNode('Paste Below')], 4, {
          'onClick': function onClick() {
            return handlers.pasteAfter(element.row);
          }
        })], 4));
      }

      if (is(element, 'dmn:InputClause') || is(element.col, 'dmn:InputClause')) {
        var actualElement = is(element, 'dmn:InputClause') ? element : element.col;

        var canRemove = this._rules.allowed('col.remove', {
          col: element.col || element
        });

        var _canPaste = this._rules.allowed('paste', {
          data: clipboardData.elements,
          target: element.col || element
        });

        entries.push(createVNode(1, 'div', 'context-menu-group context-menu-group-input', [createVNode(1, 'h4', 'context-menu-group-title', createTextVNode('Input'), 2), createVNode(1, 'div', 'context-menu-group-entry context-menu-entry-add-input-left', [createVNode(1, 'span', 'context-menu-group-entry-icon dmn-icon-left'), createTextVNode('Add Left')], 4, {
          'onClick': function onClick() {
            return handlers.addInputLeft(actualElement);
          }
        }), createVNode(1, 'div', 'context-menu-group-entry context-menu-entry-add-input-right', [createVNode(1, 'span', 'context-menu-group-entry-icon dmn-icon-right'), createTextVNode('Add Right')], 4, {
          'onClick': function onClick() {
            return handlers.addInputRight(actualElement);
          }
        }), createVNode(1, 'div', 'context-menu-group-entry ' + (canRemove ? '' : 'disabled') + ' context-menu-entry-remove-input', [createVNode(1, 'span', 'context-menu-group-entry-icon dmn-icon-clear'), createTextVNode('Remove')], 4, {
          'onClick': function onClick() {
            return handlers.removeInput(actualElement);
          }
        }), createVNode(1, 'div', 'context-menu-group-entry context-menu-entry-copy-input', [createVNode(1, 'span', 'context-menu-group-entry-icon dmn-icon-copy'), createTextVNode('Copy')], 4, {
          'onClick': function onClick() {
            return handlers.copy(actualElement);
          }
        }), createVNode(1, 'div', 'context-menu-group-entry ' + (canRemove ? '' : 'disabled') + ' context-menu-entry-cut-input', [createVNode(1, 'span', 'context-menu-group-entry-icon dmn-icon-cut'), createTextVNode('Cut')], 4, {
          'onClick': function onClick() {
            return handlers.cut(actualElement);
          }
        }), createVNode(1, 'div', 'context-menu-group-entry ' + (_canPaste ? '' : 'disabled') + ' context-menu-entry-paste-input-left', [createVNode(1, 'span', 'context-menu-group-entry-icon dmn-icon-paste'), createTextVNode('Paste Left')], 4, {
          'onClick': function onClick() {
            return handlers.pasteBefore(actualElement);
          }
        }), createVNode(1, 'div', 'context-menu-group-entry ' + (_canPaste ? '' : 'disabled') + ' context-menu-entry-paste-input-right', [createVNode(1, 'span', 'context-menu-group-entry-icon dmn-icon-paste'), createTextVNode('Paste Right')], 4, {
          'onClick': function onClick() {
            return handlers.pasteAfter(actualElement);
          }
        })], 4));
      } else if (is(element, 'dmn:OutputClause') || is(element.col, 'dmn:OutputClause')) {
        var _actualElement = is(element, 'dmn:OutputClause') ? element : element.col;

        var _canRemove = this._rules.allowed('col.remove', {
          col: element.col || element
        });

        var _canPaste2 = this._rules.allowed('paste', {
          data: clipboardData.elements,
          target: element.col || element
        });

        entries.push(createVNode(1, 'div', 'context-menu-group context-menu-group-output', [createVNode(1, 'h4', 'context-menu-group-title', createTextVNode('Output'), 2), createVNode(1, 'div', 'context-menu-group-entry context-menu-entry-add-output-left', [createVNode(1, 'span', 'context-menu-group-entry-icon dmn-icon-left'), createTextVNode('Add Left')], 4, {
          'onClick': function onClick() {
            return handlers.addOutputLeft(_actualElement);
          }
        }), createVNode(1, 'div', 'context-menu-group-entry context-menu-entry-add-output-right', [createVNode(1, 'span', 'context-menu-group-entry-icon dmn-icon-right'), createTextVNode('Add Right')], 4, {
          'onClick': function onClick() {
            return handlers.addOutputRight(_actualElement);
          }
        }), createVNode(1, 'div', 'context-menu-group-entry ' + (_canRemove ? '' : 'disabled') + ' context-menu-entry-remove-output', [createVNode(1, 'span', 'context-menu-group-entry-icon dmn-icon-clear'), createTextVNode('Remove')], 4, {
          'onClick': function onClick() {
            return handlers.removeOutput(_actualElement);
          }
        }), createVNode(1, 'div', 'context-menu-group-entry context-menu-entry-copy-output', [createVNode(1, 'span', 'context-menu-group-entry-icon dmn-icon-copy'), createTextVNode('Copy')], 4, {
          'onClick': function onClick() {
            return handlers.copy(_actualElement);
          }
        }), createVNode(1, 'div', 'context-menu-group-entry ' + (_canRemove ? '' : 'disabled') + ' context-menu-entry-cut-output', [createVNode(1, 'span', 'context-menu-group-entry-icon dmn-icon-cut'), createTextVNode('Cut')], 4, {
          'onClick': function onClick() {
            return handlers.cut(_actualElement);
          }
        }), createVNode(1, 'div', 'context-menu-group-entry ' + (_canPaste2 ? '' : 'disabled') + ' context-menu-entry-paste-output-left', [createVNode(1, 'span', 'context-menu-group-entry-icon dmn-icon-paste'), createTextVNode('Paste Left')], 4, {
          'onClick': function onClick() {
            return handlers.pasteBefore(_actualElement);
          }
        }), createVNode(1, 'div', 'context-menu-group-entry ' + (_canPaste2 ? '' : 'disabled') + ' context-menu-entry-paste-output-right', [createVNode(1, 'span', 'context-menu-group-entry-icon dmn-icon-paste'), createTextVNode('Paste Right')], 4, {
          'onClick': function onClick() {
            return handlers.pasteAfter(_actualElement);
          }
        })], 4));
      }

      return entries;
    }
  }]);

  return ContextMenu;
}();

export default ContextMenu;


ContextMenu.$inject = ['components', 'contextMenu', 'clipboard', 'editorActions', 'eventBus', 'elementRegistry', 'modeling', 'sheet', 'rules'];

// helpers ///////////

function isCell(element) {
  return element instanceof Cell;
}
//# sourceMappingURL=ContextMenu.js.map