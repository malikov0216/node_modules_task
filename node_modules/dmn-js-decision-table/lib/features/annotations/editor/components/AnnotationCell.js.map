{"version":3,"sources":["../../../../../src/features/annotations/editor/components/AnnotationCell.js"],"names":["Component","EditableComponent","Cell","inject","EditableAnnotationCell","props","context","onElementsChanged","forceUpdate","setAnnotationValue","text","row","modeling","editAnnotation","businessObject","changeSupport","id","offElementsChanged","rowIndex","description","$inject","AnnotationEditor","getClassName","getEditor"],"mappings":";;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,SAA1B;;AAEA,OAAOC,iBAAP,MAA8B,gDAA9B;;AAEA,SACEC,IADF,EAEEC,MAFF,QAGO,yBAHP;;IAMqBC,sB;;;AAEnB,kCAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,gJACpBD,KADoB,EACbC,OADa;;AAAA,UAkB5BC,iBAlB4B,GAkBR,YAAM;AACxB,YAAKC,WAAL;AACD,KApB2B;;AAAA,UAsB5BC,kBAtB4B,GAsBP,UAACC,IAAD,EAAU;AAAA,UACrBC,GADqB,GACb,MAAKN,KADQ,CACrBM,GADqB;;;AAG7B,YAAKC,QAAL,CAAcC,cAAd,CAA6BF,IAAIG,cAAjC,EAAiDJ,IAAjD;AACD,KA1B2B;;AAG1BP;AAH0B;AAI3B;;;;yCAEoB;AAAA,UACXQ,GADW,GACH,KAAKN,KADF,CACXM,GADW;;;AAGnB,WAAKI,aAAL,CAAmBR,iBAAnB,CAAqCI,IAAIK,EAAzC,EAA6C,KAAKT,iBAAlD;AACD;;;2CAEsB;AAAA,UACbI,GADa,GACL,KAAKN,KADA,CACbM,GADa;;;AAGrB,WAAKI,aAAL,CAAmBE,kBAAnB,CAAsCN,IAAIK,EAA1C,EAA8C,KAAKT,iBAAnD;AACD;;;6BAaQ;AAAA,mBAIH,KAAKF,KAJF;AAAA,UAELM,GAFK,UAELA,GAFK;AAAA,UAGLO,QAHK,UAGLA,QAHK;AAAA,gCAQHP,IAAIG,cARD;AAAA,UAMLK,WANK,uBAMLA,WANK;AAAA,UAOLH,EAPK,uBAOLA,EAPK;;;AAUP;AAAA,qBAGc,YAHd;AAAA,oBAIe,KAAKP,kBAJpB;AAAA,kBAKgBS,QALhB;AAAA,iBAMYC,WANZ;AAAA,qBAOgBH,KAAK,cAPrB;AAAA,uBAQkBL,IAAIK,EARtB;AAAA;AAAA,4BAWuB,IAXvB;AAAA,uBAYgB,mBAZhB;AAAA,sBAaiB,KAAKP,kBAbtB;AAAA,mBAccU;AAdd;AAAA;AAiBD;;;;EA1DiDnB,S;;eAA/BI,sB;;;AA8DrBA,uBAAuBgB,OAAvB,GAAiC,CAC/B,eAD+B,EAE/B,UAF+B,CAAjC;;IAMMC,gB;;;;;;;;;;;6BAEK;AACP,mCACmB,KAAKC,YAAL,EADnB,EAEM,KAAKC,SAAL,EAFN;AAKD;;;;EAR4BtB,iB","file":"AnnotationCell.js","sourcesContent":["import { Component } from 'inferno';\n\nimport EditableComponent from 'dmn-js-shared/lib/components/EditableComponent';\n\nimport {\n  Cell,\n  inject\n} from 'table-js/lib/components';\n\n\nexport default class EditableAnnotationCell extends Component {\n\n  constructor(props, context) {\n    super(props, context);\n\n    inject(this);\n  }\n\n  componentWillMount() {\n    const { row } = this.props;\n\n    this.changeSupport.onElementsChanged(row.id, this.onElementsChanged);\n  }\n\n  componentWillUnmount() {\n    const { row } = this.props;\n\n    this.changeSupport.offElementsChanged(row.id, this.onElementsChanged);\n  }\n\n  onElementsChanged = () => {\n    this.forceUpdate();\n  }\n\n  setAnnotationValue = (text) => {\n    const { row } = this.props;\n\n    this.modeling.editAnnotation(row.businessObject, text);\n  }\n\n\n  render() {\n    const {\n      row,\n      rowIndex\n    } = this.props;\n    const {\n      description,\n      id\n    } = row.businessObject;\n\n    return (\n\n      <Cell\n        className=\"annotation\"\n        onChange={ this.setAnnotationValue }\n        coords={ `${rowIndex}:annotation` }\n        value={ description }\n        elementId={ id + '__annotation' }\n        data-row-id={ row.id }>\n\n        <AnnotationEditor\n          ctrlForNewline={ true }\n          className=\"annotation-editor\"\n          onChange={ this.setAnnotationValue }\n          value={ description } />\n      </Cell>\n    );\n  }\n\n}\n\nEditableAnnotationCell.$inject = [\n  'changeSupport',\n  'modeling'\n];\n\n\nclass AnnotationEditor extends EditableComponent {\n\n  render() {\n    return (\n      <div className={ this.getClassName() }>\n        { this.getEditor() }\n      </div>\n    );\n  }\n}"]}