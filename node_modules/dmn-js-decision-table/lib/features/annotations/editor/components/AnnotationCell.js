var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode, createComponentVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

import EditableComponent from 'dmn-js-shared/lib/components/EditableComponent';

import { Cell, inject } from 'table-js/lib/components';

var EditableAnnotationCell = function (_Component) {
  _inherits(EditableAnnotationCell, _Component);

  function EditableAnnotationCell(props, context) {
    _classCallCheck(this, EditableAnnotationCell);

    var _this = _possibleConstructorReturn(this, (EditableAnnotationCell.__proto__ || Object.getPrototypeOf(EditableAnnotationCell)).call(this, props, context));

    _this.onElementsChanged = function () {
      _this.forceUpdate();
    };

    _this.setAnnotationValue = function (text) {
      var row = _this.props.row;


      _this.modeling.editAnnotation(row.businessObject, text);
    };

    inject(_this);
    return _this;
  }

  _createClass(EditableAnnotationCell, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var row = this.props.row;


      this.changeSupport.onElementsChanged(row.id, this.onElementsChanged);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var row = this.props.row;


      this.changeSupport.offElementsChanged(row.id, this.onElementsChanged);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          row = _props.row,
          rowIndex = _props.rowIndex;
      var _row$businessObject = row.businessObject,
          description = _row$businessObject.description,
          id = _row$businessObject.id;


      return createComponentVNode(2, Cell, {
        'className': 'annotation',
        'onChange': this.setAnnotationValue,
        'coords': rowIndex + ':annotation',
        'value': description,
        'elementId': id + '__annotation',
        'data-row-id': row.id,
        children: createComponentVNode(2, AnnotationEditor, {
          'ctrlForNewline': true,
          'className': 'annotation-editor',
          'onChange': this.setAnnotationValue,
          'value': description
        })
      });
    }
  }]);

  return EditableAnnotationCell;
}(Component);

export default EditableAnnotationCell;


EditableAnnotationCell.$inject = ['changeSupport', 'modeling'];

var AnnotationEditor = function (_EditableComponent) {
  _inherits(AnnotationEditor, _EditableComponent);

  function AnnotationEditor() {
    _classCallCheck(this, AnnotationEditor);

    return _possibleConstructorReturn(this, (AnnotationEditor.__proto__ || Object.getPrototypeOf(AnnotationEditor)).apply(this, arguments));
  }

  _createClass(AnnotationEditor, [{
    key: 'render',
    value: function render() {
      return createVNode(1, 'div', this.getClassName(), this.getEditor(), 0);
    }
  }]);

  return AnnotationEditor;
}(EditableComponent);
//# sourceMappingURL=AnnotationCell.js.map