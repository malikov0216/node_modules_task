var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode, createComponentVNode, createTextVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

import { isString } from 'min-dash';

import ContentEditable from 'dmn-js-shared/lib/components/ContentEditable';
import Input from 'dmn-js-shared/lib/components/Input';
import InputSelect from 'dmn-js-shared/lib/components/InputSelect';

var InputEditor = function (_Component) {
  _inherits(InputEditor, _Component);

  function InputEditor(props, context) {
    _classCallCheck(this, InputEditor);

    var _this = _possibleConstructorReturn(this, (InputEditor.__proto__ || Object.getPrototypeOf(InputEditor)).call(this, props, context));

    _this.setExpressionLanguage = function (expressionLanguage) {
      _this.handleChange({ expressionLanguage: expressionLanguage });
    };

    _this.makeScript = function (event) {
      event.preventDefault();
      event.stopPropagation();

      _this.setExpressionLanguage('FEEL');
    };

    _this.handleValue = function (text) {
      var expressionLanguage = _this.props.expressionLanguage;


      var change = { text: text };

      if (isMultiLine(text) && !expressionLanguage) {
        change.expressionLanguage = 'FEEL';
      }

      if (!isMultiLine(text) && expressionLanguage === 'FEEL') {
        change.expressionLanguage = undefined;
      }

      _this.handleChange(change);
    };

    _this.handleLanguageChange = function (language) {
      _this.setExpressionLanguage(language);
    };

    _this.handleLabelChange = function (value) {

      // default to <undefined> for empty string
      var label = value || undefined;

      _this.handleChange({ label: label });
    };

    _this.handleInputVariableChange = function (value) {

      // default to <undefined> for empty string
      var inputVariable = value || undefined;

      _this.handleChange({ inputVariable: inputVariable });
    };
    return _this;
  }

  _createClass(InputEditor, [{
    key: 'handleChange',
    value: function handleChange(changes) {
      var onChange = this.props.onChange;


      if (typeof onChange === 'function') {
        onChange(changes);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          expressionLanguage = _props.expressionLanguage,
          inputVariable = _props.inputVariable,
          label = _props.label,
          text = _props.text;


      var editScript = expressionLanguage || isMultiLine(text);

      var languageOptions = [!isMultiLine(text) && '', 'FEEL', 'JUEL', 'JavaScript', 'Groovy', 'Python'].filter(isString).map(function (o) {
        return { label: o, value: o };
      });

      return createVNode(1, 'div', 'dms-container ref-input-editor', [createVNode(1, 'p', 'dms-fill-row', [createVNode(1, 'label', 'dms-label', createTextVNode('Input Label'), 2), createComponentVNode(2, Input, {
        'className': 'ref-input-label',
        'value': label || '',
        'onInput': this.handleLabelChange
      })], 4), createVNode(1, 'hr', 'dms-hrule'), createVNode(1, 'h4', 'dms-heading', createTextVNode('Input Expression'), 2), createComponentVNode(2, ContentEditable, {
        'placeholder': 'enter expression',
        'ctrlForNewline': true,
        'className': ['ref-text', 'dms-input', editScript ? 'dms-script-input script-editor' : '', 'dms-fit-row'].join(' '),
        'onInput': this.handleValue,
        'value': text || ''
      }), !editScript && createVNode(1, 'p', 'dms-hint', [createTextVNode('Enter simple '), createVNode(1, 'code', null, createTextVNode('FEEL'), 2), createTextVNode(' expression or '), createVNode(1, 'a', 'ref-make-script', createTextVNode('change to script'), 2, {
        'href': '#',
        'onClick': this.makeScript
      }), createTextVNode('.')], 4), editScript && createVNode(1, 'p', 'dms-hint', createTextVNode('Enter script.'), 2), editScript && createVNode(1, 'p', null, [createVNode(1, 'label', 'dms-label', createTextVNode('Expression Language'), 2), createComponentVNode(2, InputSelect, {
        'className': 'ref-language',
        'value': expressionLanguage || '',
        'onChange': this.handleLanguageChange,
        'options': languageOptions
      })], 4), createVNode(1, 'p', 'dms-fill-row', [createVNode(1, 'label', 'dms-label', createTextVNode('Input Variable'), 2), createComponentVNode(2, Input, {
        'className': 'ref-input-variable',
        'value': inputVariable || '',
        'onInput': this.handleInputVariableChange,
        'placeholder': 'cellInput'
      })], 4)], 0);
    }
  }]);

  return InputEditor;
}(Component);

export default InputEditor;


function isMultiLine(text) {
  return text && text.split(/\n/).length > 1;
}
//# sourceMappingURL=InputEditor.js.map