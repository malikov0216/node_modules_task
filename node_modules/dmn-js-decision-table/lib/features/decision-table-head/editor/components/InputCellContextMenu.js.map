{"version":3,"sources":["../../../../../src/features/decision-table-head/editor/components/InputCellContextMenu.js"],"names":["Component","InputEditor","inject","InputCellContextMenu","props","context","persistChanges","input","unsaved","state","inputVariable","label","inputExpressionProperties","changes","hasKeys","inputExpression","modeling","updateProperties","setState","handleChange","debounceInput","attr","target","get","getValue","$inject","obj","Object","keys","length"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,SAA1B;;AAEA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,SACEC,MADF,QAEO,yBAFP;;IAKqBC,oB;;;AAEnB,gCAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,4IACpBD,KADoB,EACbC,OADa;;AAAA,UAU5BC,cAV4B,GAUX,YAAM;AAAA,UACbC,KADa,GACH,MAAKH,KAAL,CAAWC,OADR,CACbE,KADa;AAAA,UAGbC,OAHa,GAGD,MAAKC,KAHJ,CAGbD,OAHa;;;AAKrB,UAAI,CAACA,OAAL,EAAc;AACZ;AACD;;AAPoB,UAUnBE,aAVmB,GAajBF,OAbiB,CAUnBE,aAVmB;AAAA,UAWnBC,KAXmB,GAajBH,OAbiB,CAWnBG,KAXmB;AAAA,UAYhBC,yBAZgB,4BAajBJ,OAbiB;;AAerB,UAAIK,UAAU,EAAd;;AAEA,UAAI,mBAAmBL,OAAvB,EAAgC;AAC9BK,gBAAQH,aAAR,GAAwBA,aAAxB;AACD;;AAED,UAAI,WAAWF,OAAf,EAAwB;AACtBK,gBAAQF,KAAR,GAAgBA,KAAhB;AACD;;AAED,UAAIG,QAAQF,yBAAR,CAAJ,EAAwC;AACtCC,gBAAQE,eAAR,GAA0BH,yBAA1B;AACD;;AAED,YAAKI,QAAL,CAAcC,gBAAd,CAA+BV,KAA/B,EAAsCM,OAAtC;;AAEA,YAAKK,QAAL,CAAc;AACZV,iBAAS;AADG,OAAd;AAGD,KA5C2B;;AAAA,UA8C5BW,YA9C4B,GA8Cb,UAACN,OAAD,EAAa;AAC1B,YAAKK,QAAL,CAAc;AACZV,8BACK,MAAKC,KAAL,CAAWD,OADhB,EAEKK,OAFL;AADY,OAAd,EAKG,MAAKP,cALR;AAMD,KArD2B;;AAG1B,UAAKG,KAAL,GAAa,EAAb;;AAEAP;;AAEA,UAAKI,cAAL,GAAsB,MAAKc,aAAL,CAAmB,MAAKd,cAAxB,CAAtB;AAP0B;AAQ3B;;;;6BA+CQe,I,EAAM;AAAA,UACPd,KADO,GACG,KAAKH,KAAL,CAAWC,OADd,CACPE,KADO;AAAA,UAGLC,OAHK,GAGO,KAAKC,KAHZ,CAGLD,OAHK;;;AAKb,UAAIc,SAASf,KAAb;;AAEA;AACA,UAAIc,SAAS,oBAAT,IAAiCA,SAAS,MAA9C,EAAsD;AACpDC,iBAASA,OAAOP,eAAhB;AACD;;AAED,aAAQP,WAAWA,QAAQa,IAAR,CAAZ,IAA8BC,OAAOC,GAAP,CAAWF,IAAX,CAArC;AACD;;;6BAEQ;AACP,mCACiB,mCADjB;AAAA,8BAG2B,KAAKG,QAAL,CAAc,oBAAd,CAH3B;AAAA,yBAIsB,KAAKA,QAAL,CAAc,eAAd,CAJtB;AAAA,iBAKc,KAAKA,QAAL,CAAc,OAAd,CALd;AAAA,gBAMa,KAAKA,QAAL,CAAc,MAAd,CANb;AAAA,oBAOiB,KAAKL;AAPtB;AAUD;;;;EAnF+CnB,S;;eAA7BG,oB;;;AAsFrBA,qBAAqBsB,OAArB,GAA+B,CAC7B,eAD6B,EAE7B,UAF6B,CAA/B;;AAMA;;AAEA,SAASX,OAAT,CAAiBY,GAAjB,EAAsB;AACpB,SAAOC,OAAOC,IAAP,CAAYF,GAAZ,EAAiBG,MAAxB;AACD","file":"InputCellContextMenu.js","sourcesContent":["import { Component } from 'inferno';\n\nimport InputEditor from './InputEditor';\n\nimport {\n  inject\n} from 'table-js/lib/components';\n\n\nexport default class InputCellContextMenu extends Component {\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {};\n\n    inject(this);\n\n    this.persistChanges = this.debounceInput(this.persistChanges);\n  }\n\n  persistChanges = () => {\n    const { input } = this.props.context;\n\n    const { unsaved } = this.state;\n\n    if (!unsaved) {\n      return;\n    }\n\n    const {\n      inputVariable,\n      label,\n      ...inputExpressionProperties\n    } = unsaved;\n\n    var changes = { };\n\n    if ('inputVariable' in unsaved) {\n      changes.inputVariable = inputVariable;\n    }\n\n    if ('label' in unsaved) {\n      changes.label = label;\n    }\n\n    if (hasKeys(inputExpressionProperties)) {\n      changes.inputExpression = inputExpressionProperties;\n    }\n\n    this.modeling.updateProperties(input, changes);\n\n    this.setState({\n      unsaved: false\n    });\n  }\n\n  handleChange = (changes) => {\n    this.setState({\n      unsaved: {\n        ...this.state.unsaved,\n        ...changes\n      }\n    }, this.persistChanges);\n  };\n\n  getValue(attr) {\n    let { input } = this.props.context;\n\n    const { unsaved } = this.state;\n\n    let target = input;\n\n    // input variable stored in parent\n    if (attr === 'expressionLanguage' || attr === 'text') {\n      target = target.inputExpression;\n    }\n\n    return (unsaved && unsaved[attr]) || target.get(attr);\n  }\n\n  render() {\n    return (\n      <div className=\"context-menu-container input-edit\">\n        <InputEditor\n          expressionLanguage={ this.getValue('expressionLanguage') }\n          inputVariable={ this.getValue('inputVariable') }\n          label={ this.getValue('label') }\n          text={ this.getValue('text') }\n          onChange={ this.handleChange } />\n      </div>\n    );\n  }\n}\n\nInputCellContextMenu.$inject = [\n  'debounceInput',\n  'modeling'\n];\n\n\n// helpers //////////////////////\n\nfunction hasKeys(obj) {\n  return Object.keys(obj).length;\n}"]}