{"version":3,"sources":["../../../../../src/features/decision-table-head/editor/components/InputEditor.js"],"names":["Component","isString","ContentEditable","Input","InputSelect","InputEditor","props","context","setExpressionLanguage","expressionLanguage","handleChange","makeScript","event","preventDefault","stopPropagation","handleValue","text","change","isMultiLine","undefined","handleLanguageChange","language","handleLabelChange","value","label","handleInputVariableChange","inputVariable","changes","onChange","editScript","languageOptions","filter","map","o","join","split","length"],"mappings":"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","file":"InputEditor.js","sourcesContent":["import { Component } from 'inferno';\n\nimport { isString } from 'min-dash';\n\nimport ContentEditable from 'dmn-js-shared/lib/components/ContentEditable';\nimport Input from 'dmn-js-shared/lib/components/Input';\nimport InputSelect from 'dmn-js-shared/lib/components/InputSelect';\n\n\nexport default class InputEditor extends Component {\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.setExpressionLanguage = (expressionLanguage) => {\n      this.handleChange({ expressionLanguage });\n    };\n\n    this.makeScript = (event) => {\n      event.preventDefault();\n      event.stopPropagation();\n\n      this.setExpressionLanguage('FEEL');\n    };\n\n    this.handleValue = (text) => {\n\n      let { expressionLanguage } = this.props;\n\n      let change = { text };\n\n      if (isMultiLine(text) && !expressionLanguage) {\n        change.expressionLanguage = 'FEEL';\n      }\n\n      if (!isMultiLine(text) && expressionLanguage === 'FEEL') {\n        change.expressionLanguage = undefined;\n      }\n\n      this.handleChange(change);\n    };\n\n    this.handleLanguageChange = (language) => {\n      this.setExpressionLanguage(language);\n    };\n\n    this.handleLabelChange = (value) => {\n\n      // default to <undefined> for empty string\n      var label = value || undefined;\n\n      this.handleChange({ label });\n    };\n\n    this.handleInputVariableChange = (value) => {\n\n      // default to <undefined> for empty string\n      var inputVariable = value || undefined;\n\n      this.handleChange({ inputVariable });\n    };\n  }\n\n  handleChange(changes) {\n    var { onChange } = this.props;\n\n    if (typeof onChange === 'function') {\n      onChange(changes);\n    }\n  }\n\n  render() {\n\n    const {\n      expressionLanguage,\n      inputVariable,\n      label,\n      text\n    } = this.props;\n\n    var editScript = expressionLanguage || isMultiLine(text);\n\n    var languageOptions = [\n      !isMultiLine(text) && '',\n      'FEEL',\n      'JUEL',\n      'JavaScript',\n      'Groovy',\n      'Python'\n    ].filter(isString).map(o => ({ label: o, value: o }));\n\n    return (\n      <div className=\"dms-container ref-input-editor\">\n\n        <p className=\"dms-fill-row\">\n          <label className=\"dms-label\">Input Label</label>\n\n          <Input\n            className=\"ref-input-label\"\n            value={ label || '' }\n            onInput={ this.handleLabelChange } />\n        </p>\n\n        <hr className=\"dms-hrule\" />\n\n        <h4 className=\"dms-heading\">Input Expression</h4>\n\n        <ContentEditable\n          placeholder=\"enter expression\"\n          ctrlForNewline={ true }\n          className={\n            [\n              'ref-text',\n              'dms-input',\n              editScript ? 'dms-script-input script-editor' : '',\n              'dms-fit-row'\n            ].join(' ')\n          }\n          onInput={ this.handleValue }\n          value={ text || '' } />\n\n        {\n          !editScript && (\n            <p className=\"dms-hint\">\n              Enter simple <code>FEEL</code> expression or <a href=\"#\"\n                className=\"ref-make-script\"\n                onClick={ this.makeScript }>\n                  change to script\n              </a>.\n            </p>\n          )\n        }\n\n        {\n          editScript && (\n            <p className=\"dms-hint\">\n              Enter script.\n            </p>\n          )\n        }\n\n        {\n          editScript && (\n            <p>\n              <label className=\"dms-label\">Expression Language</label>\n\n              <InputSelect\n                className=\"ref-language\"\n                value={ expressionLanguage || '' }\n                onChange={ this.handleLanguageChange }\n                options={ languageOptions } />\n            </p>\n          )\n        }\n\n        <p className=\"dms-fill-row\">\n          <label className=\"dms-label\">Input Variable</label>\n\n          <Input\n            className=\"ref-input-variable\"\n            value={ inputVariable || '' }\n            onInput={ this.handleInputVariableChange }\n            placeholder=\"cellInput\" />\n        </p>\n      </div>\n    );\n  }\n}\n\n\n\nfunction isMultiLine(text) {\n  return text && text.split(/\\n/).length > 1;\n}"]}