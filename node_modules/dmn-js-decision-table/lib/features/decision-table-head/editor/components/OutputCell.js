var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

import { mixin } from 'table-js/lib/components';

import { ComponentWithSlots } from 'dmn-js-shared/lib/components/mixins';

var OutputCell = function (_Component) {
  _inherits(OutputCell, _Component);

  function OutputCell(props, context) {
    _classCallCheck(this, OutputCell);

    var _this = _possibleConstructorReturn(this, (OutputCell.__proto__ || Object.getPrototypeOf(OutputCell)).call(this, props, context));

    _this.onClick = function (event) {
      var output = _this.props.output;


      _this._eventBus.fire('output.edit', {
        event: event,
        output: output
      });
    };

    _this.onContextmenu = function (event) {
      var id = _this.props.output.id;


      _this._eventBus.fire('cell.contextmenu', {
        event: event,
        id: id
      });
    };

    _this.onElementsChanged = function () {
      _this.forceUpdate();
    };

    mixin(_this, ComponentWithSlots);
    return _this;
  }

  _createClass(OutputCell, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var injector = this.context.injector;


      this._changeSupport = this.context.changeSupport;
      this._eventBus = injector.get('eventBus');
      this._elementRegistry = injector.get('elementRegistry');

      var output = this.props.output;


      this._changeSupport.onElementsChanged(output.id, this.onElementsChanged);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var output = this.props.output;


      this._changeSupport.offElementsChanged(output.id, this.onElementsChanged);
    }
  }, {
    key: 'render',
    value: function render() {
      var output = this.props.output;

      var label = output.get('label');
      var name = output.get('name');

      return createVNode(1, 'th', 'output-cell output-editor', [this.slotFills({
        type: 'cell-inner',
        context: {
          cellType: 'output-cell',
          col: this._elementRegistry.get(output.id)
        },
        col: output
      }), label ? createVNode(1, 'span', 'output-label', label, 0, {
        'title': 'Output Label'
      }) : createVNode(1, 'span', 'output-name', name || '-', 0, {
        'title': 'Output Expression'
      })], 0, {
        'data-col-id': output.id,
        'onClick': this.onClick,
        'onContextmenu': this.onContextmenu
      });
    }
  }]);

  return OutputCell;
}(Component);

export default OutputCell;
//# sourceMappingURL=OutputCell.js.map