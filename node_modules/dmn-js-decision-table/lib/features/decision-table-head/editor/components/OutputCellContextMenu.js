var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode, createComponentVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

import OutputEditor from './OutputEditor';

import { inject } from 'table-js/lib/components';

var OutputCellContextMenu = function (_Component) {
  _inherits(OutputCellContextMenu, _Component);

  function OutputCellContextMenu(props, context) {
    _classCallCheck(this, OutputCellContextMenu);

    var _this = _possibleConstructorReturn(this, (OutputCellContextMenu.__proto__ || Object.getPrototypeOf(OutputCellContextMenu)).call(this, props, context));

    _this.persistChanges = function () {
      var output = _this.props.context.output;
      var unsaved = _this.state.unsaved;


      if (!unsaved) {
        return;
      }

      _this.modeling.updateProperties(output, unsaved);

      _this.setState({
        unsaved: false
      });
    };

    _this.handleChange = function (changes) {
      _this.setState({
        unsaved: _extends({}, _this.state.unsaved, changes)
      }, _this.persistChanges);
    };

    _this.state = {};

    inject(_this);

    _this.persistChanges = _this.debounceInput(_this.persistChanges);
    return _this;
  }

  _createClass(OutputCellContextMenu, [{
    key: 'getValue',
    value: function getValue(attr) {
      var output = this.props.context.output;
      var unsaved = this.state.unsaved;


      return unsaved && unsaved[attr] || output.get(attr);
    }
  }, {
    key: 'render',
    value: function render() {
      return createVNode(1, 'div', 'context-menu-container output-edit', createComponentVNode(2, OutputEditor, {
        'name': this.getValue('name'),
        'label': this.getValue('label'),
        'onChange': this.handleChange
      }), 2);
    }
  }]);

  return OutputCellContextMenu;
}(Component);

export default OutputCellContextMenu;


OutputCellContextMenu.$inject = ['debounceInput', 'modeling'];
//# sourceMappingURL=OutputCellContextMenu.js.map