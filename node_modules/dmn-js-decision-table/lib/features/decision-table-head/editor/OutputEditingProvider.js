function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { closest as domClosest } from 'min-dom';

import OutputCell from './components/OutputCell';
import OutputCellContextMenu from './components/OutputCellContextMenu';

var OutputEditingProvider = function OutputEditingProvider(components, contextMenu, eventBus, renderer) {
  _classCallCheck(this, OutputEditingProvider);

  components.onGetComponent('cell', function (_ref) {
    var cellType = _ref.cellType;

    if (cellType === 'output-header') {
      return OutputCell;
    }
  });

  components.onGetComponent('context-menu', function () {
    var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (context.contextMenuType === 'output-edit') {
      return OutputCellContextMenu;
    }
  });

  eventBus.on('output.edit', function (_ref2) {
    var event = _ref2.event,
        output = _ref2.output;
    var target = event.target;


    var node = domClosest(target, 'th', true);

    var _node$getBoundingClie = node.getBoundingClientRect(),
        left = _node$getBoundingClie.left,
        top = _node$getBoundingClie.top,
        width = _node$getBoundingClie.width,
        height = _node$getBoundingClie.height;

    var container = renderer.getContainer();

    contextMenu.open({
      x: left + container.parentNode.scrollLeft,
      y: top + container.parentNode.scrollTop,
      width: width,
      height: height
    }, {
      contextMenuType: 'output-edit',
      output: output,
      offset: {
        x: 4,
        y: 4
      }
    });
  });
};

export default OutputEditingProvider;


OutputEditingProvider.$inject = ['components', 'contextMenu', 'eventBus', 'renderer'];
//# sourceMappingURL=OutputEditingProvider.js.map