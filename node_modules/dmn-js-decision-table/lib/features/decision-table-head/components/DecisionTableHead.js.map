{"version":3,"sources":["../../../../src/features/decision-table-head/components/DecisionTableHead.js"],"names":["is","getBusinessObject","Component","mixin","ComponentWithSlots","DecisionTableHead","props","context","onElementsChanged","forceUpdate","_sheet","injector","get","_changeSupport","changeSupport","root","getRoot","id","offElementsChanged","businessObject","inputs","input","outputs","output","slotFills","type","cellType","slotFill","DefaultInputLabel","DefaultOutputLabel","map","key","DefaultInputHeaderCell","DefaultOutputHeaderCell","index","inputExpression","element","className","DefaultTypeRefCell","label","actualClassName","text","length","colspan","name","typeRef"],"mappings":"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","file":"DecisionTableHead.js","sourcesContent":["import {\n  is,\n  getBusinessObject\n} from 'dmn-js-shared/lib/util/ModelUtil';\n\nimport { Component } from 'inferno';\n\nimport {\n  mixin\n} from 'table-js/lib/components';\n\nimport {\n  ComponentWithSlots\n} from 'dmn-js-shared/lib/components/mixins';\n\n\nexport default class DecisionTableHead extends Component {\n\n  constructor(props, context) {\n    super(props, context);\n\n    mixin(this, ComponentWithSlots);\n\n    this._sheet = context.injector.get('sheet');\n\n    this._changeSupport = context.changeSupport;\n  }\n\n  onElementsChanged = () => {\n    this.forceUpdate();\n  }\n\n  componentWillMount() {\n    const root = this._sheet.getRoot();\n\n    this._changeSupport.onElementsChanged(root.id, this.onElementsChanged);\n  }\n\n  componentWillUnmout() {\n    const root = this._sheet.getRoot();\n\n    this._changeSupport.offElementsChanged(root.id, this.onElementsChanged);\n  }\n\n  render(props) {\n    const root = this._sheet.getRoot();\n\n    if (!is(root, 'dmn:DMNElement')) {\n      return null;\n    }\n\n    const businessObject = getBusinessObject(root);\n\n    const inputs = businessObject.input,\n          outputs = businessObject.output;\n\n    return <thead>\n      <tr>\n\n        {\n          this.slotFills({\n            type: 'cell',\n            context: { cellType: 'before-label-cells' }\n          })\n        }\n\n        {\n          this.slotFill({\n            type: 'cell',\n            context: { cellType: 'input-label' }\n          }, DefaultInputLabel)\n        }\n\n        {\n          this.slotFill({\n            type: 'cell',\n            context: { cellType: 'output-label' }\n          }, DefaultOutputLabel)\n        }\n\n        {\n          this.slotFills({\n            type: 'cell',\n            context: { cellType: 'after-label-cells' }\n          })\n        }\n      </tr>\n      <tr>\n        {\n          inputs && inputs.map(input => {\n            return this.slotFill({\n              type: 'cell',\n              context: {\n                cellType: 'input-header',\n                input\n              },\n              key: input.id\n            }, DefaultInputHeaderCell);\n          })\n        }\n        {\n          outputs.map(output => {\n            return this.slotFill({\n              type: 'cell',\n              context: {\n                cellType: 'output-header',\n                output\n              },\n              key: output.id\n            }, DefaultOutputHeaderCell);\n          })\n        }\n      </tr>\n      <tr>\n        {\n          inputs && inputs.map((input, index) => {\n\n            const {\n              inputExpression\n            } = input;\n\n            return this.slotFill({\n              type: 'cell',\n              context: {\n                cellType: 'input-header-type-ref',\n                element: inputExpression\n              },\n              className: 'input-cell',\n              key: input.id\n            }, DefaultTypeRefCell);\n          })\n        }\n        {\n          outputs.map(output => {\n\n            return this.slotFill({\n              type: 'cell',\n              context: {\n                cellType: 'output-header-type-ref',\n                element: output\n              },\n              className: 'output-cell',\n              key: output.id\n            }, DefaultTypeRefCell);\n          })\n        }\n      </tr>\n    </thead>;\n  }\n}\n\n\n// default components ///////////////////////\n\nfunction DefaultInputHeaderCell(props) {\n\n  const {\n    input,\n    className\n  } = props;\n\n  const {\n    label,\n    inputExpression\n  } = input;\n\n  const actualClassName = (className || '') + ' input-cell';\n\n  return (\n    <th\n      data-col-id={ input.id }\n      className={ actualClassName }\n      key={ input.id }>\n      {\n        label ? (\n          <span className=\"input-label\" title=\"Input Label\">\n            { label }\n          </span>\n        ) : (\n          <span className=\"input-expression\" title=\"Input Expression\">\n            { inputExpression.text || '-' }\n          </span>\n        )\n      }\n    </th>\n  );\n}\n\n\nclass DefaultInputLabel extends Component {\n\n  constructor(props, context) {\n    super(props, context);\n\n    this._sheet = context.injector.get('sheet');\n  }\n\n  render() {\n\n    const root = this._sheet.getRoot(),\n          businessObject = root.businessObject;\n\n    const inputs = businessObject.input;\n\n    if (!inputs || !inputs.length) {\n      return null;\n    }\n\n    const colspan = businessObject.input.length;\n\n    return (\n      <th\n        className=\"input-cell inputs-label header\"\n        colspan={ colspan }\n      >\n        Input\n      </th>\n    );\n  }\n\n}\n\n\nfunction DefaultOutputHeaderCell(props) {\n\n  const {\n    output,\n    className\n  } = props;\n\n  const {\n    label,\n    name\n  } = output;\n\n  const actualClassName = (className || '') + ' output-cell';\n\n  return (\n    <th className={ actualClassName } key={ output.id }>\n      {\n        label ? (\n          <span className=\"output-label\" title=\"Output Label\">\n            { label }\n          </span>\n        ) : (\n          <span className=\"output-name\" title=\"Output Name\">\n            { name || '-' }\n          </span>\n        )\n      }\n    </th>\n  );\n}\n\n\n\nclass DefaultOutputLabel extends Component {\n\n  constructor(props, context) {\n    super(props, context);\n\n    this._sheet = context.injector.get('sheet');\n  }\n\n  render() {\n    const root = this._sheet.getRoot(),\n          businessObject = root.businessObject,\n          colspan = businessObject.output.length;\n\n    return (\n      <th\n        className=\"output-cell outputs-label header\"\n        colspan={ colspan }\n      >\n        Output\n      </th>\n    );\n  }\n\n}\n\n\nfunction DefaultTypeRefCell(props) {\n\n  const {\n    className,\n    element\n  } = props;\n\n  const actualClassName = className + ' type-ref';\n\n  return (\n    <th className={ actualClassName } title=\"Data Type\">\n      { element.typeRef }\n    </th>\n  );\n}"]}