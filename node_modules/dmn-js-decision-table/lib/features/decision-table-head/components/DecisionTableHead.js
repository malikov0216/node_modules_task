var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode, createTextVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { is, getBusinessObject } from 'dmn-js-shared/lib/util/ModelUtil';

import { Component } from 'inferno';

import { mixin } from 'table-js/lib/components';

import { ComponentWithSlots } from 'dmn-js-shared/lib/components/mixins';

var DecisionTableHead = function (_Component) {
  _inherits(DecisionTableHead, _Component);

  function DecisionTableHead(props, context) {
    _classCallCheck(this, DecisionTableHead);

    var _this = _possibleConstructorReturn(this, (DecisionTableHead.__proto__ || Object.getPrototypeOf(DecisionTableHead)).call(this, props, context));

    _this.onElementsChanged = function () {
      _this.forceUpdate();
    };

    mixin(_this, ComponentWithSlots);

    _this._sheet = context.injector.get('sheet');

    _this._changeSupport = context.changeSupport;
    return _this;
  }

  _createClass(DecisionTableHead, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var root = this._sheet.getRoot();

      this._changeSupport.onElementsChanged(root.id, this.onElementsChanged);
    }
  }, {
    key: 'componentWillUnmout',
    value: function componentWillUnmout() {
      var root = this._sheet.getRoot();

      this._changeSupport.offElementsChanged(root.id, this.onElementsChanged);
    }
  }, {
    key: 'render',
    value: function render(props) {
      var _this2 = this;

      var root = this._sheet.getRoot();

      if (!is(root, 'dmn:DMNElement')) {
        return null;
      }

      var businessObject = getBusinessObject(root);

      var inputs = businessObject.input,
          outputs = businessObject.output;

      return createVNode(1, 'thead', null, [createVNode(1, 'tr', null, [this.slotFills({
        type: 'cell',
        context: { cellType: 'before-label-cells' }
      }), this.slotFill({
        type: 'cell',
        context: { cellType: 'input-label' }
      }, DefaultInputLabel), this.slotFill({
        type: 'cell',
        context: { cellType: 'output-label' }
      }, DefaultOutputLabel), this.slotFills({
        type: 'cell',
        context: { cellType: 'after-label-cells' }
      })], 0), createVNode(1, 'tr', null, [inputs && inputs.map(function (input) {
        return _this2.slotFill({
          type: 'cell',
          context: {
            cellType: 'input-header',
            input: input
          },
          key: input.id
        }, DefaultInputHeaderCell);
      }), outputs.map(function (output) {
        return _this2.slotFill({
          type: 'cell',
          context: {
            cellType: 'output-header',
            output: output
          },
          key: output.id
        }, DefaultOutputHeaderCell);
      })], 0), createVNode(1, 'tr', null, [inputs && inputs.map(function (input, index) {
        var inputExpression = input.inputExpression;


        return _this2.slotFill({
          type: 'cell',
          context: {
            cellType: 'input-header-type-ref',
            element: inputExpression
          },
          className: 'input-cell',
          key: input.id
        }, DefaultTypeRefCell);
      }), outputs.map(function (output) {

        return _this2.slotFill({
          type: 'cell',
          context: {
            cellType: 'output-header-type-ref',
            element: output
          },
          className: 'output-cell',
          key: output.id
        }, DefaultTypeRefCell);
      })], 0)], 4);
    }
  }]);

  return DecisionTableHead;
}(Component);

// default components ///////////////////////

export default DecisionTableHead;
function DefaultInputHeaderCell(props) {
  var input = props.input,
      className = props.className;
  var label = input.label,
      inputExpression = input.inputExpression;


  var actualClassName = (className || '') + ' input-cell';

  return createVNode(1, 'th', actualClassName, label ? createVNode(1, 'span', 'input-label', label, 0, {
    'title': 'Input Label'
  }) : createVNode(1, 'span', 'input-expression', inputExpression.text || '-', 0, {
    'title': 'Input Expression'
  }), 0, {
    'data-col-id': input.id
  }, input.id);
}

var DefaultInputLabel = function (_Component2) {
  _inherits(DefaultInputLabel, _Component2);

  function DefaultInputLabel(props, context) {
    _classCallCheck(this, DefaultInputLabel);

    var _this3 = _possibleConstructorReturn(this, (DefaultInputLabel.__proto__ || Object.getPrototypeOf(DefaultInputLabel)).call(this, props, context));

    _this3._sheet = context.injector.get('sheet');
    return _this3;
  }

  _createClass(DefaultInputLabel, [{
    key: 'render',
    value: function render() {

      var root = this._sheet.getRoot(),
          businessObject = root.businessObject;

      var inputs = businessObject.input;

      if (!inputs || !inputs.length) {
        return null;
      }

      var colspan = businessObject.input.length;

      return createVNode(1, 'th', 'input-cell inputs-label header', createTextVNode('Input'), 2, {
        'colspan': colspan
      });
    }
  }]);

  return DefaultInputLabel;
}(Component);

function DefaultOutputHeaderCell(props) {
  var output = props.output,
      className = props.className;
  var label = output.label,
      name = output.name;


  var actualClassName = (className || '') + ' output-cell';

  return createVNode(1, 'th', actualClassName, label ? createVNode(1, 'span', 'output-label', label, 0, {
    'title': 'Output Label'
  }) : createVNode(1, 'span', 'output-name', name || '-', 0, {
    'title': 'Output Name'
  }), 0, null, output.id);
}

var DefaultOutputLabel = function (_Component3) {
  _inherits(DefaultOutputLabel, _Component3);

  function DefaultOutputLabel(props, context) {
    _classCallCheck(this, DefaultOutputLabel);

    var _this4 = _possibleConstructorReturn(this, (DefaultOutputLabel.__proto__ || Object.getPrototypeOf(DefaultOutputLabel)).call(this, props, context));

    _this4._sheet = context.injector.get('sheet');
    return _this4;
  }

  _createClass(DefaultOutputLabel, [{
    key: 'render',
    value: function render() {
      var root = this._sheet.getRoot(),
          businessObject = root.businessObject,
          colspan = businessObject.output.length;

      return createVNode(1, 'th', 'output-cell outputs-label header', createTextVNode('Output'), 2, {
        'colspan': colspan
      });
    }
  }]);

  return DefaultOutputLabel;
}(Component);

function DefaultTypeRefCell(props) {
  var className = props.className,
      element = props.element;


  var actualClassName = className + ' type-ref';

  return createVNode(1, 'th', actualClassName, element.typeRef, 0, {
    'title': 'Data Type'
  });
}
//# sourceMappingURL=DecisionTableHead.js.map