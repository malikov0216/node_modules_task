{"version":3,"sources":["../../../../src/features/simple-string-edit/components/SimpleStringEditContextMenuComponent.js"],"names":["Component","InputSelect","List","ValidatedInput","isInput","getInputOrOutputValues","parseString","DISJUNCTION","NEGATION","INPUT_VALUES_LABEL","OUTPUT_VALUES_LABEL","INPUT_ENTRY_VALUES_LABEL","SimpleStringEditContextMenuComponent","props","context","_modeling","injector","get","parsedString","element","businessObject","text","values","type","inputOrOutputValues","col","filteredValues","filter","includes","value","isInputClause","items","map","isChecked","isRemovable","group","concat","inputValue","length","state","unaryTestsType","isOutputValueInputChecked","debounceInput","debouncedEditCell","editCell","bind","addUnaryTestsListItem","onInput","onKeyDown","onOutputValueInputClick","onUnaryTestsListChanged","onUnaryTestsTypeChange","cell","getValues","join","setState","item","isValid","event","isEnter","keyCode","stopPropagation","preventDefault","parsedInput","newValues","newItems","options","label","isNegation","showRadio","selectNode","node","marginRight","array","indexOf"],"mappings":"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","file":"SimpleStringEditContextMenuComponent.js","sourcesContent":["import { Component } from 'inferno';\r\n\r\nimport InputSelect from 'dmn-js-shared/lib/components/InputSelect';\r\n\r\nimport List from 'dmn-js-shared/lib/components/List';\r\n\r\nimport ValidatedInput from 'dmn-js-shared/lib/components/ValidatedInput';\r\n\r\nimport { isInput } from 'dmn-js-shared/lib/util/ModelUtil';\r\n\r\nimport { getInputOrOutputValues, parseString } from '../Utils';\r\n\r\nconst DISJUNCTION = 'disjunction',\r\n      NEGATION = 'negation';\r\n\r\nconst INPUT_VALUES_LABEL = 'Predefined Values',\r\n      OUTPUT_VALUES_LABEL = 'Predefined Values',\r\n      INPUT_ENTRY_VALUES_LABEL = 'Custom Values';\r\n\r\n\r\nexport default class SimpleStringEditContextMenuComponent extends Component {\r\n\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this._modeling = context.injector.get('modeling');\r\n\r\n    let parsedString = parseString(props.context.element.businessObject.text);\r\n\r\n    // could not parse\r\n    if (!parsedString) {\r\n      parsedString = {\r\n        values: [],\r\n        type: DISJUNCTION\r\n      };\r\n    }\r\n\r\n    const inputOrOutputValues = getInputOrOutputValues(\r\n      props.context.element.col.businessObject\r\n    );\r\n\r\n    const filteredValues = parsedString.values.filter(value => {\r\n      return !includes(inputOrOutputValues, value);\r\n    });\r\n\r\n    const isInputClause = isInput(props.context.element.col);\r\n\r\n    let items = inputOrOutputValues.map(value => {\r\n      return {\r\n        value,\r\n        isChecked: includes(parsedString.values, value),\r\n        isRemovable: false,\r\n        group: isInputClause ? INPUT_VALUES_LABEL : OUTPUT_VALUES_LABEL\r\n      };\r\n    });\r\n\r\n    if (isInputClause) {\r\n      items = items.concat(filteredValues.map(value => {\r\n        return {\r\n          value,\r\n          isChecked: true,\r\n          isRemovable: true,\r\n          group: INPUT_ENTRY_VALUES_LABEL\r\n        };\r\n      }));\r\n    }\r\n\r\n    let inputValue = '';\r\n\r\n    if (\r\n      !isInputClause && parsedString.values.length &&\r\n      !includes(inputOrOutputValues, parsedString.values[0])\r\n    ) {\r\n      inputValue = parsedString.values[0];\r\n    }\r\n\r\n    this.state = {\r\n      items,\r\n      unaryTestsType: parsedString.type,\r\n      inputValue,\r\n      isOutputValueInputChecked: inputValue !== ''\r\n    };\r\n\r\n    const debounceInput = context.injector.get('debounceInput');\r\n\r\n    this.debouncedEditCell = debounceInput(this.editCell.bind(this));\r\n    this.editCell = this.editCell.bind(this);\r\n    this.addUnaryTestsListItem = this.addUnaryTestsListItem.bind(this);\r\n    this.onInput = this.onInput.bind(this);\r\n    this.onKeyDown = this.onKeyDown.bind(this);\r\n    this.onOutputValueInputClick = this.onOutputValueInputClick.bind(this);\r\n    this.onUnaryTestsListChanged = this.onUnaryTestsListChanged.bind(this);\r\n    this.onUnaryTestsTypeChange = this.onUnaryTestsTypeChange.bind(this);\r\n  }\r\n\r\n  editCell(cell, text) {\r\n    this._modeling.editCell(cell, text);\r\n  }\r\n\r\n  /**\r\n   * Change type of unary tests.\r\n   */\r\n  onUnaryTestsTypeChange(value) {\r\n    const { items } = this.state;\r\n\r\n    const values = getValues(items);\r\n\r\n    const { element } = this.props.context;\r\n\r\n    if (value === DISJUNCTION) {\r\n      this.editCell(\r\n        element.businessObject,\r\n        values.join(',')\r\n      );\r\n\r\n      this.setState({\r\n        unaryTestsType: DISJUNCTION\r\n      });\r\n    } else {\r\n      this.editCell(element.businessObject, `not(${ values.join(',') })`);\r\n\r\n      this.setState({\r\n        unaryTestsType: NEGATION\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change list of unary tests.\r\n   */\r\n  onUnaryTestsListChanged(items) {\r\n\r\n    // get checked items\r\n    const values = getValues(items);\r\n\r\n    const { element } = this.props.context;\r\n\r\n    const { unaryTestsType } = this.state;\r\n\r\n    if (unaryTestsType === DISJUNCTION) {\r\n      this.editCell(element.businessObject, values.join(','));\r\n    } else {\r\n      this.editCell(element.businessObject, `not(${ values.join(',') })`);\r\n    }\r\n\r\n    this.setState({\r\n      items,\r\n      isOutputValueInputChecked: false\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set output value to input value.\r\n   */\r\n  onOutputValueInputClick() {\r\n    const { element } = this.props.context;\r\n\r\n    const { inputValue, items } = this.state;\r\n\r\n    const parsedString = parseString(inputValue);\r\n\r\n    if (!parsedString || parsedString.values.length > 1) {\r\n      return;\r\n    }\r\n\r\n    this.editCell(element.businessObject, `${ parsedString.values.join('') }`);\r\n\r\n    // uncheck all other values\r\n    this.setState({\r\n      items: items.map(item => {\r\n        item.isChecked = false;\r\n\r\n        return item;\r\n      }),\r\n      isOutputValueInputChecked: true\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set output value if valid.\r\n   */\r\n  onInput({ isValid, value }) {\r\n    const { isOutputValueInputChecked } = this.state;\r\n\r\n    this.setState({\r\n      inputValue: value\r\n    });\r\n\r\n    const { element } = this.props.context;\r\n\r\n    if (!isInput(element) && isValid && isOutputValueInputChecked) {\r\n      this.debouncedEditCell(element.businessObject, value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add new value on ENTER.\r\n   */\r\n  onKeyDown({ isValid, event }) {\r\n\r\n    if (!isEnter(event.keyCode)) {\r\n      return;\r\n    }\r\n\r\n    const { element } = this.props.context;\r\n\r\n    const isInputClause = isInput(element.col);\r\n\r\n    // stop ENTER propagation (and ContextMenu close)\r\n    if (isInputClause || !isValid) {\r\n      event.stopPropagation();\r\n      event.preventDefault();\r\n    }\r\n\r\n    if (isValid) {\r\n      if (isInputClause) {\r\n        this.addUnaryTestsListItem();\r\n      } else {\r\n        this.onOutputValueInputClick();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add unary tests to list.\r\n   */\r\n  addUnaryTestsListItem() {\r\n    const { inputValue, items, unaryTestsType } = this.state;\r\n\r\n    const parsedInput = parseString(inputValue);\r\n\r\n    if (!parsedInput) {\r\n      return;\r\n    }\r\n\r\n    const { element } = this.props.context;\r\n\r\n    const values = getValues(items);\r\n\r\n    const newValues = [].concat(\r\n      values,\r\n      parsedInput.values\r\n    );\r\n\r\n    if (unaryTestsType === DISJUNCTION) {\r\n      this.editCell(element.businessObject, newValues.join(','));\r\n    } else {\r\n      this.editCell(element.businessObject, `not(${ newValues.join(',') })`);\r\n    }\r\n\r\n    const newItems = items.concat(parsedInput.values.map(value => {\r\n      return {\r\n        value,\r\n        isChecked: true,\r\n        isRemovable: true,\r\n        group: 'Custom Values'\r\n      };\r\n    }));\r\n\r\n    this.setState({\r\n      items: newItems,\r\n      inputValue: ''\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { element } = this.props.context;\r\n\r\n    const { inputValue, isOutputValueInputChecked, items, unaryTestsType } = this.state;\r\n\r\n    const options = [{\r\n      label: 'Match one',\r\n      value: DISJUNCTION\r\n    }, {\r\n      label: 'Match none',\r\n      value: NEGATION\r\n    }];\r\n\r\n    const isInputClause = isInput(element.col);\r\n\r\n    const isNegation = unaryTestsType === NEGATION;\r\n\r\n    const showRadio = !isInputClause && items.length > 0;\r\n\r\n    return (\r\n      <div class=\"simple-string-edit context-menu-container\">\r\n\r\n        <h3 class=\"dms-heading\">Edit String</h3>\r\n\r\n        {\r\n          isInputClause &&\r\n            <p>\r\n              <InputSelect\r\n                noInput={ true }\r\n                ref={ node => this.selectNode = node }\r\n                onChange={ this.onUnaryTestsTypeChange }\r\n                options={ options }\r\n                value={ isNegation ? NEGATION : DISJUNCTION } />\r\n            </p>\r\n        }\r\n\r\n        <List\r\n          onChange={ this.onUnaryTestsListChanged }\r\n          items={ items }\r\n          type={ isInputClause ? 'checkbox' : 'radio' } />\r\n\r\n        {\r\n          isInputClause\r\n            ? <h4 className=\"dms-heading\">Add Values</h4>\r\n            : <h4 className=\"dms-heading\">Set Value</h4>\r\n        }\r\n\r\n        <div className=\"dms-fill-row\">\r\n          {\r\n            showRadio && <input\r\n              checked={ isOutputValueInputChecked }\r\n              className=\"cursor-pointer\"\r\n              onClick={ this.onOutputValueInputClick }\r\n              type=\"radio\"\r\n              style={ {\r\n                marginRight: '8px'\r\n              } } />\r\n          }\r\n\r\n          <ValidatedInput\r\n            className=\"dms-block\"\r\n            onKeyDown={ this.onKeyDown }\r\n            onInput={ this.onInput }\r\n            placeholder={ isInputClause ? '\"value\", \"value\", ...' : '\"value\"' }\r\n            type=\"text\"\r\n            validate={ value => {\r\n              if (!parseString(value)) {\r\n                return 'Strings must be in double quotes.';\r\n              }\r\n            } }\r\n            value={ inputValue } />\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n// helpers //////////////////////\r\n\r\nfunction isEnter(keyCode) {\r\n  return keyCode === 13;\r\n}\r\n\r\n/**\r\n * Get array of actual values from array of items.\r\n *\r\n * @param {Array} items - Array of items.\r\n */\r\nfunction getValues(items) {\r\n  return items\r\n    .filter(item => item.isChecked)\r\n    .map(item => item.value);\r\n}\r\n\r\nfunction includes(array, value) {\r\n  return array.indexOf(value) !== -1;\r\n}"]}