{"version":3,"sources":["../../../src/features/simple-string-edit/Utils.js"],"names":["isInput","parseString","string","isEmptyString","trim","type","values","split","result","openString","forEach","value","test","push","matches","match","getInputOrOutputValues","inputOrOutput","inputOrOutputValues","inputValues","outputValues","text","map"],"mappings":"AAAA,SAASA,OAAT,QAAwB,kCAAxB;;AAEA;;;;;;;;;;;;;;;;AAgBA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6B;;AAElC;AACA,MAAI,CAACA,MAAD,IAAWC,cAAcD,OAAOE,IAAP,EAAd,CAAf,EAA6C;AAC3C,WAAO;AACLC,YAAM,aADD;AAELC,cAAQ;AAFH,KAAP;AAID;;AAED;AACA,MAAIA,SAASJ,OAAOK,KAAP,CAAa,GAAb,CAAb;;AAEA,MAAMC,SAAS;AACbH,UAAM,aADO;AAEbC,YAAQ;AAFK,GAAf;;AAKA,MAAIG,aAAa,EAAjB;;AAEAH,SAAOI,OAAP,CAAe,iBAAS;AACtBD,kBAAcE,KAAd;;AAEA,QAAI,YAAYC,IAAZ,CAAiBH,WAAWL,IAAX,EAAjB,CAAJ,EAAyC;AACvCI,aAAOF,MAAP,CAAcO,IAAd,CAAmBJ,WAAWL,IAAX,EAAnB;;AAEAK,mBAAa,EAAb;AACD,KAJD,MAIO;AACLA,oBAAc,GAAd;AACD;AACF,GAVD;;AAYA,MAAI,CAACA,UAAL,EAAiB;AACf,WAAOD,MAAP;AACD;;AAED;AACAA,SAAOH,IAAP,GAAc,UAAd;AACAG,SAAOF,MAAP,GAAgB,EAAhB;;AAEAG,eAAa,EAAb;;AAEA,MAAMK,UAAUZ,OAAOa,KAAP,CAAa,qBAAb,CAAhB;;AAEA,MAAID,OAAJ,EAAa;AACXR,aAASQ,QAAQ,CAAR,EAAWP,KAAX,CAAiB,GAAjB,CAAT;;AAEAD,WAAOI,OAAP,CAAe,iBAAS;AACtBD,oBAAcE,KAAd;;AAEA,UAAI,YAAYC,IAAZ,CAAiBH,WAAWL,IAAX,EAAjB,CAAJ,EAAyC;AACvCI,eAAOF,MAAP,CAAcO,IAAd,CAAmBJ,WAAWL,IAAX,EAAnB;;AAEAK,qBAAa,EAAb;AACD,OAJD,MAIO;AACLA,sBAAc,GAAd;AACD;AACF,KAVD;;AAYA,QAAI,CAACA,UAAL,EAAiB;AACf,aAAOD,MAAP;AACD;AACF;AACF;;AAED;AACA,OAAO,SAASQ,sBAAT,CAAgCC,aAAhC,EAA+C;AACpD,MAAMC,sBACJlB,QAAQiB,aAAR,IACEA,cAAcE,WADhB,GAEEF,cAAcG,YAHlB;;AAKA,MAAI,CAACF,mBAAD,IAAwBf,cAAce,oBAAoBG,IAAlC,CAA5B,EAAqE;AACnE,WAAO,EAAP;AACD,GAFD,MAEO;AACL,WAAOH,oBAAoBG,IAApB,CAAyBd,KAAzB,CAA+B,GAA/B,EAAoCe,GAApC,CAAwC;AAAA,aAASX,MAAMP,IAAN,EAAT;AAAA,KAAxC,CAAP;AACD;AACF;;AAED,SAASD,aAAT,CAAuBD,MAAvB,EAA+B;AAC7B,SAAOA,WAAW,EAAlB;AACD","file":"Utils.js","sourcesContent":["import { isInput } from 'dmn-js-shared/lib/util/ModelUtil';\r\n\r\n/**\r\n * Parse input/output entry string to unary tests and type of unary tests.\r\n *\r\n * Example:\r\n *\r\n * not(\"foo\", \"bar\")\r\n *\r\n * returns\r\n *\r\n * {\r\n *   type: 'negation',\r\n *   values: [ \"foo\", \"bar, baz\" ]\r\n * }\r\n *\r\n * @param {String} string - Input/Output entry as string e.g. \"foo\", \"bar\".\r\n */\r\nexport function parseString(string) {\r\n\r\n  // empty string or no string at all\r\n  if (!string || isEmptyString(string.trim())) {\r\n    return {\r\n      type: 'disjunction',\r\n      values: []\r\n    };\r\n  }\r\n\r\n  // disjunction\r\n  let values = string.split(',');\r\n\r\n  const result = {\r\n    type: 'disjunction',\r\n    values: []\r\n  };\r\n\r\n  let openString = '';\r\n\r\n  values.forEach(value => {\r\n    openString += value;\r\n\r\n    if (/^\"[^\"]*\"$/.test(openString.trim())) {\r\n      result.values.push(openString.trim());\r\n\r\n      openString = '';\r\n    } else {\r\n      openString += ',';\r\n    }\r\n  });\r\n\r\n  if (!openString) {\r\n    return result;\r\n  }\r\n\r\n  // negation\r\n  result.type = 'negation';\r\n  result.values = [];\r\n\r\n  openString = '';\r\n\r\n  const matches = string.match(/^\\s*not\\((.*)\\)\\s*$/);\r\n\r\n  if (matches) {\r\n    values = matches[1].split(',');\r\n\r\n    values.forEach(value => {\r\n      openString += value;\r\n\r\n      if (/^\"[^\"]*\"$/.test(openString.trim())) {\r\n        result.values.push(openString.trim());\r\n\r\n        openString = '';\r\n      } else {\r\n        openString += ',';\r\n      }\r\n    });\r\n\r\n    if (!openString) {\r\n      return result;\r\n    }\r\n  }\r\n}\r\n\r\n// TODO(philippfromme): seperate when refactoring component\r\nexport function getInputOrOutputValues(inputOrOutput) {\r\n  const inputOrOutputValues =\r\n    isInput(inputOrOutput) ?\r\n      inputOrOutput.inputValues :\r\n      inputOrOutput.outputValues;\r\n\r\n  if (!inputOrOutputValues || isEmptyString(inputOrOutputValues.text)) {\r\n    return [];\r\n  } else {\r\n    return inputOrOutputValues.text.split(',').map(value => value.trim());\r\n  }\r\n}\r\n\r\nfunction isEmptyString(string) {\r\n  return string === '';\r\n}"]}