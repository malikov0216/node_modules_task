{"version":3,"sources":["../../../src/features/simple-mode/SimpleMode.js"],"names":["SimpleModeButtonComponent","SimpleMode","components","contextMenu","elementRegistry","eventBus","renderer","_providers","onGetComponent","on","element","node","getBoundingClientRect","left","top","width","height","container","getContainer","open","x","parentNode","scrollLeft","y","scrollTop","contextMenuType","offset","event","e","id","isCmd","get","fire","preventDefault","provider","push","reduce","canSimpleEdit","$inject","altKey","ctrlKey","metaKey"],"mappings":";;;;AAAA,OAAOA,yBAAP,MAAsC,wCAAtC;;IAEqBC,U;AAEnB,sBAAYC,UAAZ,EAAwBC,WAAxB,EAAqCC,eAArC,EAAsDC,QAAtD,EAAgEC,QAAhE,EAA0E;AAAA;;AAExE,SAAKC,UAAL,GAAkB,EAAlB;;AAEAL,eAAWM,cAAX,CAA0B,cAA1B,EAA0C,YAAM;AAC9C,aAAOR,yBAAP;AACD,KAFD;;AAIAK,aAASI,EAAT,CAAY,iBAAZ,EAA+B,gBAAuB;AAAA,UAApBC,OAAoB,QAApBA,OAAoB;AAAA,UAAXC,IAAW,QAAXA,IAAW;;AAAA,kCACfA,KAAKC,qBAAL,EADe;AAAA,UAC5CC,IAD4C,yBAC5CA,IAD4C;AAAA,UACtCC,GADsC,yBACtCA,GADsC;AAAA,UACjCC,KADiC,yBACjCA,KADiC;AAAA,UAC1BC,MAD0B,yBAC1BA,MAD0B;;AAGpD,UAAMC,YAAYX,SAASY,YAAT,EAAlB;;AAEAf,kBAAYgB,IAAZ,CAAiB;AACfC,WAAGP,OAAOI,UAAUI,UAAV,CAAqBC,UADhB;AAEfC,WAAGT,MAAMG,UAAUI,UAAV,CAAqBG,SAFf;AAGfT,oBAHe;AAIfC;AAJe,OAAjB,EAKG;AACDS,yBAAiB,kBADhB;AAEDf,wBAFC;AAGDgB,gBAAQ;AACNN,aAAG,CADG;AAENG,aAAG;AAFG;AAHP,OALH;AAaD,KAlBD;;AAoBAlB,aAASI,EAAT,CAAY,YAAZ,EAA0B,aAAK;AAAA,UAG3BkB,KAH2B,GAMzBC,CANyB,CAG3BD,KAH2B;AAAA,UAI3BhB,IAJ2B,GAMzBiB,CANyB,CAI3BjB,IAJ2B;AAAA,UAK3BkB,EAL2B,GAMzBD,CANyB,CAK3BC,EAL2B;;;AAQ7B,UAAIC,MAAMH,KAAN,CAAJ,EAAkB;AAChB,YAAMjB,UAAUN,gBAAgB2B,GAAhB,CAAoBF,EAApB,CAAhB;;AAEA,YAAInB,OAAJ,EAAa;AACXL,mBAAS2B,IAAT,CAAc,iBAAd,EAAiC;AAC/BrB,sBAD+B;AAE/BD;AAF+B,WAAjC;AAID;;AAED;AACAkB,UAAEK,cAAF;AACD;AACF,KArBD;AAsBD;;;;qCAEgBC,Q,EAAU;AACzB,WAAK3B,UAAL,CAAgB4B,IAAhB,CAAqBD,QAArB;AACD;;;kCAEaxB,O,EAAS;AACrB,aAAO,KAAKH,UAAL,CAAgB6B,MAAhB,CAAuB,UAACC,aAAD,EAAgBH,QAAhB,EAA6B;AACzD,eAAOG,iBAAiBH,SAASxB,OAAT,CAAxB;AACD,OAFM,EAEJ,KAFI,CAAP;AAGD;;;;;;eA9DkBT,U;;;AAiErBA,WAAWqC,OAAX,GAAqB,CACnB,YADmB,EAEnB,aAFmB,EAGnB,iBAHmB,EAInB,UAJmB,EAKnB,UALmB,CAArB;;AASA;;AAEA,OAAO,SAASR,KAAT,CAAeH,KAAf,EAAsB;AAC3B;AACA;AACA,MAAIA,MAAMY,MAAV,EAAkB;AAChB,WAAO,KAAP;AACD;;AAED,SAAOZ,MAAMa,OAAN,IAAiBb,MAAMc,OAA9B;AACD","file":"SimpleMode.js","sourcesContent":["import SimpleModeButtonComponent from './components/SimpleModeButtonComponent';\r\n\r\nexport default class SimpleMode {\r\n\r\n  constructor(components, contextMenu, elementRegistry, eventBus, renderer) {\r\n\r\n    this._providers = [];\r\n\r\n    components.onGetComponent('table.before', () => {\r\n      return SimpleModeButtonComponent;\r\n    });\r\n\r\n    eventBus.on('simpleMode.open', ({ element, node }) => {\r\n      const { left, top, width, height } = node.getBoundingClientRect();\r\n\r\n      const container = renderer.getContainer();\r\n\r\n      contextMenu.open({\r\n        x: left + container.parentNode.scrollLeft,\r\n        y: top + container.parentNode.scrollTop,\r\n        width,\r\n        height\r\n      }, {\r\n        contextMenuType: 'simple-mode-edit',\r\n        element,\r\n        offset: {\r\n          x: 4,\r\n          y: 4\r\n        }\r\n      });\r\n    });\r\n\r\n    eventBus.on('cell.click', e => {\r\n\r\n      const {\r\n        event,\r\n        node,\r\n        id\r\n      } = e;\r\n\r\n      if (isCmd(event)) {\r\n        const element = elementRegistry.get(id);\r\n\r\n        if (element) {\r\n          eventBus.fire('simpleMode.open', {\r\n            node,\r\n            element\r\n          });\r\n        }\r\n\r\n        // prevent focus\r\n        e.preventDefault();\r\n      }\r\n    });\r\n  }\r\n\r\n  registerProvider(provider) {\r\n    this._providers.push(provider);\r\n  }\r\n\r\n  canSimpleEdit(element) {\r\n    return this._providers.reduce((canSimpleEdit, provider) => {\r\n      return canSimpleEdit || provider(element);\r\n    }, false);\r\n  }\r\n}\r\n\r\nSimpleMode.$inject = [\r\n  'components',\r\n  'contextMenu',\r\n  'elementRegistry',\r\n  'eventBus',\r\n  'renderer'\r\n];\r\n\r\n\r\n// helpers //////////\r\n\r\nexport function isCmd(event) {\r\n  // ensure we don't react to AltGr\r\n  // (mapped to CTRL + ALT)\r\n  if (event.altKey) {\r\n    return false;\r\n  }\r\n\r\n  return event.ctrlKey || event.metaKey;\r\n}"]}