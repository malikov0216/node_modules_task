var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

import { assign } from 'min-dash';

import { getNodeById } from '../../cell-selection/CellSelectionUtil';

import { isInput, isOutput } from 'dmn-js-shared/lib/util/ModelUtil';

var OFFSET = 4;

var SimpleModeButtonComponent = function (_Component) {
  _inherits(SimpleModeButtonComponent, _Component);

  function SimpleModeButtonComponent(props, context) {
    _classCallCheck(this, SimpleModeButtonComponent);

    var _this = _possibleConstructorReturn(this, (SimpleModeButtonComponent.__proto__ || Object.getPrototypeOf(SimpleModeButtonComponent)).call(this, props, context));

    _this.state = {
      top: 0,
      left: 0,
      isVisible: false,
      isDisabled: true
    };

    var injector = context.injector;


    var eventBus = _this._eventBus = injector.get('eventBus'),
        simpleMode = injector.get('simpleMode');

    _this._renderer = injector.get('renderer');

    _this._selection = context.injector.get('selection');

    _this.updatePosition = _this.updatePosition.bind(_this);

    eventBus.on('selection.changed', function (_ref) {
      var selection = _ref.selection;

      if (!selection || !simpleMode.canSimpleEdit(selection)) {
        _this.setState({
          isVisible: false
        });

        return;
      }

      var isDisabled;

      _this.setState({
        isVisible: true,
        selection: selection
      }, _this.updatePosition);

      var expressionLanguage = getExpressionLanguage(selection);

      if (isDefaultExpressionLanguage(selection, expressionLanguage)) {
        isDisabled = false;
      } else {
        isDisabled = true;
      }

      _this.setState({
        isVisible: true,
        selection: selection,
        isDisabled: isDisabled
      }, _this.updatePosition);
    });

    _this.onClick = _this.onClick.bind(_this);
    return _this;
  }

  // position button always on opposite site of context menu


  _createClass(SimpleModeButtonComponent, [{
    key: 'updatePosition',
    value: function updatePosition() {
      var selection = this.state.selection;


      if (!selection || !this.node) {
        return;
      }

      var container = this._container = this._renderer.getContainer();

      var cellNode = getNodeById(selection.id, container);

      var cellBounds = cellNode.getBoundingClientRect();

      var nodeBounds = this.node.getBoundingClientRect();

      var containerBounds = container.getBoundingClientRect();

      var scrollLeft = container.scrollLeft,
          scrollTop = container.scrollTop;


      var nodePosition = {};

      if (cellBounds.left + cellBounds.width / 2 > containerBounds.width / 2) {
        nodePosition.left = window.scrollX - containerBounds.left + cellBounds.left - nodeBounds.width + OFFSET + scrollLeft + 'px';
      } else {
        nodePosition.left = window.scrollX - containerBounds.left + cellBounds.left + cellBounds.width - OFFSET + scrollLeft + 'px';
      }

      if (cellBounds.top + cellBounds.height / 2 > containerBounds.height / 2) {
        nodePosition.top = window.scrollY - containerBounds.top + cellBounds.top - nodeBounds.height + OFFSET + scrollTop + 'px';
      } else {
        nodePosition.top = window.scrollY - containerBounds.top + cellBounds.top - OFFSET + scrollTop + 'px';
      }

      assign(this.node.style, nodePosition);
    }
  }, {
    key: 'onClick',
    value: function onClick() {
      var isDisabled = this.state.isDisabled;


      if (isDisabled) {
        return;
      }

      var element = this._selection.get();

      if (!element) {
        return;
      }

      this._eventBus.fire('simpleMode.open', {
        element: element,
        node: getNodeById(element.id, this._container)
      });

      this.setState({
        isVisible: false
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _state = this.state,
          isDisabled = _state.isDisabled,
          isVisible = _state.isVisible,
          top = _state.top,
          left = _state.left;


      var classes = ['simple-mode-button', 'no-deselect'];

      if (isDisabled) {
        classes.push('disabled');
      }

      return isVisible ? createVNode(1, 'div', classes.join(' '), createVNode(1, 'span', 'dmn-icon-edit'), 2, {
        'onClick': this.onClick,
        'style': { top: top, left: left },
        'title': isDisabled ? 'Editing not supported for set expression language' : 'Edit'
      }, null, function (node) {
        return _this2.node = node;
      }) : null;
    }
  }]);

  return SimpleModeButtonComponent;
}(Component);

// helpers //////////////////////

/**
 * Return set expression language if found.
 *
 * @param {Cell} cell - Cell.
 */


export default SimpleModeButtonComponent;
function getExpressionLanguage(cell) {
  return cell.businessObject.expressionLanguage;
}

function isDefaultExpressionLanguage(cell, expressionLanguage) {
  if (isInput(cell.col)) {
    return !expressionLanguage || expressionLanguage === 'feel';
  } else if (isOutput(cell.col)) {
    return !expressionLanguage || expressionLanguage === 'juel';
  }
}
//# sourceMappingURL=SimpleModeButtonComponent.js.map