{"version":3,"sources":["../../../../src/features/simple-mode/components/SimpleModeButtonComponent.js"],"names":["Component","assign","getNodeById","isInput","isOutput","OFFSET","SimpleModeButtonComponent","props","context","state","top","left","isVisible","isDisabled","injector","eventBus","_eventBus","get","simpleMode","_renderer","_selection","updatePosition","bind","on","selection","canSimpleEdit","setState","expressionLanguage","getExpressionLanguage","isDefaultExpressionLanguage","onClick","node","container","_container","getContainer","cellNode","id","cellBounds","getBoundingClientRect","nodeBounds","containerBounds","scrollLeft","scrollTop","nodePosition","width","window","scrollX","height","scrollY","style","element","fire","classes","push","join","cell","businessObject","col"],"mappings":"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","file":"SimpleModeButtonComponent.js","sourcesContent":["import { Component } from 'inferno';\r\n\r\nimport { assign } from 'min-dash';\r\n\r\nimport {\r\n  getNodeById\r\n} from '../../cell-selection/CellSelectionUtil';\r\n\r\nimport { isInput, isOutput } from 'dmn-js-shared/lib/util/ModelUtil';\r\n\r\nconst OFFSET = 4;\r\n\r\n\r\nexport default class SimpleModeButtonComponent extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.state = {\r\n      top: 0,\r\n      left: 0,\r\n      isVisible: false,\r\n      isDisabled: true\r\n    };\r\n\r\n    const { injector } = context;\r\n\r\n    const eventBus = this._eventBus = injector.get('eventBus'),\r\n          simpleMode = injector.get('simpleMode');\r\n\r\n    this._renderer = injector.get('renderer');\r\n\r\n    this._selection = context.injector.get('selection');\r\n\r\n    this.updatePosition = this.updatePosition.bind(this);\r\n\r\n    eventBus.on('selection.changed', ({ selection }) => {\r\n      if (!selection || !simpleMode.canSimpleEdit(selection)) {\r\n        this.setState({\r\n          isVisible: false\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      var isDisabled;\r\n\r\n      this.setState({\r\n        isVisible: true,\r\n        selection\r\n      }, this.updatePosition);\r\n\r\n      const expressionLanguage = getExpressionLanguage(selection);\r\n\r\n      if (isDefaultExpressionLanguage(selection, expressionLanguage)) {\r\n        isDisabled = false;\r\n      } else {\r\n        isDisabled = true;\r\n      }\r\n\r\n      this.setState({\r\n        isVisible: true,\r\n        selection,\r\n        isDisabled\r\n      }, this.updatePosition);\r\n    });\r\n\r\n    this.onClick = this.onClick.bind(this);\r\n  }\r\n\r\n  // position button always on opposite site of context menu\r\n  updatePosition() {\r\n    const { selection } = this.state;\r\n\r\n    if (!selection || !this.node) {\r\n      return;\r\n    }\r\n\r\n    const container = this._container = this._renderer.getContainer();\r\n\r\n    const cellNode = getNodeById(selection.id, container);\r\n\r\n    const cellBounds = cellNode.getBoundingClientRect();\r\n\r\n    const nodeBounds = this.node.getBoundingClientRect();\r\n\r\n    const containerBounds = container.getBoundingClientRect();\r\n\r\n    const { scrollLeft, scrollTop } = container;\r\n\r\n    const nodePosition = {};\r\n\r\n    if (cellBounds.left + (cellBounds.width / 2) > containerBounds.width / 2) {\r\n      nodePosition.left =\r\n        (window.scrollX\r\n        - containerBounds.left\r\n        + cellBounds.left\r\n        - nodeBounds.width\r\n        + OFFSET\r\n        + scrollLeft)\r\n        + 'px';\r\n    } else {\r\n      nodePosition.left =\r\n        (window.scrollX\r\n        - containerBounds.left\r\n        + cellBounds.left\r\n        + cellBounds.width\r\n        - OFFSET\r\n        + scrollLeft)\r\n        + 'px';\r\n    }\r\n\r\n    if (cellBounds.top + (cellBounds.height / 2) > containerBounds.height / 2) {\r\n      nodePosition.top =\r\n        (window.scrollY\r\n        - containerBounds.top\r\n        + cellBounds.top\r\n        - nodeBounds.height\r\n        + OFFSET\r\n        + scrollTop)\r\n        + 'px';\r\n    } else {\r\n      nodePosition.top =\r\n        (window.scrollY\r\n        - containerBounds.top\r\n        + cellBounds.top\r\n        - OFFSET\r\n        + scrollTop)\r\n        + 'px';\r\n    }\r\n\r\n    assign(this.node.style, nodePosition);\r\n  }\r\n\r\n  onClick() {\r\n    const { isDisabled } = this.state;\r\n\r\n    if (isDisabled) {\r\n      return;\r\n    }\r\n\r\n    const element = this._selection.get();\r\n\r\n    if (!element) {\r\n      return;\r\n    }\r\n\r\n    this._eventBus.fire('simpleMode.open', {\r\n      element,\r\n      node: getNodeById(element.id, this._container)\r\n    });\r\n\r\n    this.setState({\r\n      isVisible: false\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { isDisabled, isVisible, top, left } = this.state;\r\n\r\n    const classes = [\r\n      'simple-mode-button',\r\n      'no-deselect'\r\n    ];\r\n\r\n    if (isDisabled) {\r\n      classes.push('disabled');\r\n    }\r\n\r\n    return (\r\n      isVisible\r\n        ? <div\r\n          className={ classes.join(' ') }\r\n          onClick={ this.onClick }\r\n          ref={ node => this.node = node }\r\n          style={ { top, left } }\r\n          title={ isDisabled\r\n            ? 'Editing not supported for set expression language'\r\n            : 'Edit' }><span className=\"dmn-icon-edit\"></span></div>\r\n        : null\r\n    );\r\n  }\r\n}\r\n\r\n\r\n// helpers //////////////////////\r\n\r\n/**\r\n * Return set expression language if found.\r\n *\r\n * @param {Cell} cell - Cell.\r\n */\r\nfunction getExpressionLanguage(cell) {\r\n  return cell.businessObject.expressionLanguage;\r\n}\r\n\r\nfunction isDefaultExpressionLanguage(cell, expressionLanguage) {\r\n  if (isInput(cell.col)) {\r\n    return !expressionLanguage || expressionLanguage === 'feel';\r\n  } else if (isOutput(cell.col)) {\r\n    return !expressionLanguage || expressionLanguage === 'juel';\r\n  }\r\n}"]}