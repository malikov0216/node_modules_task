{"version":3,"sources":["../../../../src/features/modeling/behavior/IdClaimBehavior.js"],"names":["CommandInterceptor","isArray","IdClaimBehavior","eventBus","moddle","modeling","_ids","ids","_modeling","preExecute","context","event","element","row","col","claimId","businessObject","cells","forEach","cell","id","assigned","$descriptor","properties","value","property","name","v","$type","$inject"],"mappings":";;;;;;;;AAAA,OAAOA,kBAAP,MAA+B,2CAA/B;;AAEA,SAASC,OAAT,QAAwB,UAAxB;;IAGqBC,e;;;AAEnB,2BAAYC,QAAZ,EAAsBC,MAAtB,EAA8BC,QAA9B,EAAwC;AAAA;;AAAA,kIAChCF,QADgC;;AAGtC,UAAKG,IAAL,GAAYF,OAAOG,GAAnB;AACA,UAAKC,SAAL,GAAiBH,QAAjB;;AAEA,UAAKI,UAAL,CAAgB,CACd,SADc,EAEd,SAFc,CAAhB,EAGG,iBAAS;AACV,UAAMC,UAAUC,MAAMD,OAAtB;AAAA,UACME,UAAUF,QAAQG,GAAR,IAAeH,QAAQI,GADvC;;AAGA,YAAKC,OAAL,CAAaH,QAAQI,cAArB;;AAEA,UAAIJ,QAAQK,KAAZ,EAAmB;AACjBL,gBAAQK,KAAR,CAAcC,OAAd,CAAsB;AAAA,iBAAQ,MAAKH,OAAL,CAAaI,KAAKH,cAAlB,CAAR;AAAA,SAAtB;AACD;AACF,KAZD;AANsC;AAmBvC;;;;4BAEOA,c,EAAgB;AAAA;;AAEtB,UAAIA,eAAeI,EAAf,IAAqB,CAAC,KAAKd,IAAL,CAAUe,QAAV,CAAmBL,eAAeI,EAAlC,CAA1B,EAAiE;AAC/D,aAAKZ,SAAL,CAAeO,OAAf,CAAuBC,eAAeI,EAAtC,EAA0CJ,cAA1C;AACD;;AAEDA,qBAAeM,WAAf,CAA2BC,UAA3B,CAAsCL,OAAtC,CAA8C,oBAAY;AACxD,YAAMM,QAAQR,eAAeS,SAASC,IAAxB,CAAd;;AAEA;AACA,YAAI,CAACF,KAAL,EAAY;AACV;AACD;;AAED;AACA,YAAIvB,QAAQuB,KAAR,CAAJ,EAAoB;AAClBA,gBAAMN,OAAN,CAAc;AAAA,mBAAK,OAAKH,OAAL,CAAaY,CAAb,CAAL;AAAA,WAAd;AACD;;AAED;AACA,YAAIH,MAAMI,KAAV,EAAiB;AACf,iBAAKb,OAAL,CAAaS,KAAb;AACD;AACF,OAjBD;AAmBD;;;;EAhD0CxB,kB;;eAAxBE,e;;;AAmDrBA,gBAAgB2B,OAAhB,GAA0B,CAAE,UAAF,EAAc,QAAd,EAAwB,UAAxB,CAA1B","file":"IdClaimBehavior.js","sourcesContent":["import CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\r\n\r\nimport { isArray } from 'min-dash';\r\n\r\n\r\nexport default class IdClaimBehavior extends CommandInterceptor {\r\n\r\n  constructor(eventBus, moddle, modeling) {\r\n    super(eventBus);\r\n\r\n    this._ids = moddle.ids;\r\n    this._modeling = modeling;\r\n\r\n    this.preExecute([\r\n      'row.add',\r\n      'col.add'\r\n    ], event => {\r\n      const context = event.context,\r\n            element = context.row || context.col;\r\n\r\n      this.claimId(element.businessObject);\r\n\r\n      if (element.cells) {\r\n        element.cells.forEach(cell => this.claimId(cell.businessObject));\r\n      }\r\n    });\r\n  }\r\n\r\n  claimId(businessObject) {\r\n\r\n    if (businessObject.id && !this._ids.assigned(businessObject.id)) {\r\n      this._modeling.claimId(businessObject.id, businessObject);\r\n    }\r\n\r\n    businessObject.$descriptor.properties.forEach(property => {\r\n      const value = businessObject[property.name];\r\n\r\n      // not set\r\n      if (!value) {\r\n        return;\r\n      }\r\n\r\n      // array of moddle elements\r\n      if (isArray(value)) {\r\n        value.forEach(v => this.claimId(v));\r\n      }\r\n\r\n      // moddle element\r\n      if (value.$type) {\r\n        this.claimId(value);\r\n      }\r\n    });\r\n\r\n  }\r\n}\r\n\r\nIdClaimBehavior.$inject = [ 'eventBus', 'moddle', 'modeling' ];"]}