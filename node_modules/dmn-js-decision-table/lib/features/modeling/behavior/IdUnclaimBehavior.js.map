{"version":3,"sources":["../../../../src/features/modeling/behavior/IdUnclaimBehavior.js"],"names":["CommandInterceptor","isArray","IdUnclaimBehavior","eventBus","modeling","_modeling","preExecute","context","event","element","row","col","unclaimId","businessObject","cells","forEach","cell","id","$descriptor","properties","value","property","name","v","$type","$inject"],"mappings":";;;;;;;;AAAA,OAAOA,kBAAP,MAA+B,2CAA/B;;AAEA,SAASC,OAAT,QAAwB,UAAxB;;IAGqBC,iB;;;AAEnB,6BAAYC,QAAZ,EAAsBC,QAAtB,EAAgC;AAAA;;AAAA,sIACxBD,QADwB;;AAG9B,UAAKE,SAAL,GAAiBD,QAAjB;;AAEA,UAAKE,UAAL,CAAgB,CAAE,YAAF,EAAgB,YAAhB,CAAhB,EAAgD,iBAAS;AACvD,UAAMC,UAAUC,MAAMD,OAAtB;AAAA,UACME,UAAUF,QAAQG,GAAR,IAAeH,QAAQI,GADvC;;AAGA,YAAKC,SAAL,CAAeH,QAAQI,cAAvB;;AAEA,UAAIJ,QAAQK,KAAZ,EAAmB;AACjBL,gBAAQK,KAAR,CAAcC,OAAd,CAAsB;AAAA,iBAAQ,MAAKH,SAAL,CAAeI,KAAKH,cAApB,CAAR;AAAA,SAAtB;AACD;AACF,KATD;AAL8B;AAe/B;;;;8BAESA,c,EAAgB;AAAA;;AAExB,UAAIA,eAAeI,EAAnB,EAAuB;AACrB,aAAKZ,SAAL,CAAeO,SAAf,CAAyBC,eAAeI,EAAxC,EAA4CJ,cAA5C;AACD;;AAEDA,qBAAeK,WAAf,CAA2BC,UAA3B,CAAsCJ,OAAtC,CAA8C,oBAAY;AACxD,YAAMK,QAAQP,eAAeQ,SAASC,IAAxB,CAAd;;AAEA;AACA,YAAI,CAACF,KAAL,EAAY;AACV;AACD;;AAED;AACA,YAAInB,QAAQmB,KAAR,CAAJ,EAAoB;AAClBA,gBAAML,OAAN,CAAc;AAAA,mBAAK,OAAKH,SAAL,CAAeW,CAAf,CAAL;AAAA,WAAd;AACD;;AAED;AACA,YAAIH,MAAMI,KAAV,EAAiB;AACf,iBAAKZ,SAAL,CAAeQ,KAAf;AACD;AACF,OAjBD;AAmBD;;;;EA5C4CpB,kB;;eAA1BE,iB;;;AA+CrBA,kBAAkBuB,OAAlB,GAA4B,CAAE,UAAF,EAAc,UAAd,CAA5B","file":"IdUnclaimBehavior.js","sourcesContent":["import CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\r\n\r\nimport { isArray } from 'min-dash';\r\n\r\n\r\nexport default class IdUnclaimBehavior extends CommandInterceptor {\r\n\r\n  constructor(eventBus, modeling) {\r\n    super(eventBus);\r\n\r\n    this._modeling = modeling;\r\n\r\n    this.preExecute([ 'row.remove', 'col.remove' ], event => {\r\n      const context = event.context,\r\n            element = context.row || context.col;\r\n\r\n      this.unclaimId(element.businessObject);\r\n\r\n      if (element.cells) {\r\n        element.cells.forEach(cell => this.unclaimId(cell.businessObject));\r\n      }\r\n    });\r\n  }\r\n\r\n  unclaimId(businessObject) {\r\n\r\n    if (businessObject.id) {\r\n      this._modeling.unclaimId(businessObject.id, businessObject);\r\n    }\r\n\r\n    businessObject.$descriptor.properties.forEach(property => {\r\n      const value = businessObject[property.name];\r\n\r\n      // not set\r\n      if (!value) {\r\n        return;\r\n      }\r\n\r\n      // array of moddle elements\r\n      if (isArray(value)) {\r\n        value.forEach(v => this.unclaimId(v));\r\n      }\r\n\r\n      // moddle element\r\n      if (value.$type) {\r\n        this.unclaimId(value);\r\n      }\r\n    });\r\n\r\n  }\r\n}\r\n\r\nIdUnclaimBehavior.$inject = [ 'eventBus', 'modeling' ];"]}