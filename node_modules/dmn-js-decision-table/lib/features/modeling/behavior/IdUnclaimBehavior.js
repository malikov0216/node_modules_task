var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';

import { isArray } from 'min-dash';

var IdUnclaimBehavior = function (_CommandInterceptor) {
  _inherits(IdUnclaimBehavior, _CommandInterceptor);

  function IdUnclaimBehavior(eventBus, modeling) {
    _classCallCheck(this, IdUnclaimBehavior);

    var _this = _possibleConstructorReturn(this, (IdUnclaimBehavior.__proto__ || Object.getPrototypeOf(IdUnclaimBehavior)).call(this, eventBus));

    _this._modeling = modeling;

    _this.preExecute(['row.remove', 'col.remove'], function (event) {
      var context = event.context,
          element = context.row || context.col;

      _this.unclaimId(element.businessObject);

      if (element.cells) {
        element.cells.forEach(function (cell) {
          return _this.unclaimId(cell.businessObject);
        });
      }
    });
    return _this;
  }

  _createClass(IdUnclaimBehavior, [{
    key: 'unclaimId',
    value: function unclaimId(businessObject) {
      var _this2 = this;

      if (businessObject.id) {
        this._modeling.unclaimId(businessObject.id, businessObject);
      }

      businessObject.$descriptor.properties.forEach(function (property) {
        var value = businessObject[property.name];

        // not set
        if (!value) {
          return;
        }

        // array of moddle elements
        if (isArray(value)) {
          value.forEach(function (v) {
            return _this2.unclaimId(v);
          });
        }

        // moddle element
        if (value.$type) {
          _this2.unclaimId(value);
        }
      });
    }
  }]);

  return IdUnclaimBehavior;
}(CommandInterceptor);

export default IdUnclaimBehavior;


IdUnclaimBehavior.$inject = ['eventBus', 'modeling'];
//# sourceMappingURL=IdUnclaimBehavior.js.map