var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { assign } from 'min-dash';

import BaseModeling from 'table-js/lib/features/modeling/Modeling';

import UpdateAllowedValuesHandler from './cmd/UpdateAllowedValuesHandler';
import UpdatePropertiesHandler from 'dmn-js-shared/lib/features/modeling/cmd/UpdatePropertiesHandler';
import IdClaimHandler from './cmd/IdClaimHandler';

var Modeling = function (_BaseModeling) {
  _inherits(Modeling, _BaseModeling);

  function Modeling(eventBus, elementFactory, commandStack, sheet) {
    _classCallCheck(this, Modeling);

    var _this = _possibleConstructorReturn(this, (Modeling.__proto__ || Object.getPrototypeOf(Modeling)).call(this, eventBus, elementFactory, commandStack));

    _this._eventBus = eventBus;
    _this._elementFactory = elementFactory;
    _this._commandStack = commandStack;
    _this._sheet = sheet;
    return _this;
  }

  _createClass(Modeling, [{
    key: 'getHandlers',
    value: function getHandlers() {
      return Modeling._getHandlers();
    }
  }, {
    key: 'editDecisionTableName',
    value: function editDecisionTableName(name) {
      var root = this._sheet.getRoot(),
          businessObject = root.businessObject,
          parentBusinessObject = businessObject.$parent;

      var context = {
        element: parentBusinessObject,
        properties: {
          name: name
        }
      };

      this._commandStack.execute('updateProperties', context);
    }
  }, {
    key: 'editDecisionTableId',
    value: function editDecisionTableId(id) {
      var root = this._sheet.getRoot(),
          businessObject = root.businessObject,
          parentBusinessObject = businessObject.$parent;

      var context = {
        element: parentBusinessObject,
        properties: {
          id: id
        }
      };

      this._commandStack.execute('updateProperties', context);
    }
  }, {
    key: 'editHitPolicy',
    value: function editHitPolicy(hitPolicy, aggregation) {
      var root = this._sheet.getRoot(),
          businessObject = root.businessObject;

      var context = {
        element: businessObject,
        properties: {
          hitPolicy: hitPolicy,
          aggregation: aggregation
        }
      };

      this._commandStack.execute('updateProperties', context);
    }
  }, {
    key: 'updateProperties',
    value: function updateProperties(el, props) {
      var context = {
        element: el,
        properties: props
      };

      this._commandStack.execute('updateProperties', context);
    }
  }, {
    key: 'editInputExpression',
    value: function editInputExpression(inputExpression, props) {
      var context = {
        element: inputExpression,
        properties: props
      };

      this._commandStack.execute('updateProperties', context);
    }
  }, {
    key: 'editOutputName',
    value: function editOutputName(output, name) {
      var context = {
        element: output,
        properties: {
          name: name
        }
      };

      this._commandStack.execute('updateProperties', context);
    }
  }, {
    key: 'editInputExpressionTypeRef',
    value: function editInputExpressionTypeRef(inputExpression, typeRef) {
      var context = {
        element: inputExpression,
        properties: {
          typeRef: typeRef
        }
      };

      this._commandStack.execute('updateProperties', context);
    }
  }, {
    key: 'editOutputTypeRef',
    value: function editOutputTypeRef(output, typeRef) {
      var context = {
        element: output,
        properties: {
          typeRef: typeRef
        }
      };

      this._commandStack.execute('updateProperties', context);
    }
  }, {
    key: 'editCell',
    value: function editCell(cell, text) {
      var context = {
        element: cell,
        properties: {
          text: text
        }
      };

      this._commandStack.execute('updateProperties', context);
    }
  }, {
    key: 'editAnnotation',
    value: function editAnnotation(rule, description) {
      var context = {
        element: rule,
        properties: {
          description: description
        }
      };

      this._commandStack.execute('updateProperties', context);
    }
  }, {
    key: 'editAllowedValues',
    value: function editAllowedValues(element, allowedValues) {
      var context = {
        element: element,
        allowedValues: allowedValues
      };

      this._commandStack.execute('editAllowedValues', context);
    }
  }, {
    key: 'editExpressionLanguage',
    value: function editExpressionLanguage(element, expressionLanguage) {
      var context = {
        element: element,
        properties: {
          expressionLanguage: expressionLanguage
        }
      };

      this._commandStack.execute('updateProperties', context);
    }
  }, {
    key: 'claimId',
    value: function claimId(id, moddleElement) {
      var context = {
        id: id,
        element: moddleElement,
        claiming: true
      };

      this._commandStack.execute('id.updateClaim', context);
    }
  }, {
    key: 'unclaimId',
    value: function unclaimId(id, moddleElement) {
      var context = {
        id: id,
        element: moddleElement
      };

      this._commandStack.execute('id.updateClaim', context);
    }
  }], [{
    key: '_getHandlers',
    value: function _getHandlers() {
      return assign({}, _get(Modeling.__proto__ || Object.getPrototypeOf(Modeling), '_getHandlers', this).call(this), {
        'editAllowedValues': UpdateAllowedValuesHandler,
        'updateProperties': UpdatePropertiesHandler,
        'id.updateClaim': IdClaimHandler
      });
    }
  }]);

  return Modeling;
}(BaseModeling);

export default Modeling;


Modeling.$inject = ['eventBus', 'elementFactory', 'commandStack', 'sheet'];
//# sourceMappingURL=Modeling.js.map