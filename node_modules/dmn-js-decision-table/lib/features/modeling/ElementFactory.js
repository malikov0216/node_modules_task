var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { is } from 'dmn-js-shared/lib/util/ModelUtil';

import BaseElementFactory from 'table-js/lib/core/ElementFactory';

var ElementFactory = function (_BaseElementFactory) {
  _inherits(ElementFactory, _BaseElementFactory);

  function ElementFactory(dmnFactory) {
    _classCallCheck(this, ElementFactory);

    var _this = _possibleConstructorReturn(this, (ElementFactory.__proto__ || Object.getPrototypeOf(ElementFactory)).call(this));

    _this._dmnFactory = dmnFactory;
    return _this;
  }

  _createClass(ElementFactory, [{
    key: 'create',
    value: function create(tType, attrs) {

      var dmnFactory = this._dmnFactory;

      var businessObject = attrs.businessObject,
          type = attrs.type,
          additionalAttrs = _objectWithoutProperties(attrs, ['businessObject', 'type']);

      if (!businessObject) {

        if (!type) {

          if (tType === 'root') {
            type = 'dmn:DecisionTable';
          } else if (tType === 'cell') {
            var col = additionalAttrs.col;


            if (is(col, 'dmn:OutputClause')) {
              type = 'dmn:LiteralExpression';
            }

            if (is(col, 'dmn:InputClause')) {
              type = 'dmn:UnaryTests';
            }
          }

          if (!type) {
            throw new Error('cannot guess <type>');
          }
        }

        businessObject = dmnFactory.create(type);
      }

      return _get(ElementFactory.prototype.__proto__ || Object.getPrototypeOf(ElementFactory.prototype), 'create', this).call(this, tType, _extends({
        businessObject: businessObject,
        id: businessObject.id
      }, additionalAttrs));
    }
  }]);

  return ElementFactory;
}(BaseElementFactory);

export default ElementFactory;


ElementFactory.$inject = ['dmnFactory'];
//# sourceMappingURL=ElementFactory.js.map