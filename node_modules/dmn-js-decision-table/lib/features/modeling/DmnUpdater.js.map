{"version":3,"sources":["../../../src/features/modeling/DmnUpdater.js"],"names":["is","CommandInterceptor","DmnUpdater","eventBus","sheet","executed","ifDmn","e","context","element","row","col","updateRoot","oldRoot","reverted","newRoot","root","businessObject","oldTable","oldRules","get","oldIdx","indexOf","splice","$parent","newTable","newIdx","rows","cells","forEach","cell","idx","wireCell","collection","collectionIdx","inputs","outputs","Error","cel","rowIdx","unwireCell","colIdx","cols","length","oldRow","cellBo","oldRowBo","inputEntries","outputEntries","rowBo","$inject","fn","event"],"mappings":"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","file":"DmnUpdater.js","sourcesContent":["import { is } from 'dmn-js-shared/lib/util/ModelUtil';\n\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\n\n/**\n * A handler responsible for updating the underlying DMN\n * once changes on the table happen.\n */\nexport default class DmnUpdater extends CommandInterceptor {\n\n  constructor(eventBus, sheet) {\n    super(eventBus);\n\n    this.executed([\n      'row.add',\n      'row.remove',\n      'col.add',\n      'col.remove'\n    ], ifDmn((e) => {\n      var context = e.context;\n\n      var element = context.row || context.col;\n\n      this.updateRoot(element, context.oldRoot);\n    }));\n\n    this.reverted([\n      'row.add',\n      'row.remove',\n      'col.add',\n      'col.remove'\n    ], ifDmn((e) => {\n      var context = e.context;\n\n      var element = context.row || context.col;\n\n      this.updateRoot(element, context.newRoot);\n    }));\n\n  }\n\n  updateRoot(element, oldRoot) {\n\n    var newRoot = element.root;\n\n    var businessObject = element.businessObject;\n\n    if (is(element, 'dmn:DecisionRule')) {\n\n      // we're removing\n      if (oldRoot) {\n        let oldTable = oldRoot.businessObject;\n\n        let oldRules = oldTable.get('rule');\n        let oldIdx = oldRules.indexOf(businessObject);\n\n        // unwire Row <-> Table\n        oldRules.splice(oldIdx, 1);\n        businessObject.$parent = null;\n      }\n\n      // we're adding\n      if (newRoot) {\n        let newTable = newRoot.businessObject;\n\n        let newIdx = newRoot.rows.indexOf(element);\n\n        // wire Row <-> Table\n        newTable.get('rule').splice(newIdx, 0, businessObject);\n        businessObject.$parent = newTable;\n\n        element.cells.forEach((cell, idx) => {\n\n          // wire Cell <-> Row\n          this.wireCell(cell, element, idx);\n        });\n      }\n    }\n\n\n    if (is(element, 'dmn:InputClause') || is(element, 'dmn:OutputClause')) {\n\n      let collection,\n          collectionIdx;\n\n      // we're removing\n      if (oldRoot) {\n        let oldTable = oldRoot.businessObject;\n\n        let inputs = oldTable.get('input');\n        let outputs = oldTable.get('output');\n\n        if (is(element, 'dmn:InputClause')) {\n          collection = inputs;\n          collectionIdx = inputs.indexOf(businessObject);\n        }\n\n        if (is(element, 'dmn:OutputClause')) {\n          collection = outputs;\n          collectionIdx = outputs.indexOf(businessObject);\n        }\n\n        if (collectionIdx === -1) {\n          throw new Error('inconsistent model: clause not in table');\n        }\n\n        // unwire Col <-> Table\n        collection.splice(collectionIdx, 1);\n        businessObject.$parent = null;\n\n        element.cells.forEach((cel, rowIdx) => {\n\n          // unwire Cell <-> Row\n          this.unwireCell(cel, oldRoot.rows[rowIdx]);\n        });\n\n      }\n\n\n      if (newRoot) {\n        let newTable = newRoot.businessObject;\n\n        let inputs = newTable.get('input');\n        let outputs = newTable.get('output');\n\n        let colIdx = newRoot.cols.indexOf(element);\n\n        let collectionIdx,\n            collection;\n\n        if (is(element, 'dmn:InputClause')) {\n          collection = inputs;\n          collectionIdx = colIdx;\n        }\n\n        if (is(element, 'dmn:OutputClause')) {\n          collection = outputs;\n          collectionIdx = colIdx - inputs.length;\n        }\n\n        // wire Col <-> Table\n        collection.splice(collectionIdx, 0, businessObject);\n        businessObject.$parent = newTable;\n\n        element.cells.forEach((cell, rowIdx) => {\n\n          // wire Cell <-> Row\n          this.wireCell(cell, newRoot.rows[rowIdx], colIdx);\n        });\n\n      }\n    }\n  }\n\n  unwireCell(cell, oldRow) {\n\n    var cellBo = cell.businessObject;\n\n    let oldRowBo = oldRow.businessObject;\n\n    let inputEntries = oldRowBo.get('inputEntry');\n    let outputEntries = oldRowBo.get('outputEntry');\n\n    let collection,\n        collectionIdx;\n\n    // remove from inputEntries\n    if (is(cell, 'dmn:UnaryTests')) {\n      collection = inputEntries;\n    }\n\n    // remove from outputEntries\n    if (is(cell, 'dmn:LiteralExpression')) {\n      collection = outputEntries;\n    }\n\n    collectionIdx = collection.indexOf(cellBo);\n\n    if (collectionIdx === -1) {\n      throw new Error('cell not in row');\n    }\n\n    // unwire Cell <-> Row relationship\n    collection.splice(collectionIdx, 1);\n    cellBo.$parent = null;\n  }\n\n  wireCell(cell, row, colIdx) {\n\n    var cellBo = cell.businessObject;\n\n    let rowBo = row.businessObject;\n\n    let inputEntries = rowBo.get('inputEntry');\n    let outputEntries = rowBo.get('outputEntry');\n\n    let collection,\n        collectionIdx;\n\n    // ensure we handle already wired cells\n    if (cellBo.$parent === rowBo) {\n      return;\n    }\n\n    // add to inputEntries\n    if (is(cell, 'dmn:UnaryTests')) {\n      collection = inputEntries;\n      collectionIdx = colIdx;\n    }\n\n    // add to outputEntries\n    if (is(cell, 'dmn:LiteralExpression')) {\n      collection = outputEntries;\n      collectionIdx = colIdx - inputEntries.length;\n    }\n\n    // wire Cell <-> Row relationship\n    collection.splice(collectionIdx, 0, cellBo);\n    cellBo.$parent = rowBo;\n  }\n\n}\n\nDmnUpdater.$inject = [\n  'eventBus',\n  'sheet'\n];\n\n\n\n// helpers //////////////////////\n\n/**\n * Make sure the event listener is only called\n * if the touched element is a DMN element.\n *\n * @param  {Function} fn\n * @return {Function} guarded function\n */\nfunction ifDmn(fn) {\n\n  return function(event) {\n\n    var context = event.context,\n        element = context.row || context.col;\n\n    if (is(element, 'dmn:DMNElement')) {\n      fn(event);\n    }\n  };\n}"]}