var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode, createTextVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

import { inject } from 'table-js/lib/components';

var AddRuleFootComponent = function (_Component) {
  _inherits(AddRuleFootComponent, _Component);

  function AddRuleFootComponent(props, context) {
    _classCallCheck(this, AddRuleFootComponent);

    var _this = _possibleConstructorReturn(this, (AddRuleFootComponent.__proto__ || Object.getPrototypeOf(AddRuleFootComponent)).call(this, props, context));

    _this.handleClick = function (e) {
      e.stopPropagation();

      _this.addRule();
    };

    inject(_this);

    _this.addRule = _this.addRule.bind(_this);
    return _this;
  }

  _createClass(AddRuleFootComponent, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._eventBus = this.context.injector.get('eventBus');
    }
  }, {
    key: 'addRule',
    value: function addRule() {
      this._eventBus.fire('addRule');
    }
  }, {
    key: 'render',
    value: function render() {
      var cols = this.props.cols;


      var cells = [createVNode(1, 'td', 'add-rule-add', createVNode(1, 'span', 'dmn-icon-plus action-icon', null, 1, {
        'title': 'Add Rule'
      }), 2)];

      var _sheet$getRoot = this.sheet.getRoot(),
          businessObject = _sheet$getRoot.businessObject;

      if (!businessObject.input || !businessObject.input.length) {
        cells.push(createVNode(1, 'td', 'input-cell', createTextVNode('-'), 2));
      }

      for (var i = 0; i < cols.length + 1; i++) {
        var className = 'add-rule';

        var _businessObject = cols[i] && cols[i].businessObject;

        if (_businessObject) {
          if (_businessObject.$instanceOf('dmn:InputClause')) {
            className += ' input-cell';
          }

          if (_businessObject.$instanceOf('dmn:OutputClause')) {
            className += ' output-cell';
          }
        }

        cells.push(createVNode(1, 'td', className, createTextVNode('-'), 2));
      }

      return createVNode(1, 'tfoot', 'actionable add-rule', createVNode(1, 'tr', null, cells, 0), 2, {
        'onClick': this.handleClick
      });
    }
  }]);

  return AddRuleFootComponent;
}(Component);

export default AddRuleFootComponent;


AddRuleFootComponent.$inject = ['sheet'];
//# sourceMappingURL=AddRuleFootComponent.js.map