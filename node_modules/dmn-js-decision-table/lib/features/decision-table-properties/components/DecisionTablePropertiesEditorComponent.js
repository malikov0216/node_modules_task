var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode, createComponentVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

import { validateId } from 'dmn-js-shared/lib/util/IdsUtil';

import EditableComponent from 'dmn-js-shared/lib/components/EditableComponent';

import { inject, mixin, classNames, SelectionAware } from 'table-js/lib/components';

var DecisionTablePropertiesComponent = function (_Component) {
  _inherits(DecisionTablePropertiesComponent, _Component);

  function DecisionTablePropertiesComponent(props, context) {
    _classCallCheck(this, DecisionTablePropertiesComponent);

    var _this = _possibleConstructorReturn(this, (DecisionTablePropertiesComponent.__proto__ || Object.getPrototypeOf(DecisionTablePropertiesComponent)).call(this, props, context));

    _this.onElementsChanged = function () {
      _this.forceUpdate();
    };

    _this.setDecisionTableName = function (name) {
      _this.modeling.editDecisionTableName(name);
    };

    _this.setDecisionTableId = function (id) {

      var oldId = _this.getBusinessObject().id;

      if (oldId === id) {
        return;
      }

      _this.modeling.editDecisionTableId(id);
    };

    _this.validateId = function (id) {
      var bo = _this.getBusinessObject();
      return validateId(bo, id);
    };

    inject(_this);
    return _this;
  }

  _createClass(DecisionTablePropertiesComponent, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var injector = this.context.injector;


      this.sheet = injector.get('sheet');
      this.modeling = injector.get('modeling');

      this.setupChangeListeners({ bind: this.getBusinessObject().id });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.setupChangeListeners({
        unbind: this.getBusinessObject().id
      });
    }
  }, {
    key: 'setupChangeListeners',
    value: function setupChangeListeners(_ref) {
      var bind = _ref.bind,
          unbind = _ref.unbind;


      if (typeof unbind === 'string') {
        this.changeSupport.offElementsChanged(unbind, this.onElementsChanged);
      }

      if (typeof bind === 'string') {
        this.changeSupport.onElementsChanged(bind, this.onElementsChanged);
      }
    }
  }, {
    key: 'getBusinessObject',
    value: function getBusinessObject() {
      return this.sheet.getRoot().businessObject.$parent;
    }
  }, {
    key: 'render',
    value: function render() {
      var bo = this.getBusinessObject();

      var id = bo.id,
          name = bo.name;


      return createVNode(1, 'header', 'decision-table-properties', [createComponentVNode(2, DecisionTableName, {
        'className': 'decision-table-name',
        'value': name,
        'ctrlForNewline': true,
        'onChange': this.setDecisionTableName,
        'elementId': '__decisionProperties_name',
        'coords': '0:__decisionProperties'
      }), createComponentVNode(2, DecisionTableId, {
        'className': 'decision-table-id',
        'value': id,
        'ctrlForNewline': true,
        'validate': this.validateId,
        'onChange': this.setDecisionTableId,
        'elementId': '__decisionProperties_id',
        'coords': '1:__decisionProperties'
      })], 4);
    }
  }]);

  return DecisionTablePropertiesComponent;
}(Component);

export default DecisionTablePropertiesComponent;


DecisionTablePropertiesComponent.$inject = ['sheet', 'modeling', 'changeSupport'];

var DecisionTableName = function (_EditableComponent) {
  _inherits(DecisionTableName, _EditableComponent);

  function DecisionTableName(props, context) {
    _classCallCheck(this, DecisionTableName);

    var _this2 = _possibleConstructorReturn(this, (DecisionTableName.__proto__ || Object.getPrototypeOf(DecisionTableName)).call(this, props, context));

    mixin(_this2, SelectionAware);
    return _this2;
  }

  _createClass(DecisionTableName, [{
    key: 'render',
    value: function render() {

      var className = classNames(this.getSelectionClasses(), this.getClassName());

      return createVNode(1, 'h3', className, this.getEditor(), 0, {
        'data-element-id': this.props.elementId,
        'data-coords': this.props.coords,
        'title': 'Decision Name'
      });
    }
  }]);

  return DecisionTableName;
}(EditableComponent);

var DecisionTableId = function (_EditableComponent2) {
  _inherits(DecisionTableId, _EditableComponent2);

  function DecisionTableId(props, context) {
    _classCallCheck(this, DecisionTableId);

    var _this3 = _possibleConstructorReturn(this, (DecisionTableId.__proto__ || Object.getPrototypeOf(DecisionTableId)).call(this, props, context));

    mixin(_this3, SelectionAware);
    return _this3;
  }

  _createClass(DecisionTableId, [{
    key: 'render',
    value: function render() {

      var className = classNames(this.getSelectionClasses(), this.getClassName());

      return createVNode(1, 'h5', className, this.getEditor(), 0, {
        'title': 'Decision Id',
        'data-element-id': this.props.elementId,
        'data-coords': this.props.coords
      });
    }
  }]);

  return DecisionTableId;
}(EditableComponent);
//# sourceMappingURL=DecisionTablePropertiesEditorComponent.js.map