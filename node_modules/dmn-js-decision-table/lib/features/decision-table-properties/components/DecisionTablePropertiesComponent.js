var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

import { is } from 'dmn-js-shared/lib/util/ModelUtil';

var DecisionTablePropertiesComponent = function (_Component) {
  _inherits(DecisionTablePropertiesComponent, _Component);

  function DecisionTablePropertiesComponent() {
    _classCallCheck(this, DecisionTablePropertiesComponent);

    return _possibleConstructorReturn(this, (DecisionTablePropertiesComponent.__proto__ || Object.getPrototypeOf(DecisionTablePropertiesComponent)).apply(this, arguments));
  }

  _createClass(DecisionTablePropertiesComponent, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var injector = this.context.injector;


      this._sheet = injector.get('sheet');
    }
  }, {
    key: 'render',
    value: function render() {
      var root = this._sheet.getRoot();

      if (!is(root, 'dmn:DMNElement')) {
        return null;
      }

      var _root$businessObject$ = root.businessObject.$parent,
          id = _root$businessObject$.id,
          name = _root$businessObject$.name;


      return createVNode(1, 'header', 'decision-table-properties', [createVNode(1, 'h3', 'decision-table-name', name, 0, {
        'title': 'Decision Name'
      }), createVNode(1, 'h5', 'decision-table-id', id, 0, {
        'title': 'Decision Id'
      })], 4);
    }
  }]);

  return DecisionTablePropertiesComponent;
}(Component);

export default DecisionTablePropertiesComponent;
//# sourceMappingURL=DecisionTablePropertiesComponent.js.map