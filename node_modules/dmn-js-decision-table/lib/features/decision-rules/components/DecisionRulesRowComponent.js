var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

import { mixin } from 'table-js/lib/components';

import { ComponentWithSlots } from 'dmn-js-shared/lib/components/mixins';

var DecisionRulesRowComponent = function (_Component) {
  _inherits(DecisionRulesRowComponent, _Component);

  function DecisionRulesRowComponent(props, context) {
    _classCallCheck(this, DecisionRulesRowComponent);

    var _this = _possibleConstructorReturn(this, (DecisionRulesRowComponent.__proto__ || Object.getPrototypeOf(DecisionRulesRowComponent)).call(this, props, context));

    mixin(_this, ComponentWithSlots);
    return _this;
  }

  _createClass(DecisionRulesRowComponent, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          row = _props.row,
          rowIndex = _props.rowIndex,
          cols = _props.cols;
      var cells = row.cells;


      return createVNode(1, 'tr', null, [this.slotFills({
        type: 'cell',
        context: {
          cellType: 'before-rule-cells',
          row: row,
          rowIndex: rowIndex
        }
      }), cells.map(function (cell, colIndex) {
        return _this2.slotFill({
          type: 'cell',
          context: {
            cellType: 'rule',
            cell: cell,
            rowIndex: rowIndex,
            colIndex: colIndex
          },
          key: cell.id,
          row: row,
          col: cols[colIndex]
        });
      }), this.slotFills({
        type: 'cell',
        context: {
          cellType: 'after-rule-cells',
          row: row,
          rowIndex: rowIndex
        }
      })], 0);
    }
  }]);

  return DecisionRulesRowComponent;
}(Component);

export default DecisionRulesRowComponent;
//# sourceMappingURL=DecisionRulesRowComponent.js.map