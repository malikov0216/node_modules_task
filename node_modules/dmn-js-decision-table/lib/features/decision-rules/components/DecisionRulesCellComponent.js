var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createComponentVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

import { Cell } from 'table-js/lib/components';

import { is } from 'dmn-js-shared/lib/util/ModelUtil';

var DecisionRulesCellComponent = function (_Component) {
  _inherits(DecisionRulesCellComponent, _Component);

  function DecisionRulesCellComponent() {
    _classCallCheck(this, DecisionRulesCellComponent);

    return _possibleConstructorReturn(this, (DecisionRulesCellComponent.__proto__ || Object.getPrototypeOf(DecisionRulesCellComponent)).apply(this, arguments));
  }

  _createClass(DecisionRulesCellComponent, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          cell = _props.cell,
          row = _props.row,
          col = _props.col;


      if (is(cell, 'dmn:UnaryTests')) {
        return createComponentVNode(2, Cell, {
          'className': 'input-cell',
          'elementId': cell.id,
          'data-row-id': row.id,
          'data-col-id': col.id,
          children: cell.businessObject.text
        });
      } else {
        return createComponentVNode(2, Cell, {
          'className': 'output-cell',
          'elementId': cell.id,
          'data-row-id': row.id,
          'data-col-id': col.id,
          children: cell.businessObject.text
        });
      }
    }
  }]);

  return DecisionRulesCellComponent;
}(Component);

export default DecisionRulesCellComponent;
//# sourceMappingURL=DecisionRulesCellComponent.js.map