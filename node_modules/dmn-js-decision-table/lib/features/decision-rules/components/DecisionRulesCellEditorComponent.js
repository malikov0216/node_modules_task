var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode, createComponentVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

import { isString } from 'min-dash';

import { is } from 'dmn-js-shared/lib/util/ModelUtil';

import EditableComponent from 'dmn-js-shared/lib/components/EditableComponent';

import { Cell } from 'table-js/lib/components';

var EXPRESSION_LANGUAGE_LABELS = {
  feel: 'FEEL',
  juel: 'JUEL',
  python: 'Python',
  javascript: 'JavaScript',
  groovy: 'Groovy',
  jruby: 'JRuby'
};

var DecisionRulesEditorCellComponent = function (_Component) {
  _inherits(DecisionRulesEditorCellComponent, _Component);

  function DecisionRulesEditorCellComponent(props, context) {
    _classCallCheck(this, DecisionRulesEditorCellComponent);

    var _this = _possibleConstructorReturn(this, (DecisionRulesEditorCellComponent.__proto__ || Object.getPrototypeOf(DecisionRulesEditorCellComponent)).call(this, props, context));

    _this.state = {
      isFocussed: false
    };

    _this.changeCellValue = _this.changeCellValue.bind(_this);
    _this.onFocus = _this.onFocus.bind(_this);
    _this.onBlur = _this.onBlur.bind(_this);
    _this.onElementsChanged = _this.onElementsChanged.bind(_this);
    return _this;
  }

  _createClass(DecisionRulesEditorCellComponent, [{
    key: 'onElementsChanged',
    value: function onElementsChanged() {
      this.forceUpdate();
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      var injector = this.context.injector;
      var cell = this.props.cell;


      var changeSupport = this._changeSupport = this.context.changeSupport;

      this._modeling = injector.get('modeling');

      changeSupport.onElementsChanged(cell.id, this.onElementsChanged);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var cell = this.props.cell;


      this._changeSupport.offElementsChanged(cell.id, this.onElementsChanged);
    }
  }, {
    key: 'changeCellValue',
    value: function changeCellValue(value) {
      var cell = this.props.cell;


      this._modeling.editCell(cell.businessObject, value);
    }
  }, {
    key: 'onFocus',
    value: function onFocus() {
      this.setState({
        isFocussed: true
      });
    }
  }, {
    key: 'onBlur',
    value: function onBlur() {
      this.setState({
        isFocussed: false
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          cell = _props.cell,
          rowIndex = _props.rowIndex,
          row = _props.row,
          col = _props.col,
          colIndex = _props.colIndex;
      var isFocussed = this.state.isFocussed;


      var className = is(cell, 'dmn:UnaryTests') ? 'input-cell' : 'output-cell';

      var businessObject = cell.businessObject;

      return createComponentVNode(2, Cell, {
        'className': className,
        'elementId': cell.id,
        'coords': rowIndex + ':' + colIndex,
        'data-row-id': row.id,
        'data-col-id': col.id,
        children: createComponentVNode(2, TableCellEditor, {
          'className': 'cell-editor',
          'ctrlForNewline': true,
          'onFocus': this.onFocus,
          'onBlur': this.onBlur,
          'isFocussed': isFocussed,
          'onChange': this.changeCellValue,
          'value': businessObject.text,
          'businessObject': businessObject
        })
      });
    }
  }]);

  return DecisionRulesEditorCellComponent;
}(Component);

export default DecisionRulesEditorCellComponent;

var TableCellEditor = function (_EditableComponent) {
  _inherits(TableCellEditor, _EditableComponent);

  function TableCellEditor() {
    _classCallCheck(this, TableCellEditor);

    return _possibleConstructorReturn(this, (TableCellEditor.__proto__ || Object.getPrototypeOf(TableCellEditor)).apply(this, arguments));
  }

  _createClass(TableCellEditor, [{
    key: 'isDefaultExpressionLanguage',
    value: function isDefaultExpressionLanguage(businessObject) {
      var expressionLanguage = businessObject.expressionLanguage;


      var isInput = is(businessObject, 'dmn:UnaryTests');

      var _context$injector$get = this.context.injector.get('config'),
          defaultInputExpressionLanguage = _context$injector$get.defaultInputExpressionLanguage,
          defaultOutputExpressionLanguage = _context$injector$get.defaultOutputExpressionLanguage;

      if (isInput) {
        return !expressionLanguage && !defaultInputExpressionLanguage || expressionLanguage === (defaultInputExpressionLanguage || 'feel');
      } else {
        return !expressionLanguage && !defaultOutputExpressionLanguage || expressionLanguage === (defaultOutputExpressionLanguage || 'juel');
      }
    }
  }, {
    key: 'getDescription',
    value: function getDescription(businessObject) {
      return businessObject.description;
    }
  }, {
    key: 'getExpressionLanguageLabel',
    value: function getExpressionLanguageLabel(businessObject) {
      var expressionLanguage = businessObject.expressionLanguage;


      var isInput = is(businessObject, 'dmn:UnaryTests');

      if (isInput) {
        return expressionLanguage ? EXPRESSION_LANGUAGE_LABELS[businessObject.expressionLanguage.toLowerCase()] : 'FEEL';
      } else {
        return expressionLanguage ? EXPRESSION_LANGUAGE_LABELS[businessObject.expressionLanguage.toLowerCase()] : 'JUEL';
      }
    }
  }, {
    key: 'isScript',
    value: function isScript(businessObject) {

      return is(businessObject, 'dmn:UnaryTests') && ((businessObject.expressionLanguage || 'FEEL') !== 'FEEL' || businessObject.text.indexOf('\n') !== -1);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          businessObject = _props2.businessObject,
          isFocussed = _props2.isFocussed;


      var description = this.getDescription(businessObject);

      var isDefaultExpressionLanguage = this.isDefaultExpressionLanguage(businessObject);

      var expressionLanguageLabel = this.getExpressionLanguageLabel(businessObject) || businessObject.expressionLanguage;

      var isScript = this.isScript(businessObject);

      return createVNode(1, 'div', this.getClassName(), [isString(description) && !isFocussed && createVNode(1, 'div', 'description-indicator'), this.getEditor({
        className: isScript ? 'script-editor' : null
      }), !isDefaultExpressionLanguage && !isFocussed && createVNode(1, 'span', 'dms-badge dmn-expression-language', [createVNode(1, 'span', 'dms-badge-icon dmn-icon-file-code'), createVNode(1, 'span', 'dms-badge-label', expressionLanguageLabel, 0)], 4, {
        'title': 'Expression Language = ' + expressionLanguageLabel
      })], 0);
    }
  }]);

  return TableCellEditor;
}(EditableComponent);
//# sourceMappingURL=DecisionRulesCellEditorComponent.js.map