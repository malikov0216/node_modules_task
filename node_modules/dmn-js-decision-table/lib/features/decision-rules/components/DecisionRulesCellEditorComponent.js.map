{"version":3,"sources":["../../../../src/features/decision-rules/components/DecisionRulesCellEditorComponent.js"],"names":["Component","isString","is","EditableComponent","Cell","EXPRESSION_LANGUAGE_LABELS","feel","juel","python","javascript","groovy","jruby","DecisionRulesEditorCellComponent","props","context","state","isFocussed","changeCellValue","bind","onFocus","onBlur","onElementsChanged","forceUpdate","injector","cell","changeSupport","_changeSupport","_modeling","get","id","offElementsChanged","value","editCell","businessObject","setState","rowIndex","row","col","colIndex","className","text","TableCellEditor","expressionLanguage","isInput","defaultInputExpressionLanguage","defaultOutputExpressionLanguage","description","toLowerCase","indexOf","getDescription","isDefaultExpressionLanguage","expressionLanguageLabel","getExpressionLanguageLabel","isScript","getClassName","getEditor"],"mappings":"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","file":"DecisionRulesCellEditorComponent.js","sourcesContent":["import { Component } from 'inferno';\n\nimport { isString } from 'min-dash';\n\nimport { is } from 'dmn-js-shared/lib/util/ModelUtil';\n\nimport EditableComponent from 'dmn-js-shared/lib/components/EditableComponent';\n\nimport { Cell } from 'table-js/lib/components';\n\nconst EXPRESSION_LANGUAGE_LABELS = {\n  feel: 'FEEL',\n  juel: 'JUEL',\n  python: 'Python',\n  javascript: 'JavaScript',\n  groovy: 'Groovy',\n  jruby: 'JRuby'\n};\n\n\nexport default class DecisionRulesEditorCellComponent extends Component {\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      isFocussed: false\n    };\n\n    this.changeCellValue = this.changeCellValue.bind(this);\n    this.onFocus = this.onFocus.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n    this.onElementsChanged = this.onElementsChanged.bind(this);\n  }\n\n\n  onElementsChanged() {\n    this.forceUpdate();\n  }\n\n\n  componentWillMount() {\n    const { injector } = this.context;\n\n    const { cell } = this.props;\n\n    const changeSupport = this._changeSupport = this.context.changeSupport;\n\n    this._modeling = injector.get('modeling');\n\n    changeSupport.onElementsChanged(cell.id, this.onElementsChanged);\n  }\n\n\n  componentWillUnmount() {\n    const { cell } = this.props;\n\n    this._changeSupport.offElementsChanged(cell.id, this.onElementsChanged);\n  }\n\n\n  changeCellValue(value) {\n    const { cell } = this.props;\n\n    this._modeling.editCell(cell.businessObject, value);\n  }\n\n\n  onFocus() {\n    this.setState({\n      isFocussed: true\n    });\n  }\n\n\n  onBlur() {\n    this.setState({\n      isFocussed: false\n    });\n  }\n\n\n  render() {\n    const {\n      cell,\n      rowIndex,\n      row,\n      col,\n      colIndex\n    } = this.props;\n\n    const { isFocussed } = this.state;\n\n    const className = is(cell, 'dmn:UnaryTests') ? 'input-cell' : 'output-cell';\n\n    const businessObject = cell.businessObject;\n\n    return (\n      <Cell\n        className={ className }\n        elementId={ cell.id }\n        coords={ `${rowIndex}:${colIndex}` }\n        data-row-id={ row.id }\n        data-col-id={ col.id }\n      >\n        <TableCellEditor\n          className=\"cell-editor\"\n          ctrlForNewline={ true }\n          onFocus={ this.onFocus }\n          onBlur={ this.onBlur }\n          isFocussed={ isFocussed }\n          onChange={ this.changeCellValue }\n          value={ businessObject.text }\n          businessObject={ businessObject } />\n      </Cell>\n    );\n  }\n}\n\n\nclass TableCellEditor extends EditableComponent {\n\n  isDefaultExpressionLanguage(businessObject) {\n    const { expressionLanguage } = businessObject;\n\n    const isInput = is(businessObject, 'dmn:UnaryTests');\n\n    const {\n      defaultInputExpressionLanguage,\n      defaultOutputExpressionLanguage\n    } = this.context.injector.get('config');\n\n    if (isInput) {\n      return (!expressionLanguage && !defaultInputExpressionLanguage)\n        || expressionLanguage === (defaultInputExpressionLanguage || 'feel');\n    } else {\n      return (!expressionLanguage && !defaultOutputExpressionLanguage)\n        || expressionLanguage === (defaultOutputExpressionLanguage || 'juel');\n    }\n  }\n\n  getDescription(businessObject) {\n    return businessObject.description;\n  }\n\n  getExpressionLanguageLabel(businessObject) {\n    const { expressionLanguage } = businessObject;\n\n    const isInput = is(businessObject, 'dmn:UnaryTests');\n\n    if (isInput) {\n      return expressionLanguage\n        ? EXPRESSION_LANGUAGE_LABELS[businessObject.expressionLanguage.toLowerCase()]\n        : 'FEEL';\n    } else {\n      return expressionLanguage\n        ? EXPRESSION_LANGUAGE_LABELS[businessObject.expressionLanguage.toLowerCase()]\n        : 'JUEL';\n    }\n  }\n\n  isScript(businessObject) {\n\n    return (\n      is(businessObject, 'dmn:UnaryTests') && (\n        (businessObject.expressionLanguage || 'FEEL') !== 'FEEL' ||\n        businessObject.text.indexOf('\\n') !== -1\n      )\n    );\n  }\n\n  render() {\n    const {\n      businessObject,\n      isFocussed\n    } = this.props;\n\n    const description = this.getDescription(businessObject);\n\n    const isDefaultExpressionLanguage = this.isDefaultExpressionLanguage(businessObject);\n\n    const expressionLanguageLabel = this.getExpressionLanguageLabel(businessObject)\n      || businessObject.expressionLanguage;\n\n    const isScript = this.isScript(businessObject);\n\n    return (\n      <div className={ this.getClassName() }>\n        {\n          isString(description)\n            && !isFocussed\n            && <div className=\"description-indicator\"></div>\n        }\n        {\n          this.getEditor({\n            className: isScript ? 'script-editor' : null\n          })\n        }\n        {\n          !isDefaultExpressionLanguage &&\n          !isFocussed && (\n            <span\n              className=\"dms-badge dmn-expression-language\"\n              title={ `Expression Language = ${ expressionLanguageLabel }` }>\n              <span class=\"dms-badge-icon dmn-icon-file-code\"></span>\n              <span class=\"dms-badge-label\">{ expressionLanguageLabel }</span>\n            </span>\n          )\n        }\n      </div>\n    );\n  }\n}"]}