var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode, createComponentVNode, createTextVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint-disable max-len */

import InputSelect from 'dmn-js-shared/lib/components/InputSelect';

import { isInput } from 'dmn-js-shared/lib/util/ModelUtil';

var INPUT_EXPRESSION_LANGUAGE_OPTIONS = [{
  label: 'FEEL',
  value: 'feel'
}, {
  label: 'JUEL',
  value: 'juel'
}, {
  label: 'JavaScript',
  value: 'javascript'
}, {
  label: 'Groovy',
  value: 'groovy'
}, {
  label: 'Python',
  value: 'python'
}, {
  label: 'JRuby',
  value: 'jruby'
}];

var ExpressionLanguage = function () {
  function ExpressionLanguage(components, elementRegistry, modeling) {
    var _this = this;

    _classCallCheck(this, ExpressionLanguage);

    this._modeling = modeling;

    components.onGetComponent('context-menu-cell-additional', function () {
      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (context.contextMenuType && context.contextMenuType === 'context-menu') {
        var id = context.id;


        if (!id) {
          return;
        }

        var element = elementRegistry.get(id);

        // element might not be in element registry (e.g. cut)
        if (!element) {
          return;
        }

        var expressionLanguage = element.businessObject.expressionLanguage || (isInput(element.col) ? 'feel' : 'juel');

        return createVNode(1, 'div', 'context-menu-group-entry context-menu-entry-set-expression-language', [createVNode(1, 'div', null, [createVNode(1, 'span', 'context-menu-group-entry-icon dmn-icon-file-code'), createTextVNode('Expression Language')], 4), createComponentVNode(2, InputSelect, {
          'className': 'expression-language',
          'onChange': function onChange(value) {
            return _this.onChange(element, value);
          },
          'options': INPUT_EXPRESSION_LANGUAGE_OPTIONS,
          'value': expressionLanguage
        })], 4);
      }
    });
  }

  _createClass(ExpressionLanguage, [{
    key: 'onChange',
    value: function onChange(cell, expressionLanguage) {
      this._modeling.editExpressionLanguage(cell.businessObject, expressionLanguage);
    }
  }]);

  return ExpressionLanguage;
}();

export default ExpressionLanguage;


ExpressionLanguage.$inject = ['components', 'elementRegistry', 'modeling'];
//# sourceMappingURL=ExpressionLanguage.js.map