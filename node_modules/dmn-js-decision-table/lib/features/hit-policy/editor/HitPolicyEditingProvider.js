import { closest as domClosest } from 'min-dom';

import EditableHitPolicyCell from './components/EditableHitPolicyCell';
import HitPolicyCellContextMenu from './components/HitPolicyCellContextMenu';

export default function HitPolicyEditingProvider(components, contextMenu, eventBus, renderer) {

  components.onGetComponent('cell', function (_ref) {
    var cellType = _ref.cellType;

    if (cellType === 'before-label-cells') {
      return EditableHitPolicyCell;
    }
  });

  components.onGetComponent('context-menu', function () {
    var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (context.contextMenuType && context.contextMenuType === 'hit-policy-edit') {
      return HitPolicyCellContextMenu;
    }
  });

  eventBus.on('hitPolicy.edit', function (_ref2) {
    var event = _ref2.event;

    var node = domClosest(event.target, 'th', true);

    var _node$getBoundingClie = node.getBoundingClientRect(),
        left = _node$getBoundingClie.left,
        top = _node$getBoundingClie.top,
        width = _node$getBoundingClie.width,
        height = _node$getBoundingClie.height;

    var container = renderer.getContainer();

    contextMenu.open({
      x: left + container.parentNode.scrollLeft,
      y: top + container.parentNode.scrollTop,
      width: width,
      height: height
    }, {
      contextMenuType: 'hit-policy-edit',
      offset: {
        x: 4,
        y: 4
      }
    });
  });
}

HitPolicyEditingProvider.$inject = ['components', 'contextMenu', 'eventBus', 'renderer'];
//# sourceMappingURL=HitPolicyEditingProvider.js.map