var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode, createComponentVNode, createTextVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

import InputSelect from 'dmn-js-shared/lib/components/InputSelect';

var HIT_POLICIES = ['UNIQUE', 'FIRST', 'PRIORITY', 'ANY', 'COLLECT', 'RULE ORDER', 'OUTPUT ORDER'];

var LIST_FUNCTIONS = ['SUM', 'MIN', 'MAX', 'COUNT'];

var HitPolicyCellContextMenu = function (_Component) {
  _inherits(HitPolicyCellContextMenu, _Component);

  function HitPolicyCellContextMenu(props, context) {
    _classCallCheck(this, HitPolicyCellContextMenu);

    var _this = _possibleConstructorReturn(this, (HitPolicyCellContextMenu.__proto__ || Object.getPrototypeOf(HitPolicyCellContextMenu)).call(this, props, context));

    _this.onHitPolicyChange = _this.onHitPolicyChange.bind(_this);
    _this.onAggregationChange = _this.onAggregationChange.bind(_this);
    _this.onElementsChanged = _this.onElementsChanged.bind(_this);
    return _this;
  }

  _createClass(HitPolicyCellContextMenu, [{
    key: 'onHitPolicyChange',
    value: function onHitPolicyChange(hitPolicy) {
      this._modeling.editHitPolicy(hitPolicy, undefined);
    }
  }, {
    key: 'onAggregationChange',
    value: function onAggregationChange(value) {
      var aggregation = value === '' ? undefined : value;

      this._modeling.editHitPolicy('COLLECT', aggregation);
    }
  }, {
    key: 'onElementsChanged',
    value: function onElementsChanged() {
      this.forceUpdate();
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      var injector = this.context.injector;


      var changeSupport = this._changeSupport = this.context.changeSupport;

      this._sheet = injector.get('sheet');
      this._modeling = injector.get('modeling');

      var root = this._sheet.getRoot(),
          businessObject = root.businessObject,
          hitPolicy = businessObject.hitPolicy,
          aggregation = businessObject.aggregation;

      changeSupport.onElementsChanged(root.id, this.onElementsChanged);

      this.state = {
        hitPolicy: hitPolicy,
        aggregation: aggregation
      };
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var root = this._sheet.getRoot();

      this._changeSupport.onElementsChanged(root.id, this.onElementsChanged);
    }
  }, {
    key: 'render',
    value: function render() {
      var root = this._sheet.getRoot(),
          businessObject = root.businessObject,
          hitPolicy = businessObject.hitPolicy,
          aggregation = businessObject.aggregation;

      var hitPolicyOptions = HIT_POLICIES.map(function (h) {
        return {
          label: h,
          value: h
        };
      });

      var aggregationOptions = LIST_FUNCTIONS.map(function (l) {
        return {
          label: l === 'NONE' ? '-' : l,
          value: l
        };
      });

      return createVNode(1, 'div', 'context-menu-container hit-policy-edit', [createVNode(1, 'p', 'hit-policy-edit-policy', [createVNode(1, 'label', 'dms-label', createTextVNode('Hit Policy:'), 2), createComponentVNode(2, InputSelect, {
        'className': 'hit-policy-edit-policy-select',
        'onChange': this.onHitPolicyChange,
        'options': hitPolicyOptions,
        'value': hitPolicy
      })], 4), hitPolicy === 'COLLECT' && createVNode(1, 'p', 'hit-policy-edit-operator', [createVNode(1, 'label', 'dms-label', createTextVNode('Aggregation:'), 2), createComponentVNode(2, InputSelect, {
        'className': 'hit-policy-edit-operator-select',
        'onChange': this.onAggregationChange,
        'options': aggregationOptions,
        'value': aggregation
      })], 4)], 0);
    }
  }]);

  return HitPolicyCellContextMenu;
}(Component);

export default HitPolicyCellContextMenu;
//# sourceMappingURL=HitPolicyCellContextMenu.js.map