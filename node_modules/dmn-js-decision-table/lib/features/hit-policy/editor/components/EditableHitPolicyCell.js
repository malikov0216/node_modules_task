var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

import { inject } from 'table-js/lib/components';

var EditableHitPolicyCell = function (_Component) {
  _inherits(EditableHitPolicyCell, _Component);

  function EditableHitPolicyCell(props, context) {
    _classCallCheck(this, EditableHitPolicyCell);

    var _this = _possibleConstructorReturn(this, (EditableHitPolicyCell.__proto__ || Object.getPrototypeOf(EditableHitPolicyCell)).call(this, props, context));

    _this.onClick = function (event) {
      _this.eventBus.fire('hitPolicy.edit', {
        event: event
      });
    };

    _this.onElementsChanged = function () {
      _this.forceUpdate();
    };

    inject(_this);
    return _this;
  }

  _createClass(EditableHitPolicyCell, [{
    key: 'getRoot',
    value: function getRoot() {
      return this.sheet.getRoot();
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.changeSupport.onElementsChanged(this.getRoot().id, this.onElementsChanged);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.changeSupport.offElementsChanged(this.getRoot().id, this.onElementsChanged);
    }
  }, {
    key: 'render',
    value: function render() {
      var root = this.getRoot(),
          businessObject = root.businessObject,
          hitPolicy = businessObject.hitPolicy,
          hitPolicyLabel = hitPolicy.charAt(0),
          aggregation = businessObject.aggregation;

      var aggregationLabel = getAggregationLabel(aggregation);

      return createVNode(1, 'th', 'hit-policy header', [hitPolicyLabel, aggregationLabel], 0, {
        'data-hit-policy': 'true',
        'title': 'Hit Policy = ' + hitPolicy,
        'onClick': this.onClick,
        'rowspan': '3'
      });
    }
  }]);

  return EditableHitPolicyCell;
}(Component);

export default EditableHitPolicyCell;


EditableHitPolicyCell.$inject = ['changeSupport', 'sheet', 'eventBus'];

// helpers //////////////////////

function getAggregationLabel(aggregation) {
  switch (aggregation) {
    case 'SUM':
      return '+';
    case 'MIN':
      return '<';
    case 'MAX':
      return '>';
    case 'COUNT':
      return '#';
    default:
      return '';
  }
}
//# sourceMappingURL=EditableHitPolicyCell.js.map