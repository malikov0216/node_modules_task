var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

var HitPolicyCell = function (_Component) {
  _inherits(HitPolicyCell, _Component);

  function HitPolicyCell() {
    _classCallCheck(this, HitPolicyCell);

    return _possibleConstructorReturn(this, (HitPolicyCell.__proto__ || Object.getPrototypeOf(HitPolicyCell)).apply(this, arguments));
  }

  _createClass(HitPolicyCell, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var injector = this.context.injector;


      this._sheet = injector.get('sheet');
    }
  }, {
    key: 'render',
    value: function render() {
      var root = this._sheet.getRoot(),
          businessObject = root.businessObject,
          hitPolicy = businessObject.hitPolicy,
          hitPolicyLabel = hitPolicy.charAt(0),
          aggregation = businessObject.aggregation;

      var aggregationLabel = getAggregationLabel(aggregation);

      return createVNode(1, 'th', 'hit-policy header', [hitPolicyLabel, aggregationLabel], 0, {
        'rowspan': '3',
        'title': 'Hit Policy = ' + hitPolicy
      });
    }
  }]);

  return HitPolicyCell;
}(Component);

// helpers //////////////////////

export default HitPolicyCell;
function getAggregationLabel(aggregation) {
  switch (aggregation) {
    case 'SUM':
      return '+';
    case 'MIN':
      return '<';
    case 'MAX':
      return '>';
    case 'COUNT':
      return '#';
    default:
      return '';
  }
}
//# sourceMappingURL=HitPolicyCell.js.map