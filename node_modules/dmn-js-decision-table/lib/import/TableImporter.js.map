{"version":3,"sources":["../../src/import/TableImporter.js"],"names":["assign","is","elementData","semantic","attrs","id","type","$type","businessObject","TableImporter","elementFactory","eventBus","sheet","_elementFactory","_eventBus","_sheet","element","createRoot","setRoot","createCol","addCol","inputEntry","outputEntry","cells","map","entry","createCell","createRow","addRow","fire","$inject"],"mappings":";;;;;;AAAA,SAASA,MAAT,QAAuB,UAAvB;;AAEA,SAASC,EAAT,QAAmB,kCAAnB;;AAEA,SAASC,WAAT,CAAqBC,QAArB,EAA+BC,KAA/B,EAAsC;AACpC,SAAOJ,OAAO;AACZK,QAAIF,SAASE,EADD;AAEZC,UAAMH,SAASI,KAFH;AAGZC,oBAAgBL;AAHJ,GAAP,EAIJC,KAJI,CAAP;AAKD;;IAEoBK,a;AAEnB,yBAAYC,cAAZ,EAA4BC,QAA5B,EAAsCC,KAAtC,EAA6C;AAAA;;AAC3C,SAAKC,eAAL,GAAuBH,cAAvB;AACA,SAAKI,SAAL,GAAiBH,QAAjB;AACA,SAAKI,MAAL,GAAcH,KAAd;AACD;;AAED;;;;;;;wBAGIT,Q,EAAU;AAAA;;AACZ,UAAIa,gBAAJ;;AAEA;AACA,UAAIf,GAAGE,QAAH,EAAa,mBAAb,CAAJ,EAAuC;AACrCa,kBAAU,KAAKH,eAAL,CAAqBI,UAArB,CAAgCf,YAAYC,QAAZ,CAAhC,CAAV;;AAEA,aAAKY,MAAL,CAAYG,OAAZ,CAAoBF,OAApB;AACD;;AAED;AANA,WAOK,IAAIf,GAAGE,QAAH,EAAa,iBAAb,CAAJ,EAAqC;AACxCa,oBAAU,KAAKH,eAAL,CAAqBM,SAArB,CAA+BjB,YAAYC,QAAZ,CAA/B,CAAV;;AAEA,eAAKY,MAAL,CAAYK,MAAZ,CAAmBJ,OAAnB;AACD;;AAED;AANK,aAOA,IAAIf,GAAGE,QAAH,EAAa,kBAAb,CAAJ,EAAsC;AACzCa,sBAAU,KAAKH,eAAL,CAAqBM,SAArB,CAA+BjB,YAAYC,QAAZ,CAA/B,CAAV;;AAEA,iBAAKY,MAAL,CAAYK,MAAZ,CAAmBJ,OAAnB;AACD;;AAED;AANK,eAOA,IAAIf,GAAGE,QAAH,EAAa,kBAAb,CAAJ,EAAsC;AACzC,kBAAI,CAACA,SAASkB,UAAd,EAA0B;AACxBlB,yBAASkB,UAAT,GAAsB,EAAtB;AACD;;AAED,kBAAI,CAAClB,SAASmB,WAAd,EAA2B;AACzBnB,yBAASmB,WAAT,GAAuB,EAAvB;AACD;;AAED,kBAAMC,QAAQ,6BACTpB,SAASkB,UADA,sBAETlB,SAASmB,WAFA,GAGZE,GAHY,CAGR,UAACC,KAAD,EAAW;AACf,uBAAO,MAAKZ,eAAL,CAAqBa,UAArB,CAAgCxB,YAAYuB,KAAZ,CAAhC,CAAP;AACD,eALa,CAAd;;AAOAT,wBAAU,KAAKH,eAAL,CAAqBc,SAArB,CAA+B3B,OAAOE,YAAYC,QAAZ,CAAP,EAA8B;AACrEoB;AADqE,eAA9B,CAA/B,CAAV;;AAIA,mBAAKR,MAAL,CAAYa,MAAZ,CAAmBZ,OAAnB;AACD;;AAED,WAAKF,SAAL,CAAee,IAAf,CAAoB,kBAApB,EAAwC,EAAEb,SAASA,OAAX,EAAxC;;AAEA,aAAOA,OAAP;AACD;;;;;;eA9DkBP,a;;;AAiErBA,cAAcqB,OAAd,GAAwB,CAAE,gBAAF,EAAoB,UAApB,EAAgC,OAAhC,CAAxB","file":"TableImporter.js","sourcesContent":["import { assign } from 'min-dash';\n\nimport { is } from 'dmn-js-shared/lib/util/ModelUtil';\n\nfunction elementData(semantic, attrs) {\n  return assign({\n    id: semantic.id,\n    type: semantic.$type,\n    businessObject: semantic\n  }, attrs);\n}\n\nexport default class TableImporter {\n\n  constructor(elementFactory, eventBus, sheet) {\n    this._elementFactory = elementFactory;\n    this._eventBus = eventBus;\n    this._sheet = sheet;\n  }\n\n  /**\n   * Add DMN element.\n   */\n  add(semantic) {\n    let element;\n\n    // decision table\n    if (is(semantic, 'dmn:DecisionTable')) {\n      element = this._elementFactory.createRoot(elementData(semantic));\n\n      this._sheet.setRoot(element);\n    }\n\n    // input clause\n    else if (is(semantic, 'dmn:InputClause')) {\n      element = this._elementFactory.createCol(elementData(semantic));\n\n      this._sheet.addCol(element);\n    }\n\n    // output clause\n    else if (is(semantic, 'dmn:OutputClause')) {\n      element = this._elementFactory.createCol(elementData(semantic));\n\n      this._sheet.addCol(element);\n    }\n\n    // rule\n    else if (is(semantic, 'dmn:DecisionRule')) {\n      if (!semantic.inputEntry) {\n        semantic.inputEntry = [];\n      }\n\n      if (!semantic.outputEntry) {\n        semantic.outputEntry = [];\n      }\n\n      const cells = [\n        ...semantic.inputEntry,\n        ...semantic.outputEntry\n      ].map((entry) => {\n        return this._elementFactory.createCell(elementData(entry));\n      });\n\n      element = this._elementFactory.createRow(assign(elementData(semantic), {\n        cells\n      }));\n\n      this._sheet.addRow(element);\n    }\n\n    this._eventBus.fire('dmnElement.added', { element: element });\n\n    return element;\n  }\n}\n\nTableImporter.$inject = [ 'elementFactory', 'eventBus', 'sheet' ];"]}