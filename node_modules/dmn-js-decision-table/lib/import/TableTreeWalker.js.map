{"version":3,"sources":["../../src/import/TableTreeWalker.js"],"names":["forEach","elementToString","TableTreeWalker","handler","options","visit","element","ctx","definitions","gfx","Error","visitTable","table","handleDecision","decision","id","decisionTable","output","input","handleClauses","handleRules","rule","clauses","context","e","rules","handleEntry","inputEntry","outputEntry","entry"],"mappings":"AAAA,SAASA,OAAT,QAAwB,UAAxB;;AAEA,SAASC,eAAT,QAAgC,QAAhC;;AAEA,eAAe,SAASC,eAAT,CAAyBC,OAAzB,EAAkCC,OAAlC,EAA2C;;AAExD,WAASC,KAAT,CAAeC,OAAf,EAAwBC,GAAxB,EAA6BC,WAA7B,EAA0C;;AAExC,QAAIC,MAAMH,QAAQG,GAAlB;;AAEA;AACA,QAAIA,GAAJ,EAAS;AACP,YAAM,IAAIC,KAAJ,uBAA+BT,gBAAgBK,OAAhB,CAA/B,CAAN;AACD;;AAED;AACA,WAAOH,QAAQG,OAAR,CAAgBA,OAAhB,EAAyBC,GAAzB,EAA8BC,WAA9B,CAAP;AACD;;AAED,WAASG,UAAT,CAAoBL,OAApB,EAA6B;AAC3B,WAAOH,QAAQS,KAAR,CAAcN,OAAd,CAAP;AACD;;AAGD;;AAEA,WAASO,cAAT,CAAwBC,QAAxB,EAAkC;;AAEhC,QAAI,CAACA,SAASC,EAAd,EAAkB;AAChBD,eAASC,EAAT,GAAc,UAAd;AACD;;AAED,QAAMH,QAAQE,SAASE,aAAvB;;AAEA,QAAIJ,KAAJ,EAAW;;AAET,UAAI,CAACA,MAAMK,MAAX,EAAmB;AACjB,cAAM,IAAIP,KAAJ,yBAAiCT,gBAAgBW,KAAhB,CAAjC,CAAN;AACD;;AAED,UAAML,MAAMI,WAAWC,KAAX,CAAZ;;AAEA,UAAIA,MAAMM,KAAV,EAAiB;AACfC,sBAAcP,MAAMM,KAApB,EAA2BX,GAA3B,EAAgCK,KAAhC;AACD;;AAEDO,oBAAcP,MAAMK,MAApB,EAA4BV,GAA5B,EAAiCK,KAAjC;;AAEA;AACA;AACAQ,kBAAYR,MAAMS,IAAlB,EAAwBd,GAAxB,EAA6BK,KAA7B;AACD,KAjBD,MAiBO;AACL,YAAM,IAAIF,KAAJ,mBAA2BT,gBAAgBa,QAAhB,CAA3B,CAAN;AACD;AAEF;;AAED,WAASK,aAAT,CAAuBG,OAAvB,EAAgCC,OAAhC,EAAyCf,WAAzC,EAAsD;AACpDR,YAAQsB,OAAR,EAAiB,UAASE,CAAT,EAAY;AAC3BnB,YAAMmB,CAAN,EAASD,OAAT,EAAkBf,WAAlB;AACD,KAFD;AAGD;;AAED,WAASY,WAAT,CAAqBK,KAArB,EAA4BF,OAA5B,EAAqCf,WAArC,EAAkD;AAChDR,YAAQyB,KAAR,EAAe,UAASD,CAAT,EAAY;AACzBnB,YAAMmB,CAAN,EAASD,OAAT,EAAkBf,WAAlB;;AAEAkB,kBAAYF,EAAEG,UAAd,EAA0BH,CAA1B;;AAEAE,kBAAYF,EAAEI,WAAd,EAA2BJ,CAA3B;AACD,KAND;AAOD;;AAED,WAASE,WAAT,CAAqBG,KAArB,EAA4BN,OAA5B,EAAqCf,WAArC,EAAkD;AAChDR,YAAQ6B,KAAR,EAAe,UAASL,CAAT,EAAY;AACzBnB,YAAMmB,CAAN,EAASD,OAAT,EAAkBf,WAAlB;AACD,KAFD;AAGD;;AAGD;;AAEA,SAAO;AACLK,oBAAgBA;AADX,GAAP;AAGD","file":"TableTreeWalker.js","sourcesContent":["import { forEach } from 'min-dash';\n\nimport { elementToString } from './Util';\n\nexport default function TableTreeWalker(handler, options) {\n\n  function visit(element, ctx, definitions) {\n\n    var gfx = element.gfx;\n\n    // avoid multiple rendering of elements\n    if (gfx) {\n      throw new Error(`already rendered ${ elementToString(element) }`);\n    }\n\n    // call handler\n    return handler.element(element, ctx, definitions);\n  }\n\n  function visitTable(element) {\n    return handler.table(element);\n  }\n\n\n  // Semantic handling //////////////////////\n\n  function handleDecision(decision) {\n\n    if (!decision.id) {\n      decision.id = 'decision';\n    }\n\n    const table = decision.decisionTable;\n\n    if (table) {\n\n      if (!table.output) {\n        throw new Error(`missing output for ${ elementToString(table) }`);\n      }\n\n      const ctx = visitTable(table);\n\n      if (table.input) {\n        handleClauses(table.input, ctx, table);\n      }\n\n      handleClauses(table.output, ctx, table);\n\n      // if any input or output clauses (columns) were added\n      // make sure that for each rule the according input/output entry is created\n      handleRules(table.rule, ctx, table);\n    } else {\n      throw new Error(`no table for ${ elementToString(decision) }`);\n    }\n\n  }\n\n  function handleClauses(clauses, context, definitions) {\n    forEach(clauses, function(e) {\n      visit(e, context, definitions);\n    });\n  }\n\n  function handleRules(rules, context, definitions) {\n    forEach(rules, function(e) {\n      visit(e, context, definitions);\n\n      handleEntry(e.inputEntry, e);\n\n      handleEntry(e.outputEntry, e);\n    });\n  }\n\n  function handleEntry(entry, context, definitions) {\n    forEach(entry, function(e) {\n      visit(e, context, definitions);\n    });\n  }\n\n\n  // API //////////////////////\n\n  return {\n    handleDecision: handleDecision\n  };\n}\n"]}