{"version":3,"sources":["../../src/import/Importer.js"],"names":["TableTreeWalker","importDecision","decisionTable","decision","done","importer","get","eventBus","sheet","hasModeling","error","warnings","render","visitor","create","type","parent","clause","rule","table","element","add","parentShape","definitions","message","context","push","walker","canAddMissingEntries","handleDecision","fire","e","elements","getRoot"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,mBAA5B;;AAGA;;;;;;;;;;AAUA,OAAO,SAASC,cAAT,CAAwBC,aAAxB,EAAuCC,QAAvC,EAAiDC,IAAjD,EAAuD;AAC5D,MAAMC,WAAWH,cAAcI,GAAd,CAAkB,eAAlB,CAAjB;AAAA,MACMC,WAAWL,cAAcI,GAAd,CAAkB,UAAlB,CADjB;AAAA,MAEME,QAAQN,cAAcI,GAAd,CAAkB,OAAlB,CAFd;;AAIA,MAAIG,cAAcP,cAAcI,GAAd,CAAkB,UAAlB,EAA8B,KAA9B,CAAlB;;AAEA,MAAII,cAAJ;AAAA,MACIC,WAAW,EADf;;AAGA,WAASC,MAAT,CAAgBT,QAAhB,EAA0B;;AAExB,QAAMU,UAAU;AACdC,YADc,kBACPC,IADO,EACDC,MADC,EACOC,MADP,EACeC,IADf,EACqB;AACjC,eAAOb,SAASS,MAAT,CAAgBC,IAAhB,EAAsBC,MAAtB,EAA8BC,MAA9B,EAAsCC,IAAtC,CAAP;AACD,OAHa;AAKdC,WALc,iBAKRC,OALQ,EAKC;AACb,eAAOf,SAASgB,GAAT,CAAaD,OAAb,CAAP;AACD,OAPa;AASdA,aATc,mBASNA,QATM,EASGE,WATH,EASgBC,WAThB,EAS6B;AACzC,eAAOlB,SAASgB,GAAT,CAAaD,QAAb,EAAsBE,WAAtB,EAAmCC,WAAnC,CAAP;AACD,OAXa;AAadb,WAbc,iBAaRc,OAbQ,EAaCC,OAbD,EAaU;AACtBd,iBAASe,IAAT,CAAc,EAAEF,SAASA,OAAX,EAAoBC,SAASA,OAA7B,EAAd;AACD;AAfa,KAAhB;;AAkBA,QAAME,SAAS,IAAI3B,eAAJ,CAAoBa,OAApB,EAA6B,EAAEe,sBAAsBnB,WAAxB,EAA7B,CAAf;;AAEA;AACAkB,WAAOE,cAAP,CAAsB1B,QAAtB;AACD;;AAEDI,WAASuB,IAAT,CAAc,qBAAd,EAAqC,EAAE3B,UAAUA,QAAZ,EAArC;;AAEA,MAAI;AACFS,WAAOT,QAAP;AACD,GAFD,CAEE,OAAO4B,CAAP,EAAU;AACVrB,YAAQqB,CAAR;AACD;;AAEDxB,WAASuB,IAAT,CAAc,wBAAd,EAAwC;AACtCpB,WAAOA,KAD+B;AAEtCC,cAAUA;AAF4B,GAAxC;;AAKAJ,WAASuB,IAAT,CAAc,kBAAd,EAAkC;AAChCE,cAAU,CAAExB,MAAMyB,OAAN,EAAF;AADsB,GAAlC;;AAIA7B,OAAKM,KAAL,EAAYC,QAAZ;AACD","file":"Importer.js","sourcesContent":["import TableTreeWalker from './TableTreeWalker';\n\n\n/**\n * Import the decision table into a table.\n *\n * Errors and warnings are reported through the specified callback.\n *\n * @param  {decisionTable} decisionTable instance of DecisionTable\n * @param  {ModdleElement} decision moddle element\n * @param  {Function} done\n *         the callback, invoked with (err, [ warning ]) once the import is done\n */\nexport function importDecision(decisionTable, decision, done) {\n  const importer = decisionTable.get('tableImporter'),\n        eventBus = decisionTable.get('eventBus'),\n        sheet = decisionTable.get('sheet');\n\n  let hasModeling = decisionTable.get('modeling', false);\n\n  let error,\n      warnings = [];\n\n  function render(decision) {\n\n    const visitor = {\n      create(type, parent, clause, rule) {\n        return importer.create(type, parent, clause, rule);\n      },\n\n      table(element) {\n        return importer.add(element);\n      },\n\n      element(element, parentShape, definitions) {\n        return importer.add(element, parentShape, definitions);\n      },\n\n      error(message, context) {\n        warnings.push({ message: message, context: context });\n      }\n    };\n\n    const walker = new TableTreeWalker(visitor, { canAddMissingEntries: hasModeling });\n\n    // import\n    walker.handleDecision(decision);\n  }\n\n  eventBus.fire('import.render.start', { decision: decision });\n\n  try {\n    render(decision);\n  } catch (e) {\n    error = e;\n  }\n\n  eventBus.fire('import.render.complete', {\n    error: error,\n    warnings: warnings\n  });\n\n  eventBus.fire('elements.changed', {\n    elements: [ sheet.getRoot() ]\n  });\n\n  done(error, warnings);\n}\n"]}