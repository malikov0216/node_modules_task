var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { assign } from 'min-dash';

import { is } from 'dmn-js-shared/lib/util/ModelUtil';

function elementData(semantic, attrs) {
  return assign({
    id: semantic.id,
    type: semantic.$type,
    businessObject: semantic
  }, attrs);
}

var TableImporter = function () {
  function TableImporter(elementFactory, eventBus, sheet) {
    _classCallCheck(this, TableImporter);

    this._elementFactory = elementFactory;
    this._eventBus = eventBus;
    this._sheet = sheet;
  }

  /**
   * Add DMN element.
   */


  _createClass(TableImporter, [{
    key: 'add',
    value: function add(semantic) {
      var _this = this;

      var element = void 0;

      // decision table
      if (is(semantic, 'dmn:DecisionTable')) {
        element = this._elementFactory.createRoot(elementData(semantic));

        this._sheet.setRoot(element);
      }

      // input clause
      else if (is(semantic, 'dmn:InputClause')) {
          element = this._elementFactory.createCol(elementData(semantic));

          this._sheet.addCol(element);
        }

        // output clause
        else if (is(semantic, 'dmn:OutputClause')) {
            element = this._elementFactory.createCol(elementData(semantic));

            this._sheet.addCol(element);
          }

          // rule
          else if (is(semantic, 'dmn:DecisionRule')) {
              if (!semantic.inputEntry) {
                semantic.inputEntry = [];
              }

              if (!semantic.outputEntry) {
                semantic.outputEntry = [];
              }

              var cells = [].concat(_toConsumableArray(semantic.inputEntry), _toConsumableArray(semantic.outputEntry)).map(function (entry) {
                return _this._elementFactory.createCell(elementData(entry));
              });

              element = this._elementFactory.createRow(assign(elementData(semantic), {
                cells: cells
              }));

              this._sheet.addRow(element);
            }

      this._eventBus.fire('dmnElement.added', { element: element });

      return element;
    }
  }]);

  return TableImporter;
}();

export default TableImporter;


TableImporter.$inject = ['elementFactory', 'eventBus', 'sheet'];
//# sourceMappingURL=TableImporter.js.map