
/**
 * Composes a number of functions.
 *
 * All receive the the same arguments; the chain is interruped as soon
 * as one function returns a value.
 *
 * @param  {Object}    self
 * @param  {...Function} fns
 *
 * @return {Object}
 */
export default function compose(self) {
  for (var _len = arguments.length, fns = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    fns[_key - 1] = arguments[_key];
  }

  return function () {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var result = void 0;

    fns.forEach(function (fn) {

      result = fn.call.apply(fn, [self].concat(args));

      if (typeof result !== 'undefined') {
        return false;
      }
    });

    return result;
  }.bind(self);
}
//# sourceMappingURL=compose.js.map