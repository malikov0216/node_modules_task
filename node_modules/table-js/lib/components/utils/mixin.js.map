{"version":3,"sources":["../../../src/components/utils/mixin.js"],"names":["compose","injectType","mixin","component","mixinDef","Object","keys","forEach","key","mixinFn","call","props","context","componentFn","Error","bind","__init"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;;AAEA,SAASC,UAAT,QAA2B,UAA3B;;AAGA;;;;;;AAMA,eAAe,SAASC,KAAT,CAAeC,SAAf,EAA0BC,QAA1B,EAAoC;;AAEjDC,SAAOC,IAAP,CAAYF,QAAZ,EAAsBG,OAAtB,CAA8B,UAASC,GAAT,EAAc;;AAE1C,QAAIA,QAAQ,SAAR,IAAqBA,QAAQ,QAAjC,EAA2C;AACzC;AACD;;AAED,QAAMC,UAAUL,SAASI,GAAT,CAAhB;;AAEA,QAAIA,QAAQ,aAAZ,EAA2B;AACzBC,cAAQC,IAAR,CAAaP,SAAb,EAAwBA,UAAUQ,KAAlC,EAAyCR,UAAUS,OAAnD;AACD;;AAED,QAAMC,cAAcV,UAAUK,GAAV,CAApB;;AAEA,QAAI,OAAOK,WAAP,KAAuB,WAA3B,EAAwC;AACtC,UAAI,OAAOA,WAAP,KAAuB,UAA3B,EAAuC;AACrC,cAAM,IAAIC,KAAJ,uBACiBN,GADjB,mDAAN;AAGD;;AAGDL,gBAAUK,GAAV,IAAiBR,QAAQG,SAAR,EAAmBU,WAAnB,EAAgCJ,OAAhC,CAAjB;AACD,KATD,MASO;AACLN,gBAAUK,GAAV,IAAiBC,QAAQM,IAAR,CAAaZ,SAAb,CAAjB;AACD;AACF,GA1BD;;AA4BA,MAAI,aAAaC,QAAjB,EAA2B;AACzBH,eAAWG,QAAX,EAAqBD,SAArB;AACD;;AAED;AACA,MAAI,YAAYC,QAAhB,EAA0B;AACxBA,aAASY,MAAT,CAAgBN,IAAhB,CAAqBP,SAArB,EAAgCA,UAAUQ,KAA1C,EAAiDR,UAAUS,OAA3D;AACD;AAEF","file":"mixin.js","sourcesContent":["import compose from './compose';\n\nimport { injectType } from './inject';\n\n\n/**\n * A Component and injection aware mixin mechanism.\n *\n * @param {Component} component\n * @param {Object|Function} mixinDef\n */\nexport default function mixin(component, mixinDef) {\n\n  Object.keys(mixinDef).forEach(function(key) {\n\n    if (key === '$inject' || key === '__init') {\n      return;\n    }\n\n    const mixinFn = mixinDef[key];\n\n    if (key === 'constructor') {\n      mixinFn.call(component, component.props, component.context);\n    }\n\n    const componentFn = component[key];\n\n    if (typeof componentFn !== 'undefined') {\n      if (typeof componentFn !== 'function') {\n        throw new Error(\n          `failed to mixin <${ key }>: cannot combine with non-fn component value`\n        );\n      }\n\n\n      component[key] = compose(component, componentFn, mixinFn);\n    } else {\n      component[key] = mixinFn.bind(component);\n    }\n  });\n\n  if ('$inject' in mixinDef) {\n    injectType(mixinDef, component);\n  }\n\n  // call initializer\n  if ('__init' in mixinDef) {\n    mixinDef.__init.call(component, component.props, component.context);\n  }\n\n}"]}