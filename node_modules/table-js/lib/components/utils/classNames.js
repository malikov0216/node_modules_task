var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function newSet() {
  return {
    elements: [],
    index: {}
  };
}

function add(set, element) {
  var elements = set.elements,
      index = set.index;


  if (index[element]) {
    return set;
  } else {
    return {
      elements: [].concat(_toConsumableArray(elements), [element]),
      index: _extends({}, index, _defineProperty({}, element, true))
    };
  }
}

function join(set, separator) {
  return set.elements.join(separator);
}

export default function classNames() {

  var set = newSet();

  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  args.forEach(function (item) {
    var type = typeof item === 'undefined' ? 'undefined' : _typeof(item);

    if (type === 'string' && item.length > 0) {
      set = add(set, item);
    } else if (type === 'object' && item !== null) {

      Object.keys(item).forEach(function (key) {
        var value = item[key];

        if (value) {
          set = add(set, key);
        }
      });
    }
  });

  return join(set, ' ');
}
//# sourceMappingURL=classNames.js.map