function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

export function inject(component) {

  var Type = component.constructor;

  return injectType(Type, component);
}

export function injectType(Type, component) {

  var annotation = Type.$inject;

  if (!annotation) {
    return;
  }

  var injector = component.context.injector;


  var setupFn = [].concat(_toConsumableArray(annotation), [function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    for (var idx in args) {
      var name = annotation[idx];
      var value = args[idx];

      component[name] = value;
    }
  }]);

  injector.invoke(setupFn);
}
//# sourceMappingURL=inject.js.map