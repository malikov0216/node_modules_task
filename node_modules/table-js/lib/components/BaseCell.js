var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

import { classNames, inject, mixin } from './utils';

import { SelectionAware } from './mixins';

var BaseCell = function (_Component) {
  _inherits(BaseCell, _Component);

  function BaseCell(props, context) {
    _classCallCheck(this, BaseCell);

    var _this = _possibleConstructorReturn(this, (BaseCell.__proto__ || Object.getPrototypeOf(BaseCell)).call(this, props, context));

    mixin(_this, SelectionAware);

    inject(_this);
    return _this;
  }

  _createClass(BaseCell, [{
    key: 'getRenderProps',
    value: function getRenderProps() {
      var _props = this.props,
          className = _props.className,
          elementId = _props.elementId,
          coords = _props.coords,
          props = _objectWithoutProperties(_props, ['className', 'elementId', 'coords']);

      for (var _len = arguments.length, cls = Array(_len), _key = 0; _key < _len; _key++) {
        cls[_key] = arguments[_key];
      }

      var baseProps = {
        className: classNames.apply(undefined, cls.concat([this.getSelectionClasses(), className]))
      };

      if (elementId) {
        baseProps['data-element-id'] = elementId;
      }

      if (coords) {
        baseProps['data-coords'] = coords;
      }

      return _extends({}, baseProps, props);
    }
  }]);

  return BaseCell;
}(Component);

export default BaseCell;
//# sourceMappingURL=BaseCell.js.map