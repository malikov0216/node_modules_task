import { classNames } from '../utils';

/**
 * A mixin to make an element _selection aware_.
 */
var SelectionAware = {
  getSelectionClasses: function getSelectionClasses() {
    var _state = this.state,
        selected = _state.selected,
        selectedSecondary = _state.selectedSecondary,
        focussed = _state.focussed;


    return classNames({
      'selected': selected,
      'selected-secondary': selectedSecondary,
      'focussed': focussed
    });
  },
  selectionChanged: function selectionChanged(newSelection) {

    // newSelection = { selected, selectedSecondary, focussed }
    this.setState(newSelection);
  },
  componentWillUpdate: function componentWillUpdate(newProps) {
    if (newProps.elementId !== this.props.elementId) {
      this.updateSelectionSubscription(false);
    }
  },
  componentDidUpdate: function componentDidUpdate(oldProps) {

    if (oldProps.elementId !== this.props.elementId) {
      this.updateSelectionSubscription(true);
    }
  },
  componentDidMount: function componentDidMount() {
    this.updateSelectionSubscription(true);
  },
  componentWillUnmount: function componentWillUnmount() {
    this.updateSelectionSubscription(false);
  },
  updateSelectionSubscription: function updateSelectionSubscription(enable) {
    var elementId = this.props.elementId;


    if (!elementId) {
      return;
    }

    if (elementId) {
      this.eventBus[enable ? 'on' : 'off']('selection.' + elementId + '.changed', this.selectionChanged);
    }
  }
};

export default SelectionAware;

SelectionAware.$inject = ['eventBus'];
//# sourceMappingURL=SelectionAware.js.map