{"version":3,"sources":["../../src/model/index.js"],"names":["assign","Base","attrs","defineProperty","writable","Root","enumerable","value","rows","cols","Row","cells","Col","Cell","TYPES","root","row","col","cell","create","type","Type","Error","el","prop","options","Object"],"mappings":";;;;;;AAAA,SAASA,MAAT,QAAuB,UAAvB;;AAGA,WAAaC,IAAb,GAEE,cAAYC,KAAZ,EAAmB;AAAA;;AACjBF,SAAO,IAAP,EAAaE,KAAb;;AAEA;;;;;;AAMAC,iBAAe,IAAf,EAAqB,gBAArB,EAAuC;AACrCC,cAAU;AAD2B,GAAvC;AAGD,CAdH;;AAmBA,WAAaC,IAAb;AAAA;;AAEE,gBAAYH,KAAZ,EAAmB;AAAA;;AAGjB;;;;;;AAHiB,4GACXA,KADW;;AASjBC,0BAAqB,MAArB,EAA6B;AAC3BG,kBAAY,IADe;AAE3BC,aAAO,MAAKC,IAAL,IAAa;AAFO,KAA7B;;AAKA;;;;;;AAMAL,0BAAqB,MAArB,EAA6B;AAC3BG,kBAAY,IADe;AAE3BC,aAAO,MAAKE,IAAL,IAAa;AAFO,KAA7B;AApBiB;AAwBlB;;AA1BH;AAAA,EAA0BR,IAA1B;;AA+BA,WAAaS,GAAb;AAAA;;AAEE,eAAYR,KAAZ,EAAmB;AAAA;;AAGjB;;;;;;AAHiB,2GACXA,KADW;;AASjBC,2BAAqB,MAArB,EAA6B;AAC3BC,gBAAU;AADiB,KAA7B;;AAIA;;;;;;AAMAD,2BAAqB,OAArB,EAA8B;AAC5BG,kBAAY,IADgB;AAE5BC,aAAO,OAAKI,KAAL,IAAc;AAFO,KAA9B;AAnBiB;AAuBlB;;AAzBH;AAAA,EAAyBV,IAAzB;;AA8BA,WAAaW,GAAb;AAAA;;AAEE,eAAYV,KAAZ,EAAmB;AAAA;;AAGjB;;;;;;AAHiB,2GACXA,KADW;;AASjBC,2BAAqB,MAArB,EAA6B;AAC3BC,gBAAU;AADiB,KAA7B;;AAIA;;;;;;AAMAD,2BAAqB,OAArB,EAA8B;AAC5BG,kBAAY,IADgB;AAE5BC,aAAO,OAAKI,KAAL,IAAc;AAFO,KAA9B;AAnBiB;AAuBlB;;AAzBH;AAAA,EAAyBV,IAAzB;;AA6BA,WAAaY,IAAb;AAAA;;AAEE,gBAAYX,KAAZ,EAAmB;AAAA;;AAGjB;;;;;;AAHiB,6GACXA,KADW;;AASjBC,2BAAqB,KAArB,EAA4B;AAC1BC,gBAAU;AADgB,KAA5B;;AAIA;;;;;;AAMAD,2BAAqB,KAArB,EAA4B;AAC1BC,gBAAU;AADgB,KAA5B;AAnBiB;AAsBlB;;AAxBH;AAAA,EAA0BH,IAA1B;;AA6BA,IAAMa,QAAQ;AACZC,QAAMV,IADM;AAEZW,OAAKN,GAFO;AAGZO,OAAKL,GAHO;AAIZM,QAAML;AAJM,CAAd;;AAQA,OAAO,SAASM,MAAT,CAAgBC,IAAhB,EAAsBlB,KAAtB,EAA6B;AAClC,MAAMmB,OAAOP,MAAMM,IAAN,CAAb;;AAEA,MAAI,CAACC,IAAL,EAAW;AACT,UAAM,IAAIC,KAAJ,CAAU,kBAAkBF,IAA5B,CAAN;AACD;;AAED,SAAO,IAAIC,IAAJ,CAASnB,KAAT,CAAP;AACD;;AAGD;;AAEA,SAASC,cAAT,CAAwBoB,EAAxB,EAA4BC,IAA5B,EAAkCC,OAAlC,EAA2C;AACzCC,SAAOvB,cAAP,CAAsBoB,EAAtB,EAA0BC,IAA1B,EAAgCC,OAAhC;AACD","file":"index.js","sourcesContent":["import { assign } from 'min-dash';\n\n\nexport class Base {\n\n  constructor(attrs) {\n    assign(this, attrs);\n\n    /**\n     * The object that backs up the shape\n     *\n     * @name Base#businessObject\n     * @type Object\n     */\n    defineProperty(this, 'businessObject', {\n      writable: true\n    });\n  }\n\n}\n\n\nexport class Root extends Base {\n\n  constructor(attrs) {\n    super(attrs);\n\n    /**\n     * The tables rows\n     *\n     * @name Root#rows\n     * @type Row\n     */\n    defineProperty(this, 'rows', {\n      enumerable: true,\n      value: this.rows || []\n    });\n\n    /**\n     * The tables columns\n     *\n     * @name Root#cols\n     * @type Col\n     */\n    defineProperty(this, 'cols', {\n      enumerable: true,\n      value: this.cols || []\n    });\n  }\n\n}\n\n\nexport class Row extends Base {\n\n  constructor(attrs) {\n    super(attrs);\n\n    /**\n     * Reference to the table\n     *\n     * @name Row#root\n     * @type Root\n     */\n    defineProperty(this, 'root', {\n      writable: true\n    });\n\n    /**\n     * Reference to contained cells\n     *\n     * @name Row#cells\n     * @type Cell\n     */\n    defineProperty(this, 'cells', {\n      enumerable: true,\n      value: this.cells || []\n    });\n  }\n\n}\n\n\nexport class Col extends Base {\n\n  constructor(attrs) {\n    super(attrs);\n\n    /**\n     * Reference to the table\n     *\n     * @name Col#table\n     * @type Root\n     */\n    defineProperty(this, 'root', {\n      writable: true\n    });\n\n    /**\n     * Reference to contained cells\n     *\n     * @name Row#cells\n     * @type Cell\n     */\n    defineProperty(this, 'cells', {\n      enumerable: true,\n      value: this.cells || []\n    });\n  }\n}\n\n\nexport class Cell extends Base {\n\n  constructor(attrs) {\n    super(attrs);\n\n    /**\n     * Reference to the row\n     *\n     * @name Cell#row\n     * @type Row\n     */\n    defineProperty(this, 'row', {\n      writable: true\n    });\n\n    /**\n     * Reference to the col\n     *\n     * @name Cell#col\n     * @type Col\n     */\n    defineProperty(this, 'col', {\n      writable: true\n    });\n  }\n\n}\n\n\nconst TYPES = {\n  root: Root,\n  row: Row,\n  col: Col,\n  cell: Cell\n};\n\n\nexport function create(type, attrs) {\n  const Type = TYPES[type];\n\n  if (!Type) {\n    throw new Error('unknown type ' + type);\n  }\n\n  return new Type(attrs);\n}\n\n\n// helpers /////////////\n\nfunction defineProperty(el, prop, options) {\n  Object.defineProperty(el, prop, options);\n}"]}