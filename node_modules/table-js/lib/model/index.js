function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { assign } from 'min-dash';

export var Base = function Base(attrs) {
  _classCallCheck(this, Base);

  assign(this, attrs);

  /**
   * The object that backs up the shape
   *
   * @name Base#businessObject
   * @type Object
   */
  defineProperty(this, 'businessObject', {
    writable: true
  });
};

export var Root = function (_Base) {
  _inherits(Root, _Base);

  function Root(attrs) {
    _classCallCheck(this, Root);

    /**
     * The tables rows
     *
     * @name Root#rows
     * @type Row
     */
    var _this = _possibleConstructorReturn(this, (Root.__proto__ || Object.getPrototypeOf(Root)).call(this, attrs));

    defineProperty(_this, 'rows', {
      enumerable: true,
      value: _this.rows || []
    });

    /**
     * The tables columns
     *
     * @name Root#cols
     * @type Col
     */
    defineProperty(_this, 'cols', {
      enumerable: true,
      value: _this.cols || []
    });
    return _this;
  }

  return Root;
}(Base);

export var Row = function (_Base2) {
  _inherits(Row, _Base2);

  function Row(attrs) {
    _classCallCheck(this, Row);

    /**
     * Reference to the table
     *
     * @name Row#root
     * @type Root
     */
    var _this2 = _possibleConstructorReturn(this, (Row.__proto__ || Object.getPrototypeOf(Row)).call(this, attrs));

    defineProperty(_this2, 'root', {
      writable: true
    });

    /**
     * Reference to contained cells
     *
     * @name Row#cells
     * @type Cell
     */
    defineProperty(_this2, 'cells', {
      enumerable: true,
      value: _this2.cells || []
    });
    return _this2;
  }

  return Row;
}(Base);

export var Col = function (_Base3) {
  _inherits(Col, _Base3);

  function Col(attrs) {
    _classCallCheck(this, Col);

    /**
     * Reference to the table
     *
     * @name Col#table
     * @type Root
     */
    var _this3 = _possibleConstructorReturn(this, (Col.__proto__ || Object.getPrototypeOf(Col)).call(this, attrs));

    defineProperty(_this3, 'root', {
      writable: true
    });

    /**
     * Reference to contained cells
     *
     * @name Row#cells
     * @type Cell
     */
    defineProperty(_this3, 'cells', {
      enumerable: true,
      value: _this3.cells || []
    });
    return _this3;
  }

  return Col;
}(Base);

export var Cell = function (_Base4) {
  _inherits(Cell, _Base4);

  function Cell(attrs) {
    _classCallCheck(this, Cell);

    /**
     * Reference to the row
     *
     * @name Cell#row
     * @type Row
     */
    var _this4 = _possibleConstructorReturn(this, (Cell.__proto__ || Object.getPrototypeOf(Cell)).call(this, attrs));

    defineProperty(_this4, 'row', {
      writable: true
    });

    /**
     * Reference to the col
     *
     * @name Cell#col
     * @type Col
     */
    defineProperty(_this4, 'col', {
      writable: true
    });
    return _this4;
  }

  return Cell;
}(Base);

var TYPES = {
  root: Root,
  row: Row,
  col: Col,
  cell: Cell
};

export function create(type, attrs) {
  var Type = TYPES[type];

  if (!Type) {
    throw new Error('unknown type ' + type);
  }

  return new Type(attrs);
}

// helpers /////////////

function defineProperty(el, prop, options) {
  Object.defineProperty(el, prop, options);
}
//# sourceMappingURL=index.js.map