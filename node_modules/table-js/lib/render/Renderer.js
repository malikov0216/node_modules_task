var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createComponentVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { render } from 'inferno';

import TableComponent from './components/TableComponent';

var Renderer = function () {
  function Renderer(changeSupport, components, config, eventBus, injector) {
    _classCallCheck(this, Renderer);

    var container = config.container;


    this._container = container;

    eventBus.on('root.added', function () {
      render(createComponentVNode(2, TableComponent, {
        'injector': injector
      }), container);
    });

    eventBus.on('root.remove', function () {
      render(null, container);
    });
  }

  _createClass(Renderer, [{
    key: 'getContainer',
    value: function getContainer() {
      return this._container;
    }
  }]);

  return Renderer;
}();

export default Renderer;


Renderer.$inject = ['changeSupport', 'components', 'config.renderer', 'eventBus', 'injector'];
//# sourceMappingURL=Renderer.js.map