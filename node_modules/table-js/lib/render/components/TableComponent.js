var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode, createComponentVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

var TableComponent = function (_Component) {
  _inherits(TableComponent, _Component);

  function TableComponent(props) {
    _classCallCheck(this, TableComponent);

    var _this = _possibleConstructorReturn(this, (TableComponent.__proto__ || Object.getPrototypeOf(TableComponent)).call(this, props));

    var injector = _this._injector = props.injector;

    _this._sheet = injector.get('sheet');
    _this._changeSupport = injector.get('changeSupport');
    _this._components = injector.get('components');

    _this.onElementsChanged = _this.onElementsChanged.bind(_this);
    return _this;
  }

  _createClass(TableComponent, [{
    key: 'onElementsChanged',
    value: function onElementsChanged() {
      this.forceUpdate();
    }
  }, {
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        changeSupport: this._changeSupport,
        components: this._components,
        injector: this._injector
      };
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _sheet$getRoot = this._sheet.getRoot(),
          id = _sheet$getRoot.id;

      this._changeSupport.onElementsChanged(id, this.onElementsChanged);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var _sheet$getRoot2 = this._sheet.getRoot(),
          id = _sheet$getRoot2.id;

      this._changeSupport.offElementsChanged(id, this.onElementsChanged);
    }
  }, {
    key: 'render',
    value: function render() {
      var _sheet$getRoot3 = this._sheet.getRoot(),
          rows = _sheet$getRoot3.rows,
          cols = _sheet$getRoot3.cols;

      var beforeTableComponents = this._components.getComponents('table.before');
      var afterTableComponents = this._components.getComponents('table.after');

      var Head = this._components.getComponent('table.head');
      var Body = this._components.getComponent('table.body');
      var Foot = this._components.getComponent('table.foot');

      return createVNode(1, 'div', 'tjs-container', [beforeTableComponents && beforeTableComponents.map(function (Component, index) {
        return createComponentVNode(2, Component, null, index);
      }), createVNode(1, 'table', 'tjs-table', [Head && createComponentVNode(2, Head, {
        'rows': rows,
        'cols': cols
      }), Body && createComponentVNode(2, Body, {
        'rows': rows,
        'cols': cols
      }), Foot && createComponentVNode(2, Foot, {
        'rows': rows,
        'cols': cols
      })], 0), afterTableComponents && afterTableComponents.map(function (Component, index) {
        return createComponentVNode(2, Component, null, index);
      })], 0);
    }
  }]);

  return TableComponent;
}(Component);

export default TableComponent;
//# sourceMappingURL=TableComponent.js.map