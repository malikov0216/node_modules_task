var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ElementRegistry = function () {
  function ElementRegistry(eventBus) {
    _classCallCheck(this, ElementRegistry);

    this._eventBus = eventBus;

    this._elements = {};

    eventBus.on('table.clear', this.clear.bind(this));
  }

  _createClass(ElementRegistry, [{
    key: 'add',
    value: function add(element, type) {
      var id = element.id;


      this._elements[id] = element;
    }
  }, {
    key: 'remove',
    value: function remove(element) {
      var id = element.id || element;

      delete this._elements[id];
    }
  }, {
    key: 'get',
    value: function get(id) {
      return this._elements[id];
    }
  }, {
    key: 'getAll',
    value: function getAll() {
      return values(this._elements);
    }
  }, {
    key: 'forEach',
    value: function forEach(fn) {
      values(this._elements).forEach(function (element) {
        return fn(element);
      });
    }
  }, {
    key: 'filter',
    value: function filter(fn) {
      return values(this._elements).filter(function (element) {
        return fn(element);
      });
    }
  }, {
    key: 'clear',
    value: function clear() {
      this._elements = {};
    }
  }, {
    key: 'updateId',
    value: function updateId(element, newId) {

      this._validateId(newId);

      if (typeof element === 'string') {
        element = this.get(element);
      }

      this._eventBus.fire('element.updateId', {
        element: element,
        newId: newId
      });

      this.remove(element);

      element.id = newId;

      this.add(element);
    }

    /**
    * Validate the suitability of the given id and signals a problem
    * with an exception.
    *
    * @param {String} id
    *
    * @throws {Error} if id is empty or already assigned
    */

  }, {
    key: '_validateId',
    value: function _validateId(id) {
      if (!id) {
        throw new Error('element must have an id');
      }

      if (this._elements[id]) {
        throw new Error('element with id ' + id + ' already added');
      }
    }
  }]);

  return ElementRegistry;
}();

export default ElementRegistry;


ElementRegistry.$inject = ['eventBus'];

// helpers

function values(obj) {
  return Object.keys(obj).map(function (k) {
    return obj[k];
  });
}
//# sourceMappingURL=ElementRegistry.js.map