var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { create as _create } from '../model';

var ElementFactory = function () {
  function ElementFactory() {
    _classCallCheck(this, ElementFactory);

    this._uid = 12;
  }

  _createClass(ElementFactory, [{
    key: 'create',
    value: function create(type) {
      var attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (!attrs.id) {
        attrs.id = type + '_' + this._uid++;
      }

      return _create(type, attrs);
    }
  }, {
    key: 'createRoot',
    value: function createRoot(attrs) {
      return this.create('root', attrs);
    }
  }, {
    key: 'createRow',
    value: function createRow(attrs) {
      return this.create('row', attrs);
    }
  }, {
    key: 'createCol',
    value: function createCol(attrs) {
      return this.create('col', attrs);
    }
  }, {
    key: 'createCell',
    value: function createCell(attrs) {
      return this.create('cell', attrs);
    }
  }]);

  return ElementFactory;
}();

export default ElementFactory;
//# sourceMappingURL=ElementFactory.js.map