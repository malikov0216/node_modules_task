var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Sheet = function () {
  function Sheet(elementRegistry, eventBus) {
    var _this = this;

    _classCallCheck(this, Sheet);

    this._elementRegistry = elementRegistry;
    this._eventBus = eventBus;

    this._root = null;

    eventBus.on('table.clear', function () {
      _this.setRoot(null);
    });
  }

  _createClass(Sheet, [{
    key: 'setRoot',
    value: function setRoot(root) {
      if (this._root) {
        var oldRoot = this._root;

        this._eventBus.fire('root.remove', { root: oldRoot });

        this._root = null;

        this._eventBus.fire('root.removed', { root: oldRoot });
      }

      if (root) {
        this._eventBus.fire('root.add', { root: root });
      }

      this._root = root;

      if (root) {
        this._eventBus.fire('root.added', { root: root });
      }
    }
  }, {
    key: 'getRoot',
    value: function getRoot() {
      if (!this._root) {
        this.setRoot({
          id: '__implicitroot',
          rows: [],
          cols: []
        });
      }

      return this._root;
    }

    /**
     * Add row to sheet.
     *
     * @param {Object} row - Row.
     */

  }, {
    key: 'addRow',
    value: function addRow(row, index) {
      var _this2 = this;

      var root = this.getRoot();

      if (root.cols.length != row.cells.length) {
        throw new Error('number of cells is not equal to number of cols');
      }

      if (typeof index === 'undefined') {
        index = root.rows.length;
      }

      addAtIndex(index, root.rows, row);
      row.root = root;

      this._elementRegistry.add(row);

      row.cells.forEach(function (cell, idx) {
        _this2._elementRegistry.add(cell);

        cell.row = row;
        cell.col = root.cols[idx];

        addAtIndex(index, root.cols[idx].cells, cell);
      });

      this._eventBus.fire('row.add', { row: row });

      return row;
    }

    /**
     * Remove row from sheet.
     *
     * @param {Object|string} row - Row or row ID.
     */

  }, {
    key: 'removeRow',
    value: function removeRow(row) {
      var _this3 = this;

      var root = this.getRoot();

      if (typeof row === 'string') {
        row = this._elementRegistry.get(row);
      }

      var index = root.rows.indexOf(row);

      if (index === -1) {
        return;
      }

      removeAtIndex(index, root.rows);
      row.root = undefined;

      this._elementRegistry.remove(row);

      row.cells.forEach(function (cell, idx) {
        _this3._elementRegistry.remove(cell);

        cell.col = undefined;

        removeAtIndex(index, root.cols[idx].cells);
      });

      this._eventBus.fire('row.remove', { row: row });
    }

    /**
     * Add col to sheet.
     *
     * @param {Object} col
     * @param {Number} [index]
     */

  }, {
    key: 'addCol',
    value: function addCol(col, index) {
      var _this4 = this;

      var root = this.getRoot();

      this._elementRegistry.add(col);

      if (root.rows.length != col.cells.length) {
        throw new Error('number of cells is not equal to number of rows');
      }

      if (typeof index === 'undefined') {
        index = root.cols.length;
      }

      addAtIndex(index, root.cols, col);
      col.root = root;

      col.cells.forEach(function (cell, idx) {
        _this4._elementRegistry.add(cell);

        cell.col = col;
        cell.row = root.rows[idx];

        addAtIndex(index, root.rows[idx].cells, cell);
      });

      this._eventBus.fire('col.add', { col: col });

      return col;
    }

    /**
     * Remove col from sheet.
     *
     * @param {Object|string} col - Col or col ID.
     */

  }, {
    key: 'removeCol',
    value: function removeCol(col) {
      var _this5 = this;

      var root = this.getRoot();

      if (typeof col === 'string') {
        col = this._elementRegistry.get(col);
      }

      var index = root.cols.indexOf(col);

      if (index === -1) {
        return;
      }

      removeAtIndex(index, root.cols);
      col.root = undefined;

      this._elementRegistry.remove(col);

      col.cells.forEach(function (cell, idx) {
        _this5._elementRegistry.remove(cell);

        cell.row = undefined;

        removeAtIndex(index, root.rows[idx].cells);
      });

      this._eventBus.fire('col.remove', { col: col });
    }
  }, {
    key: 'resized',
    value: function resized() {
      this._eventBus.fire('sheet.resized');
    }
  }]);

  return Sheet;
}();

export default Sheet;


Sheet.$inject = ['elementRegistry', 'eventBus'];

// helpers /////////////

/**
 * Insert value
 *
 * @param {number} index - Index to insert value at.
 * @param {Array} array - Array to insert value into.
 * @param {*} value - Value to insert.
 */
function addAtIndex(index, array, value) {
  return array.splice(index, 0, value);
}

/**
 *
 * @param {number} index - Index to remove.
 * @param {Array} array - Array to remove from.
 */
function removeAtIndex(index, array) {
  return array.splice(index, 1);
}
//# sourceMappingURL=Sheet.js.map