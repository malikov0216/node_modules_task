var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { forEach } from 'min-dash';

import { Base } from '../../model';

import AddRowHandler from './cmd/AddRowHandler';
import RemoveRowHandler from './cmd/RemoveRowHandler';
import MoveRowHandler from './cmd/MoveRowHandler';
import AddColHandler from './cmd/AddColHandler';
import RemoveColHandler from './cmd/RemoveColHandler';
import MoveColHandler from './cmd/MoveColHandler';
import EditCellHandler from './cmd/EditCellHandler';

/**
 * The basic modeling entry point.
 *
 * @param {EventBus} eventBus
 * @param {ElementFactory} elementFactory
 * @param {CommandStack} commandStack
 */

var Modeling = function () {
  function Modeling(eventBus, elementFactory, commandStack) {
    var _this = this;

    _classCallCheck(this, Modeling);

    this._eventBus = eventBus;
    this._elementFactory = elementFactory;
    this._commandStack = commandStack;

    eventBus.on('table.init', function () {

      // register modeling handlers
      registerHandlers(_this.getHandlers(), commandStack);
    });
  }

  _createClass(Modeling, [{
    key: 'getHandlers',
    value: function getHandlers() {
      return Modeling._getHandlers();
    }
  }, {
    key: '_create',
    value: function _create(type, attrs) {
      if (attrs instanceof Base) {
        return attrs;
      } else {
        return this._elementFactory.create(type, attrs);
      }
    }

    // public API

  }, {
    key: 'addRow',
    value: function addRow(attrs, index) {
      var row = this._create('row', attrs);

      var context = {
        row: row,
        index: index
      };

      this._commandStack.execute('row.add', context);

      return row;
    }
  }, {
    key: 'removeRow',
    value: function removeRow(row) {
      this._commandStack.execute('row.remove', { row: row });
    }
  }, {
    key: 'moveRow',
    value: function moveRow(row, index) {
      var context = {
        row: row,
        index: index
      };

      this._commandStack.execute('row.move', context);
    }
  }, {
    key: 'addCol',
    value: function addCol(attrs, index) {
      var col = this._create('col', attrs);

      var context = {
        col: col,
        index: index
      };

      this._commandStack.execute('col.add', context);

      return col;
    }
  }, {
    key: 'removeCol',
    value: function removeCol(col) {
      this._commandStack.execute('col.remove', { col: col });
    }
  }, {
    key: 'moveCol',
    value: function moveCol(col, index) {
      var context = {
        col: col,
        index: index
      };

      this._commandStack.execute('col.move', context);
    }
  }, {
    key: 'editCell',
    value: function editCell(cell, changedAttrs) {
      var context = _extends({
        cell: cell
      }, changedAttrs);

      this._commandStack.execute('cell.edit', context);
    }
  }], [{
    key: '_getHandlers',
    value: function _getHandlers() {
      return {
        'row.add': AddRowHandler,
        'row.remove': RemoveRowHandler,
        'row.move': MoveRowHandler,

        'col.add': AddColHandler,
        'col.remove': RemoveColHandler,
        'col.move': MoveColHandler,

        'cell.edit': EditCellHandler
      };
    }
  }]);

  return Modeling;
}();

export default Modeling;


Modeling.$inject = ['eventBus', 'elementFactory', 'commandStack'];

// helpers /////////////


/**
 * Register handlers with the command stack
 *
 * @param {Object} handlers { id -> Handler } map
 * @param {CommandStack} commandStack
 */
function registerHandlers(handlers, commandStack) {
  forEach(handlers, function (handler, id) {
    commandStack.registerHandler(id, handler);
  });
}
//# sourceMappingURL=Modeling.js.map