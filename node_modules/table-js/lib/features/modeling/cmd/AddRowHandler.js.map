{"version":3,"sources":["../../../../src/features/modeling/cmd/AddRowHandler.js"],"names":["AddRowHandler","sheet","elementFactory","_sheet","_elementFactory","context","root","getRoot","row","index","rows","length","newRoot","cells","cols","forEach","col","idx","cell","create","addRow","removeRow","$inject"],"mappings":";;;;AACA;;;IAGqBA,a;AAEnB,yBAAYC,KAAZ,EAAmBC,cAAnB,EAAmC;AAAA;;AACjC,SAAKC,MAAL,GAAcF,KAAd;AACA,SAAKG,eAAL,GAAuBF,cAAvB;AACD;;AAGD;;;;;;;4BAGQG,O,EAAS;;AAEf,UAAMJ,QAAQ,KAAKE,MAAnB;AAAA,UACMD,iBAAiB,KAAKE,eAD5B;AAAA,UAEME,OAAOL,MAAMM,OAAN,EAFb;;AAFe,UAObC,GAPa,GASXH,OATW,CAObG,GAPa;AAAA,UAQbC,KARa,GASXJ,OATW,CAQbI,KARa;;;AAWf,UAAI,OAAOA,KAAP,KAAiB,WAArB,EAAkC;AAChCA,gBAAQJ,QAAQI,KAAR,GAAgBH,KAAKI,IAAL,CAAUC,MAAlC;AACD;;AAEDN,cAAQO,OAAR,GAAkBN,IAAlB;;AAEA,UAAI,CAACE,IAAIK,KAAJ,CAAUF,MAAf,EAAuB;AACrBL,aAAKQ,IAAL,CAAUC,OAAV,CAAkB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC9B,cAAMC,OAAOhB,eAAeiB,MAAf,CAAsB,MAAtB,EAA8B,EAAEX,QAAF,EAAOQ,QAAP,EAA9B,CAAb;;AAEAR,cAAIK,KAAJ,CAAUI,GAAV,IAAiBC,IAAjB;AACD,SAJD;AAKD;;AAEDjB,YAAMmB,MAAN,CAAaZ,GAAb,EAAkBC,KAAlB;;AAEA,aAAOR,MAAMM,OAAN,EAAP;AACD;;AAGD;;;;;;2BAGOF,O,EAAS;AAAA,UAGZG,GAHY,GAIVH,OAJU,CAGZG,GAHY;;;AAMd,UAAMP,QAAQ,KAAKE,MAAnB;;AAEAF,YAAMoB,SAAN,CAAgBb,GAAhB;;AAEA,aAAOP,MAAMM,OAAN,EAAP;AACD;;;;;;eAxDkBP,a;;;AA4DrBA,cAAcsB,OAAd,GAAwB,CACtB,OADsB,EAEtB,gBAFsB,CAAxB","file":"AddRowHandler.js","sourcesContent":["\n/**\n * A handler that implements row addition.\n */\nexport default class AddRowHandler {\n\n  constructor(sheet, elementFactory) {\n    this._sheet = sheet;\n    this._elementFactory = elementFactory;\n  }\n\n\n  /**\n   * <do>\n   */\n  execute(context) {\n\n    const sheet = this._sheet,\n          elementFactory = this._elementFactory,\n          root = sheet.getRoot();\n\n    let {\n      row,\n      index\n    } = context;\n\n    if (typeof index === 'undefined') {\n      index = context.index = root.rows.length;\n    }\n\n    context.newRoot = root;\n\n    if (!row.cells.length) {\n      root.cols.forEach((col, idx) => {\n        const cell = elementFactory.create('cell', { row, col });\n\n        row.cells[idx] = cell;\n      });\n    }\n\n    sheet.addRow(row, index);\n\n    return sheet.getRoot();\n  }\n\n\n  /**\n   * <undo>\n   */\n  revert(context) {\n\n    const {\n      row\n    } = context;\n\n    const sheet = this._sheet;\n\n    sheet.removeRow(row);\n\n    return sheet.getRoot();\n  }\n\n}\n\nAddRowHandler.$inject = [\n  'sheet',\n  'elementFactory'\n];"]}