var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * A handler that implements row deletion.
 */
var RemoveRowHandler = function () {
  function RemoveRowHandler(sheet) {
    _classCallCheck(this, RemoveRowHandler);

    this._sheet = sheet;
  }

  /**
   * <do>
   */


  _createClass(RemoveRowHandler, [{
    key: 'execute',
    value: function execute(context) {

      var sheet = this._sheet,
          root = sheet.getRoot();

      var row = context.row;

      // retrieve and remember previous row position

      var oldIndex = context.oldIndex = root.rows.indexOf(row);

      context.oldRoot = row.root;

      if (oldIndex === -1) {
        throw new Error('row#' + row.id + ' not in sheet');
      }

      sheet.removeRow(row);

      return sheet.getRoot();
    }

    /**
     * <undo>
     */

  }, {
    key: 'revert',
    value: function revert(context) {
      var row = context.row,
          oldIndex = context.oldIndex;


      var sheet = this._sheet;

      sheet.addRow(row, oldIndex);

      return sheet.getRoot();
    }
  }]);

  return RemoveRowHandler;
}();

export default RemoveRowHandler;


RemoveRowHandler.$inject = ['sheet'];
//# sourceMappingURL=RemoveRowHandler.js.map