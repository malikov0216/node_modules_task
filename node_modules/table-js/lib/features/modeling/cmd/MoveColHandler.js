var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * A handler that implements col movement.
 */
var MoveColHandler = function () {
  function MoveColHandler(modeling) {
    _classCallCheck(this, MoveColHandler);

    this._modeling = modeling;
  }

  /**
   * <preexecute>
   */


  _createClass(MoveColHandler, [{
    key: 'preExecute',
    value: function preExecute(context) {
      var col = context.col;


      this._modeling.removeCol(col);
    }

    /**
     * <postexecute>
     */

  }, {
    key: 'postExecute',
    value: function postExecute(context) {
      var col = context.col,
          index = context.index;


      this._modeling.addCol(col, index);
    }
  }]);

  return MoveColHandler;
}();

export default MoveColHandler;


MoveColHandler.$inject = ['modeling'];
//# sourceMappingURL=MoveColHandler.js.map