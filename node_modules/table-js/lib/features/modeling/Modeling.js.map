{"version":3,"sources":["../../../src/features/modeling/Modeling.js"],"names":["forEach","Base","AddRowHandler","RemoveRowHandler","MoveRowHandler","AddColHandler","RemoveColHandler","MoveColHandler","EditCellHandler","Modeling","eventBus","elementFactory","commandStack","_eventBus","_elementFactory","_commandStack","on","registerHandlers","getHandlers","_getHandlers","type","attrs","create","index","row","_create","context","execute","col","cell","changedAttrs","$inject","handlers","handler","id","registerHandler"],"mappings":"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","file":"Modeling.js","sourcesContent":["import { forEach } from 'min-dash';\n\nimport { Base } from '../../model';\n\nimport AddRowHandler from './cmd/AddRowHandler';\nimport RemoveRowHandler from './cmd/RemoveRowHandler';\nimport MoveRowHandler from './cmd/MoveRowHandler';\nimport AddColHandler from './cmd/AddColHandler';\nimport RemoveColHandler from './cmd/RemoveColHandler';\nimport MoveColHandler from './cmd/MoveColHandler';\nimport EditCellHandler from './cmd/EditCellHandler';\n\n\n/**\n * The basic modeling entry point.\n *\n * @param {EventBus} eventBus\n * @param {ElementFactory} elementFactory\n * @param {CommandStack} commandStack\n */\nexport default class Modeling {\n\n  constructor(eventBus, elementFactory, commandStack) {\n    this._eventBus = eventBus;\n    this._elementFactory = elementFactory;\n    this._commandStack = commandStack;\n\n    eventBus.on('table.init', () => {\n\n      // register modeling handlers\n      registerHandlers(this.getHandlers(), commandStack);\n    });\n  }\n\n\n  getHandlers() {\n    return Modeling._getHandlers();\n  }\n\n\n  static _getHandlers() {\n    return {\n      'row.add': AddRowHandler,\n      'row.remove': RemoveRowHandler,\n      'row.move': MoveRowHandler,\n\n      'col.add': AddColHandler,\n      'col.remove': RemoveColHandler,\n      'col.move': MoveColHandler,\n\n      'cell.edit': EditCellHandler\n    };\n  }\n\n\n  _create(type, attrs) {\n    if (attrs instanceof Base) {\n      return attrs;\n    } else {\n      return this._elementFactory.create(type, attrs);\n    }\n  }\n\n\n  // public API\n\n  addRow(attrs, index) {\n    const row = this._create('row', attrs);\n\n    const context = {\n      row,\n      index\n    };\n\n    this._commandStack.execute('row.add', context);\n\n    return row;\n  }\n\n  removeRow(row) {\n    this._commandStack.execute('row.remove', { row });\n  }\n\n  moveRow(row, index) {\n    const context = {\n      row,\n      index\n    };\n\n    this._commandStack.execute('row.move', context);\n  }\n\n  addCol(attrs, index) {\n    const col = this._create('col', attrs);\n\n    const context = {\n      col,\n      index\n    };\n\n    this._commandStack.execute('col.add', context);\n\n    return col;\n  }\n\n  removeCol(col) {\n    this._commandStack.execute('col.remove', { col });\n  }\n\n  moveCol(col, index) {\n    const context = {\n      col,\n      index\n    };\n\n    this._commandStack.execute('col.move', context);\n  }\n\n  editCell(cell, changedAttrs) {\n    const context = {\n      cell,\n      ...changedAttrs\n    };\n\n    this._commandStack.execute('cell.edit', context);\n  }\n\n}\n\nModeling.$inject = [\n  'eventBus',\n  'elementFactory',\n  'commandStack'\n];\n\n\n// helpers /////////////\n\n\n/**\n * Register handlers with the command stack\n *\n * @param {Object} handlers { id -> Handler } map\n * @param {CommandStack} commandStack\n */\nfunction registerHandlers(handlers, commandStack) {\n  forEach(handlers, function(handler, id) {\n    commandStack.registerHandler(id, handler);\n  });\n}\n"]}