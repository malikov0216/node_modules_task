var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { closest as domClosest } from 'min-dom';

var EVENTS = ['click', 'dblclick', 'contextmenu', 'mousedown', 'mouseup', 'mouseenter', 'mouseleave', 'mouseout', 'mouseover', 'mousemove', 'focusin', 'focusout', 'drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop'];

/**
 * Provides interaction events on the table.
 *
 * @param {RenderConfig} config
 * @param {EventBus} eventBus
 */

var InteractionEvents = function () {
  function InteractionEvents(config, eventBus) {
    var _this = this;

    _classCallCheck(this, InteractionEvents);

    this._handleEvent = function (event) {
      var target = event.target,
          type = event.type;


      var node = findClosestCell(target);

      if (!node) {
        return;
      }

      var elementId = node.getAttribute('data-element-id');

      if (elementId) {
        var e = _this._eventBus.createEvent({
          id: elementId,
          event: event,
          node: node,
          target: node
        });

        _this._eventBus.fire('cell.' + type, e);

        if (e.defaultPrevented) {
          event.preventDefault();
        }

        if (e.cancelBubble) {
          event.stopPropagation();
        }
      }
    };

    this._eventBus = eventBus;
    this._container = config.container;

    eventBus.on('table.init', function () {
      _this._addEventListeners(EVENTS);
    });

    eventBus.on('table.destroy', function () {
      _this._removeEventListeners(EVENTS);
    });
  }

  _createClass(InteractionEvents, [{
    key: '_addEventListeners',
    value: function _addEventListeners(events) {
      var _this2 = this;

      var container = this._container;

      events.forEach(function (event) {
        container.addEventListener(event, _this2._handleEvent);
      });
    }
  }, {
    key: '_removeEventListeners',
    value: function _removeEventListeners(events) {
      var _this3 = this;

      var container = this._container;

      events.forEach(function (event) {
        container.removeEventListener(event, _this3._handleEvent);
      });
    }
  }]);

  return InteractionEvents;
}();

export default InteractionEvents;


InteractionEvents.$inject = ['config.renderer', 'eventBus'];

// helpers /////////////

function findClosestCell(element) {
  return domClosest(element, '[data-element-id]', true);
}
//# sourceMappingURL=InteractionEvents.js.map