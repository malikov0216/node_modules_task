var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { isString } from 'min-dash';

/**
 * Allows selecting a table cell. Selected cell will be highlighted.
 */

var Selection = function () {
  function Selection(elementRegistry, eventBus, renderer) {
    var _this = this;

    _classCallCheck(this, Selection);

    this._elementRegistry = elementRegistry;
    this._eventBus = eventBus;
    this._renderer = renderer;

    this._selection = undefined;

    eventBus.on('diagram.clear', function () {
      _this._selection = undefined;
    });
  }

  /**
   * Select a table cell.
   *
   * @param {Object|String} element - Element or element ID.
   */


  _createClass(Selection, [{
    key: 'select',
    value: function select(element) {

      if (isString(element)) {
        element = this._elementRegistry.get(element);
      }

      var oldSelection = this._selection;

      // don't re-select already selected *Ggg*
      if (oldSelection === element) {
        return;
      }

      this._selection = element;

      this._eventBus.fire('selection.changed', {
        oldSelection: oldSelection,
        selection: element
      });
    }

    /**
     * Deselect a table cell.
     */

  }, {
    key: 'deselect',
    value: function deselect() {

      var oldSelection = this._selection;

      this._selection = undefined;

      this._eventBus.fire('selection.changed', {
        oldSelection: oldSelection,
        selection: this._selection
      });
    }

    /**
     * Get the selected cell.
     */

  }, {
    key: 'get',
    value: function get() {
      return this._selection;
    }

    /**
     * Check if a cell is selected.
     */

  }, {
    key: 'hasSelection',
    value: function hasSelection() {
      return !!this._selection;
    }
  }]);

  return Selection;
}();

export default Selection;


Selection.$inject = ['elementRegistry', 'eventBus', 'renderer'];
//# sourceMappingURL=Selection.js.map