var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import Viewer from './Viewer';

import DecisionPropertiesEditorModule from './features/decision-properties/editor';
import KeyboardModule from './features/keyboard';
import LiteralExpressionPropertiesEditorModule from './features/literal-expression-properties/editor';
import ModelingModule from './features/modeling';
import TextareaEditorComponent from './features/textarea/editor';

var Editor = function (_Viewer) {
  _inherits(Editor, _Viewer);

  function Editor() {
    _classCallCheck(this, Editor);

    return _possibleConstructorReturn(this, (Editor.__proto__ || Object.getPrototypeOf(Editor)).apply(this, arguments));
  }

  _createClass(Editor, [{
    key: 'getModules',
    value: function getModules() {
      return [].concat(_toConsumableArray(Viewer._getModules()), _toConsumableArray(Editor._getModules()));
    }
  }], [{
    key: '_getModules',
    value: function _getModules() {
      return [DecisionPropertiesEditorModule, KeyboardModule, LiteralExpressionPropertiesEditorModule, ModelingModule, TextareaEditorComponent];
    }
  }]);

  return Editor;
}(Viewer);

export default Editor;
//# sourceMappingURL=Editor.js.map