var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import ViewDrdComponent from './components/ViewDrdComponent';

var HIGH_PRIORITY = 1500;

var ViewDrd = function () {
  function ViewDrd(components, viewer, eventBus, injector) {
    var _this = this;

    _classCallCheck(this, ViewDrd);

    this._injector = injector;
    this._viewer = viewer;

    components.onGetComponent('viewer', HIGH_PRIORITY, function () {
      if (_this.canViewDrd()) {
        return ViewDrdComponent;
      }
    });

    eventBus.on('showDrd', function () {
      var parent = injector.get('_parent', false);

      // there is only one single element
      var definitions = _this.getDefinitions();

      // open definitions
      var view = parent.getView(definitions);

      parent.open(view);
    });
  }

  _createClass(ViewDrd, [{
    key: 'canViewDrd',
    value: function canViewDrd() {
      var parent = this._injector.get('_parent', false);

      if (!parent) {
        return;
      }

      // there is only one single element
      var definitions = this.getDefinitions();

      return !!parent.getView(definitions);
    }
  }, {
    key: 'getDefinitions',
    value: function getDefinitions() {
      return _getDefinitions(this._viewer.getDecision());
    }
  }]);

  return ViewDrd;
}();

export default ViewDrd;


ViewDrd.$inject = ['components', 'viewer', 'eventBus', 'injector'];

// helpers //////////////////////

function _getDefinitions(decision) {
  var definitions = decision.$parent;

  return definitions;
}
//# sourceMappingURL=ViewDrd.js.map