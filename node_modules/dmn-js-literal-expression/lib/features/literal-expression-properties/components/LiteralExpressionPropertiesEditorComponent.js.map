{"version":3,"sources":["../../../../src/features/literal-expression-properties/components/LiteralExpressionPropertiesEditorComponent.js"],"names":["Component","Input","InputSelect","EXPRESSION_LANGUAGE_OPTIONS","label","value","TYPE_REF_OPTIONS","LiteralExpressionPropertiesComponent","props","context","_viewer","injector","get","_modeling","decision","getDecision","state","name","variable","typeRef","expressionLanguage","getExpressionLanguage","literalExpression","setVariableName","bind","setVariableType","setExpressionLanguage","editVariableName","setState","editVariableType","undefined","editExpressionLanguage","toLowerCase"],"mappings":"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","file":"LiteralExpressionPropertiesEditorComponent.js","sourcesContent":["import { Component } from 'inferno';\r\n\r\nimport Input from 'dmn-js-shared/lib/components/Input';\r\nimport InputSelect from 'dmn-js-shared/lib/components/InputSelect';\r\n\r\nconst EXPRESSION_LANGUAGE_OPTIONS = [{\r\n  label: 'FEEL',\r\n  value: 'feel'\r\n}, {\r\n  label: 'JUEL',\r\n  value: 'juel'\r\n}, {\r\n  label: 'JavaScript',\r\n  value: 'javascript'\r\n}, {\r\n  label: 'Groovy',\r\n  value: 'groovy'\r\n}, {\r\n  label: 'Python',\r\n  value: 'python'\r\n}, {\r\n  label: 'JRuby',\r\n  value: 'jruby'\r\n}];\r\n\r\nconst TYPE_REF_OPTIONS = [{\r\n  label: 'string',\r\n  value: 'string'\r\n}, {\r\n  label: 'boolean',\r\n  value: 'boolean'\r\n}, {\r\n  label: 'integer',\r\n  value: 'integer'\r\n}, {\r\n  label: 'long',\r\n  value: 'long'\r\n}, {\r\n  label: 'double',\r\n  value: 'double'\r\n}, {\r\n  label: 'date',\r\n  value: 'date'\r\n}];\r\n\r\n\r\nexport default class LiteralExpressionPropertiesComponent extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this._viewer = context.injector.get('viewer');\r\n    this._modeling = context.injector.get('modeling');\r\n\r\n    const decision = this._viewer.getDecision();\r\n\r\n    this.state = {\r\n      name: decision.variable.name,\r\n      typeRef: decision.variable.typeRef,\r\n      expressionLanguage: getExpressionLanguage(decision.literalExpression)\r\n    };\r\n\r\n    this.setVariableName = this.setVariableName.bind(this);\r\n    this.setVariableType = this.setVariableType.bind(this);\r\n    this.setExpressionLanguage = this.setExpressionLanguage.bind(this);\r\n  }\r\n\r\n  setVariableName(name) {\r\n    this._modeling.editVariableName(name);\r\n\r\n    this.setState({\r\n      name\r\n    });\r\n  }\r\n\r\n  setVariableType(typeRef) {\r\n    if (typeRef === '') {\r\n      this._modeling.editVariableType(undefined);\r\n\r\n      this.setState({\r\n        typeRef: undefined\r\n      });\r\n    } else {\r\n      this._modeling.editVariableType(typeRef);\r\n\r\n      this.setState({\r\n        typeRef\r\n      });\r\n    }\r\n  }\r\n\r\n  setExpressionLanguage(expressionLanguage) {\r\n    if (expressionLanguage === '') {\r\n      this._modeling.editExpressionLanguage(undefined);\r\n\r\n      this.setState({\r\n        expressionLanguage: undefined\r\n      });\r\n    } else {\r\n      this._modeling.editExpressionLanguage(expressionLanguage);\r\n\r\n      this.setState({\r\n        expressionLanguage\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let { expressionLanguage, name, typeRef } = this.state;\r\n\r\n    return (\r\n      <div className=\"literal-expression-properties\">\r\n        <table>\r\n          <tr>\r\n            <td>Variable Name:</td>\r\n            <td>\r\n              <Input\r\n                className=\"variable-name-input\"\r\n                onInput={ this.setVariableName }\r\n                placeholder={ 'name' }\r\n                value={ name || '' } />\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>Variable Type:</td>\r\n            <td>\r\n              <div className=\"dms-fill-row\">\r\n                <InputSelect\r\n                  onChange={ this.setVariableType }\r\n                  options={ TYPE_REF_OPTIONS }\r\n                  value={ typeRef }\r\n                  className=\"variable-type-select dms-block\" />\r\n              </div>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>Expression Language:</td>\r\n            <td>\r\n              <div className=\"dms-fill-row\">\r\n                <InputSelect\r\n                  onChange={ this.setExpressionLanguage }\r\n                  options={ EXPRESSION_LANGUAGE_OPTIONS }\r\n                  value={ expressionLanguage }\r\n                  className=\"expression-language-select dms-block\" />\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n// helpers //////////////////////\r\n\r\nfunction getExpressionLanguage(literalExpression) {\r\n  return (literalExpression && literalExpression.expressionLanguage)\r\n    ? literalExpression.expressionLanguage.toLowerCase()\r\n    : undefined;\r\n}"]}