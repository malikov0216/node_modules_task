var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode, createComponentVNode, createTextVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

import Input from 'dmn-js-shared/lib/components/Input';
import InputSelect from 'dmn-js-shared/lib/components/InputSelect';

var EXPRESSION_LANGUAGE_OPTIONS = [{
  label: 'FEEL',
  value: 'feel'
}, {
  label: 'JUEL',
  value: 'juel'
}, {
  label: 'JavaScript',
  value: 'javascript'
}, {
  label: 'Groovy',
  value: 'groovy'
}, {
  label: 'Python',
  value: 'python'
}, {
  label: 'JRuby',
  value: 'jruby'
}];

var TYPE_REF_OPTIONS = [{
  label: 'string',
  value: 'string'
}, {
  label: 'boolean',
  value: 'boolean'
}, {
  label: 'integer',
  value: 'integer'
}, {
  label: 'long',
  value: 'long'
}, {
  label: 'double',
  value: 'double'
}, {
  label: 'date',
  value: 'date'
}];

var LiteralExpressionPropertiesComponent = function (_Component) {
  _inherits(LiteralExpressionPropertiesComponent, _Component);

  function LiteralExpressionPropertiesComponent(props, context) {
    _classCallCheck(this, LiteralExpressionPropertiesComponent);

    var _this = _possibleConstructorReturn(this, (LiteralExpressionPropertiesComponent.__proto__ || Object.getPrototypeOf(LiteralExpressionPropertiesComponent)).call(this, props, context));

    _this._viewer = context.injector.get('viewer');
    _this._modeling = context.injector.get('modeling');

    var decision = _this._viewer.getDecision();

    _this.state = {
      name: decision.variable.name,
      typeRef: decision.variable.typeRef,
      expressionLanguage: getExpressionLanguage(decision.literalExpression)
    };

    _this.setVariableName = _this.setVariableName.bind(_this);
    _this.setVariableType = _this.setVariableType.bind(_this);
    _this.setExpressionLanguage = _this.setExpressionLanguage.bind(_this);
    return _this;
  }

  _createClass(LiteralExpressionPropertiesComponent, [{
    key: 'setVariableName',
    value: function setVariableName(name) {
      this._modeling.editVariableName(name);

      this.setState({
        name: name
      });
    }
  }, {
    key: 'setVariableType',
    value: function setVariableType(typeRef) {
      if (typeRef === '') {
        this._modeling.editVariableType(undefined);

        this.setState({
          typeRef: undefined
        });
      } else {
        this._modeling.editVariableType(typeRef);

        this.setState({
          typeRef: typeRef
        });
      }
    }
  }, {
    key: 'setExpressionLanguage',
    value: function setExpressionLanguage(expressionLanguage) {
      if (expressionLanguage === '') {
        this._modeling.editExpressionLanguage(undefined);

        this.setState({
          expressionLanguage: undefined
        });
      } else {
        this._modeling.editExpressionLanguage(expressionLanguage);

        this.setState({
          expressionLanguage: expressionLanguage
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          expressionLanguage = _state.expressionLanguage,
          name = _state.name,
          typeRef = _state.typeRef;


      return createVNode(1, 'div', 'literal-expression-properties', createVNode(1, 'table', null, [createVNode(1, 'tr', null, [createVNode(1, 'td', null, createTextVNode('Variable Name:'), 2), createVNode(1, 'td', null, createComponentVNode(2, Input, {
        'className': 'variable-name-input',
        'onInput': this.setVariableName,
        'placeholder': 'name',
        'value': name || ''
      }), 2)], 4), createVNode(1, 'tr', null, [createVNode(1, 'td', null, createTextVNode('Variable Type:'), 2), createVNode(1, 'td', null, createVNode(1, 'div', 'dms-fill-row', createComponentVNode(2, InputSelect, {
        'onChange': this.setVariableType,
        'options': TYPE_REF_OPTIONS,
        'value': typeRef,
        'className': 'variable-type-select dms-block'
      }), 2), 2)], 4), createVNode(1, 'tr', null, [createVNode(1, 'td', null, createTextVNode('Expression Language:'), 2), createVNode(1, 'td', null, createVNode(1, 'div', 'dms-fill-row', createComponentVNode(2, InputSelect, {
        'onChange': this.setExpressionLanguage,
        'options': EXPRESSION_LANGUAGE_OPTIONS,
        'value': expressionLanguage,
        'className': 'expression-language-select dms-block'
      }), 2), 2)], 4)], 4), 2);
    }
  }]);

  return LiteralExpressionPropertiesComponent;
}(Component);

// helpers //////////////////////

export default LiteralExpressionPropertiesComponent;
function getExpressionLanguage(literalExpression) {
  return literalExpression && literalExpression.expressionLanguage ? literalExpression.expressionLanguage.toLowerCase() : undefined;
}
//# sourceMappingURL=LiteralExpressionPropertiesEditorComponent.js.map