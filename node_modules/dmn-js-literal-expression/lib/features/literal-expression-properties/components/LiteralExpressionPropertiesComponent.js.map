{"version":3,"sources":["../../../../src/features/literal-expression-properties/components/LiteralExpressionPropertiesComponent.js"],"names":["Component","LiteralExpressionPropertiesComponent","props","context","_viewer","injector","get","getDecision","literalExpression","variable","name","typeRef","expressionLanguage"],"mappings":";;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,SAA1B;;IAGqBC,oC;;;AACnB,gDAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,4KACpBD,KADoB,EACbC,OADa;;AAG1B,UAAKC,OAAL,GAAeD,QAAQE,QAAR,CAAiBC,GAAjB,CAAqB,QAArB,CAAf;AAH0B;AAI3B;;;;6BAEQ;AAAA,gCACiC,KAAKF,OAAL,CAAaG,WAAb,EADjC;AAAA,UACCC,iBADD,uBACCA,iBADD;AAAA,UACoBC,QADpB,uBACoBA,QADpB;;AAGP,mCACiB,+BADjB,uLAMkBA,SAASC,IAAT,IAAiB,GANnC,qKAYkBD,SAASE,OAAT,IAAoB,GAZtC,2KAkBkBH,kBAAkBI,kBAAlB,IAAwC,GAlB1D;AAwBD;;;;EAlC+DZ,S;;eAA7CC,oC","file":"LiteralExpressionPropertiesComponent.js","sourcesContent":["import { Component } from 'inferno';\r\n\r\n\r\nexport default class LiteralExpressionPropertiesComponent extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this._viewer = context.injector.get('viewer');\r\n  }\r\n\r\n  render() {\r\n    const { literalExpression, variable } = this._viewer.getDecision();\r\n\r\n    return (\r\n      <div className=\"literal-expression-properties\">\r\n        <table>\r\n          <tr>\r\n            <td>Variable Name:</td>\r\n            <td>\r\n              <span>{ variable.name || '-' }</span>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>Variable Type:</td>\r\n            <td>\r\n              <span>{ variable.typeRef || '-' }</span>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>Expression Language:</td>\r\n            <td>\r\n              <span>{ literalExpression.expressionLanguage || '-' }</span>\r\n            </td>\r\n          </tr>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}"]}