{"version":3,"sources":["../../../src/features/modeling/Modeling.js"],"names":["forEach","UpdatePropertiesHandler","Modeling","commandStack","viewer","eventBus","_commandStack","_viewer","_eventBus","on","registerHandlers","getHandlers","_getHandlers","getDecision","name","decision","context","element","properties","execute","id","text","literalExpression","expressionLanguage","variable","typeRef","$inject","handlers","handler","registerHandler"],"mappings":";;;;AAAA,SACEA,OADF,QAEO,UAFP;;AAIA,OAAOC,uBAAP,MACO,iEADP;;IAIqBC,Q;AAEnB,oBAAYC,YAAZ,EAA0BC,MAA1B,EAAkCC,QAAlC,EAA4C;AAAA;;AAAA;;AAC1C,SAAKC,aAAL,GAAqBH,YAArB;AACA,SAAKI,OAAL,GAAeH,MAAf;AACA,SAAKI,SAAL,GAAiBH,QAAjB;;AAEAA,aAASI,EAAT,CAAY,aAAZ,EAA2B,YAAM;;AAE/B;AACAC,uBAAiB,MAAKC,WAAL,EAAjB,EAAqCR,YAArC;AACD,KAJD;AAKD;;;;kCAEa;AACZ,aAAOD,SAASU,YAAT,EAAP;AACD;;;kCAQa;AACZ,aAAO,KAAKL,OAAL,CAAaM,WAAb,EAAP;AACD;;;qCAEgBC,I,EAAM;AACrB,UAAMC,WAAW,KAAKF,WAAL,EAAjB;;AAEA,UAAMG,UAAU;AACdC,iBAASF,QADK;AAEdG,oBAAY;AACVJ;AADU;AAFE,OAAhB;;AAOA,WAAKR,aAAL,CAAmBa,OAAnB,CAA2B,kBAA3B,EAA+CH,OAA/C;AACD;;;mCAEcI,E,EAAI;AACjB,UAAML,WAAW,KAAKF,WAAL,EAAjB;;AAEA,UAAMG,UAAU;AACdC,iBAASF,QADK;AAEdG,oBAAY;AACVE;AADU;AAFE,OAAhB;;AAOA,WAAKd,aAAL,CAAmBa,OAAnB,CAA2B,kBAA3B,EAA+CH,OAA/C;AACD;;;8CAEyBK,I,EAAM;AAC9B,UAAMN,WAAW,KAAKF,WAAL,EAAjB;AAAA,UACMS,oBAAoBP,SAASO,iBADnC;;AAGA,UAAMN,UAAU;AACdC,iBAASK,iBADK;AAEdJ,oBAAY;AACVG;AADU;AAFE,OAAhB;;AAOA,WAAKf,aAAL,CAAmBa,OAAnB,CAA2B,kBAA3B,EAA+CH,OAA/C;AACD;;;2CAEsBO,kB,EAAoB;AACzC,UAAMR,WAAW,KAAKF,WAAL,EAAjB;AAAA,UACMS,oBAAoBP,SAASO,iBADnC;;AAGA,UAAMN,UAAU;AACdC,iBAASK,iBADK;AAEdJ,oBAAY;AACVK;AADU;AAFE,OAAhB;;AAOA,WAAKjB,aAAL,CAAmBa,OAAnB,CAA2B,kBAA3B,EAA+CH,OAA/C;AACD;;;qCAEgBF,I,EAAM;AACrB,UAAMC,WAAW,KAAKF,WAAL,EAAjB;AAAA,UACMW,WAAWT,SAASS,QAD1B;;AAGA,UAAMR,UAAU;AACdC,iBAASO,QADK;AAEdN,oBAAY;AACVJ;AADU;AAFE,OAAhB;;AAOA,WAAKR,aAAL,CAAmBa,OAAnB,CAA2B,kBAA3B,EAA+CH,OAA/C;AACD;;;qCAEgBS,O,EAAS;AACxB,UAAMV,WAAW,KAAKF,WAAL,EAAjB;AAAA,UACMW,WAAWT,SAASS,QAD1B;;AAGA,UAAMR,UAAU;AACdC,iBAASO,QADK;AAEdN,oBAAY;AACVO;AADU;AAFE,OAAhB;;AAOA,WAAKnB,aAAL,CAAmBa,OAAnB,CAA2B,kBAA3B,EAA+CH,OAA/C;AACD;;;mCA1FqB;AACpB,aAAO;AACL,4BAAoBf;AADf,OAAP;AAGD;;;;;;eAtBkBC,Q;;;AA+GrBA,SAASwB,OAAT,GAAmB,CAAE,cAAF,EAAkB,QAAlB,EAA4B,UAA5B,CAAnB;;AAGA;;AAEA;;;;;;AAMA,SAAShB,gBAAT,CAA0BiB,QAA1B,EAAoCxB,YAApC,EAAkD;AAChDH,UAAQ2B,QAAR,EAAkB,UAASC,OAAT,EAAkBR,EAAlB,EAAsB;AACtCjB,iBAAa0B,eAAb,CAA6BT,EAA7B,EAAiCQ,OAAjC;AACD,GAFD;AAGD","file":"Modeling.js","sourcesContent":["import {\r\n  forEach\r\n} from 'min-dash';\r\n\r\nimport UpdatePropertiesHandler\r\n  from 'dmn-js-shared/lib/features/modeling/cmd/UpdatePropertiesHandler';\r\n\r\n\r\nexport default class Modeling {\r\n\r\n  constructor(commandStack, viewer, eventBus) {\r\n    this._commandStack = commandStack;\r\n    this._viewer = viewer;\r\n    this._eventBus = eventBus;\r\n\r\n    eventBus.on('viewer.init', () => {\r\n\r\n      // register modeling handlers\r\n      registerHandlers(this.getHandlers(), commandStack);\r\n    });\r\n  }\r\n\r\n  getHandlers() {\r\n    return Modeling._getHandlers();\r\n  }\r\n\r\n  static _getHandlers() {\r\n    return {\r\n      'updateProperties': UpdatePropertiesHandler\r\n    };\r\n  }\r\n\r\n  getDecision() {\r\n    return this._viewer.getDecision();\r\n  }\r\n\r\n  editDecisionName(name) {\r\n    const decision = this.getDecision();\r\n\r\n    const context = {\r\n      element: decision,\r\n      properties: {\r\n        name\r\n      }\r\n    };\r\n\r\n    this._commandStack.execute('updateProperties', context);\r\n  }\r\n\r\n  editDecisionId(id) {\r\n    const decision = this.getDecision();\r\n\r\n    const context = {\r\n      element: decision,\r\n      properties: {\r\n        id\r\n      }\r\n    };\r\n\r\n    this._commandStack.execute('updateProperties', context);\r\n  }\r\n\r\n  editLiteralExpressionText(text) {\r\n    const decision = this.getDecision(),\r\n          literalExpression = decision.literalExpression;\r\n\r\n    const context = {\r\n      element: literalExpression,\r\n      properties: {\r\n        text\r\n      }\r\n    };\r\n\r\n    this._commandStack.execute('updateProperties', context);\r\n  }\r\n\r\n  editExpressionLanguage(expressionLanguage) {\r\n    const decision = this.getDecision(),\r\n          literalExpression = decision.literalExpression;\r\n\r\n    const context = {\r\n      element: literalExpression,\r\n      properties: {\r\n        expressionLanguage\r\n      }\r\n    };\r\n\r\n    this._commandStack.execute('updateProperties', context);\r\n  }\r\n\r\n  editVariableName(name) {\r\n    const decision = this.getDecision(),\r\n          variable = decision.variable;\r\n\r\n    const context = {\r\n      element: variable,\r\n      properties: {\r\n        name\r\n      }\r\n    };\r\n\r\n    this._commandStack.execute('updateProperties', context);\r\n  }\r\n\r\n  editVariableType(typeRef) {\r\n    const decision = this.getDecision(),\r\n          variable = decision.variable;\r\n\r\n    const context = {\r\n      element: variable,\r\n      properties: {\r\n        typeRef\r\n      }\r\n    };\r\n\r\n    this._commandStack.execute('updateProperties', context);\r\n  }\r\n}\r\n\r\nModeling.$inject = [ 'commandStack', 'viewer', 'eventBus' ];\r\n\r\n\r\n// helpers //////////////////////\r\n\r\n/**\r\n * Register handlers with the command stack\r\n *\r\n * @param {Object} handlers { id -> Handler } map\r\n * @param {CommandStack} commandStack\r\n */\r\nfunction registerHandlers(handlers, commandStack) {\r\n  forEach(handlers, function(handler, id) {\r\n    commandStack.registerHandler(id, handler);\r\n  });\r\n}"]}