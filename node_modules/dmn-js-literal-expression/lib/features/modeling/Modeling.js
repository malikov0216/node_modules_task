var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { forEach } from 'min-dash';

import UpdatePropertiesHandler from 'dmn-js-shared/lib/features/modeling/cmd/UpdatePropertiesHandler';

var Modeling = function () {
  function Modeling(commandStack, viewer, eventBus) {
    var _this = this;

    _classCallCheck(this, Modeling);

    this._commandStack = commandStack;
    this._viewer = viewer;
    this._eventBus = eventBus;

    eventBus.on('viewer.init', function () {

      // register modeling handlers
      registerHandlers(_this.getHandlers(), commandStack);
    });
  }

  _createClass(Modeling, [{
    key: 'getHandlers',
    value: function getHandlers() {
      return Modeling._getHandlers();
    }
  }, {
    key: 'getDecision',
    value: function getDecision() {
      return this._viewer.getDecision();
    }
  }, {
    key: 'editDecisionName',
    value: function editDecisionName(name) {
      var decision = this.getDecision();

      var context = {
        element: decision,
        properties: {
          name: name
        }
      };

      this._commandStack.execute('updateProperties', context);
    }
  }, {
    key: 'editDecisionId',
    value: function editDecisionId(id) {
      var decision = this.getDecision();

      var context = {
        element: decision,
        properties: {
          id: id
        }
      };

      this._commandStack.execute('updateProperties', context);
    }
  }, {
    key: 'editLiteralExpressionText',
    value: function editLiteralExpressionText(text) {
      var decision = this.getDecision(),
          literalExpression = decision.literalExpression;

      var context = {
        element: literalExpression,
        properties: {
          text: text
        }
      };

      this._commandStack.execute('updateProperties', context);
    }
  }, {
    key: 'editExpressionLanguage',
    value: function editExpressionLanguage(expressionLanguage) {
      var decision = this.getDecision(),
          literalExpression = decision.literalExpression;

      var context = {
        element: literalExpression,
        properties: {
          expressionLanguage: expressionLanguage
        }
      };

      this._commandStack.execute('updateProperties', context);
    }
  }, {
    key: 'editVariableName',
    value: function editVariableName(name) {
      var decision = this.getDecision(),
          variable = decision.variable;

      var context = {
        element: variable,
        properties: {
          name: name
        }
      };

      this._commandStack.execute('updateProperties', context);
    }
  }, {
    key: 'editVariableType',
    value: function editVariableType(typeRef) {
      var decision = this.getDecision(),
          variable = decision.variable;

      var context = {
        element: variable,
        properties: {
          typeRef: typeRef
        }
      };

      this._commandStack.execute('updateProperties', context);
    }
  }], [{
    key: '_getHandlers',
    value: function _getHandlers() {
      return {
        'updateProperties': UpdatePropertiesHandler
      };
    }
  }]);

  return Modeling;
}();

export default Modeling;


Modeling.$inject = ['commandStack', 'viewer', 'eventBus'];

// helpers //////////////////////

/**
 * Register handlers with the command stack
 *
 * @param {Object} handlers { id -> Handler } map
 * @param {CommandStack} commandStack
 */
function registerHandlers(handlers, commandStack) {
  forEach(handlers, function (handler, id) {
    commandStack.registerHandler(id, handler);
  });
}
//# sourceMappingURL=Modeling.js.map