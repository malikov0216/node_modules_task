{"version":3,"sources":["../../../src/features/keyboard/Keyboard.js"],"names":["event","domEvent","isCmd","isShift","Keyboard","config","eventBus","editorActions","_init","_registerDefaultBindings","_fire","_destroy","unbind","_listeners","_keyHandler","i","l","listeners","code","keyCode","charCode","preventDefault","stopPropagation","node","_node","_config","_eventBus","_editorActions","on","bindTo","bind","fire","undo","key","modifiers","trigger","redo","push","listenerFn","unshift","filter","$inject"],"mappings":"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","file":"Keyboard.js","sourcesContent":["import {\n  event as domEvent\n} from 'min-dom';\n\nimport {\n  isCmd,\n  isShift\n} from './KeyboardUtil';\n\n/**\n * A keyboard abstraction that may be activated and\n * deactivated by users at will, consuming key events\n * and triggering diagram actions.\n *\n * The implementation fires the following key events that allow\n * other components to hook into key handling:\n *\n *  - keyboard.bind\n *  - keyboard.unbind\n *  - keyboard.init\n *  - keyboard.destroy\n *\n * All events contain the fields (node, listeners).\n *\n * A default binding for the keyboard may be specified via the\n * `keyboard.bindTo` configuration option.\n *\n * @param {Config} config\n * @param {EventBus} eventBus\n * @param {EditorActions} editorActions\n */\nexport default class Keyboard {\n\n  constructor(config, eventBus, editorActions) {\n\n    this._config = config || {};\n    this._eventBus = eventBus;\n    this._editorActions = editorActions;\n\n    this._listeners = [];\n\n    eventBus.on('viewer.destroy', this._destroy);\n    eventBus.on('viewer.init', this._init);\n\n    eventBus.on('attach', () => {\n\n      if (this._config.bindTo) {\n        this.bind(config.bindTo);\n      }\n    });\n\n    eventBus.on('detach', this.unbind);\n  }\n\n  _init = () => {\n    this._registerDefaultBindings();\n\n    this._fire('init');\n  }\n\n  _destroy = () => {\n    this._fire('destroy');\n\n    this.unbind();\n    this._listeners = null;\n  }\n\n  // our key handler is a singleton that passes\n  // (keycode, modifiers) to each listener.\n  //\n  // listeners must indicate that they handled a key event\n  // by returning true. This stops the event propagation.\n  //\n  _keyHandler = (event) => {\n\n    var i, l,\n        listeners = this._listeners,\n        code = event.keyCode || event.charCode || -1;\n\n    for (i = 0; (l = listeners[i]); i++) {\n      if (l(code, event)) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        return;\n      }\n    }\n  }\n\n  bind(node) {\n    // make sure that the keyboard is only bound once to the DOM\n    this.unbind();\n\n    this._node = node;\n\n    // bind key events\n    domEvent.bind(node, 'keydown', this._keyHandler, true);\n\n    this._fire('bind');\n  }\n\n  getBinding() {\n    return this._node;\n  }\n\n  unbind = () => {\n    var node = this._node;\n\n    if (node) {\n      this._fire('unbind');\n\n      // unbind key events\n      domEvent.unbind(node, 'keydown', this._keyHandler, true);\n    }\n\n    this._node = null;\n  }\n\n  _fire(event) {\n    this._eventBus.fire('keyboard.' + event, {\n      node: this._node,\n      listeners: this._listeners\n    });\n  }\n\n  _registerDefaultBindings() {\n\n    var listeners = this._listeners;\n\n    var editorActions = this._editorActions;\n\n    // init default listeners\n\n    // undo\n    // (CTRL|CMD) + Z\n    function undo(key, modifiers) {\n\n      if (isCmd(modifiers) && !isShift(modifiers) && key === 90) {\n        editorActions.trigger('undo');\n\n        return true;\n      }\n    }\n\n    // redo\n    // CTRL + Y\n    // CMD + SHIFT + Z\n    function redo(key, modifiers) {\n\n      if (\n        isCmd(modifiers) && (\n          key === 89 || (\n            key === 90 && isShift(modifiers)\n          )\n        )\n      ) {\n        editorActions.trigger('redo');\n\n        return true;\n      }\n    }\n\n    listeners.push(undo);\n    listeners.push(redo);\n  }\n\n\n  /**\n   * Add a listener function that is notified with (key, modifiers) whenever\n   * the keyboard is bound and the user presses a key.\n   *\n   * @param {Function} listenerFn\n   */\n  addListener(listenerFn) {\n    this._listeners.unshift(listenerFn);\n  }\n\n  removeListener(listenerFn) {\n    this._listeners = this._listeners.filter(l => l !== listenerFn);\n  }\n\n}\n\nKeyboard.$inject = [\n  'config.keyboard',\n  'eventBus',\n  'editorActions'\n];"]}