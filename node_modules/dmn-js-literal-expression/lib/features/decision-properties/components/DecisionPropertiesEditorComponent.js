var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode, createComponentVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

import { validateId } from 'dmn-js-shared/lib/util/IdsUtil';

import EditableComponent from 'dmn-js-shared/lib/components/EditableComponent';

var DecisionPropertiesEditorComponent = function (_Component) {
  _inherits(DecisionPropertiesEditorComponent, _Component);

  function DecisionPropertiesEditorComponent(props, context) {
    _classCallCheck(this, DecisionPropertiesEditorComponent);

    var _this = _possibleConstructorReturn(this, (DecisionPropertiesEditorComponent.__proto__ || Object.getPrototypeOf(DecisionPropertiesEditorComponent)).call(this, props, context));

    _this.onElementsChanged = function () {
      _this.forceUpdate();
    };

    _this.setDecisionName = function (name) {
      _this._modeling.editDecisionName(name);
    };

    _this.setDecisionId = function (id) {
      var oldId = _this.getDecision().id;

      if (oldId === id) {
        return;
      }

      _this._modeling.editDecisionId(id);
    };

    _this.validateId = function (id) {
      return validateId(_this.getDecision(), id);
    };

    _this._viewer = context.injector.get('viewer');
    _this._modeling = context.injector.get('modeling');

    _this.setupChangeListeners({
      bind: _this.getDecision().id
    });
    return _this;
  }

  _createClass(DecisionPropertiesEditorComponent, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.setupChangeListeners({
        unbind: this.getDecision().id
      });
    }
  }, {
    key: 'getDecision',
    value: function getDecision() {
      return this._viewer.getDecision();
    }
  }, {
    key: 'setupChangeListeners',
    value: function setupChangeListeners(_ref) {
      var bind = _ref.bind,
          unbind = _ref.unbind;
      var changeSupport = this.context.changeSupport;


      if (typeof unbind === 'string') {
        changeSupport.offElementsChanged(unbind, this.onElementsChanged);
      }

      if (typeof bind === 'string') {
        changeSupport.onElementsChanged(bind, this.onElementsChanged);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _getDecision = this.getDecision(),
          name = _getDecision.name,
          id = _getDecision.id;

      return createVNode(1, 'header', 'decision-properties', [createComponentVNode(2, DecisionName, {
        'className': 'decision-name editor',
        'value': name,
        'onChange': this.setDecisionName
      }), createComponentVNode(2, DecisionId, {
        'className': 'decision-id editor',
        'value': id,
        'validate': this.validateId,
        'onChange': this.setDecisionId
      })], 4);
    }
  }]);

  return DecisionPropertiesEditorComponent;
}(Component);

export default DecisionPropertiesEditorComponent;

var DecisionName = function (_EditableComponent) {
  _inherits(DecisionName, _EditableComponent);

  function DecisionName() {
    _classCallCheck(this, DecisionName);

    return _possibleConstructorReturn(this, (DecisionName.__proto__ || Object.getPrototypeOf(DecisionName)).apply(this, arguments));
  }

  _createClass(DecisionName, [{
    key: 'render',
    value: function render() {

      return createVNode(1, 'h3', this.getClassName(), this.getEditor(), 0);
    }
  }]);

  return DecisionName;
}(EditableComponent);

var DecisionId = function (_EditableComponent2) {
  _inherits(DecisionId, _EditableComponent2);

  function DecisionId() {
    _classCallCheck(this, DecisionId);

    return _possibleConstructorReturn(this, (DecisionId.__proto__ || Object.getPrototypeOf(DecisionId)).apply(this, arguments));
  }

  _createClass(DecisionId, [{
    key: 'render',
    value: function render() {

      return createVNode(1, 'h5', this.getClassName(), this.getEditor(), 0);
    }
  }]);

  return DecisionId;
}(EditableComponent);
//# sourceMappingURL=DecisionPropertiesEditorComponent.js.map