var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

import { createVNode, createComponentVNode } from 'inferno';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'inferno';

import EditableComponent from 'dmn-js-shared/lib/components/EditableComponent';

var TextareaEditorComponent = function (_Component) {
  _inherits(TextareaEditorComponent, _Component);

  function TextareaEditorComponent(props, context) {
    _classCallCheck(this, TextareaEditorComponent);

    var _this = _possibleConstructorReturn(this, (TextareaEditorComponent.__proto__ || Object.getPrototypeOf(TextareaEditorComponent)).call(this, props, context));

    _this._modeling = context.injector.get('modeling');

    _this._viewer = context.injector.get('viewer');

    _this.editLiteralExpressionText = _this.editLiteralExpressionText.bind(_this);
    _this.onElementsChanged = _this.onElementsChanged.bind(_this);

    // there is only one single element

    var _this$getLiteralExpre = _this.getLiteralExpression(),
        id = _this$getLiteralExpre.id;

    context.changeSupport.onElementsChanged(id, _this.onElementsChanged);
    return _this;
  }

  _createClass(TextareaEditorComponent, [{
    key: 'getLiteralExpression',
    value: function getLiteralExpression() {
      return this._viewer.getDecision().literalExpression;
    }
  }, {
    key: 'onElementsChanged',
    value: function onElementsChanged() {
      this.forceUpdate();
    }
  }, {
    key: 'editLiteralExpressionText',
    value: function editLiteralExpressionText(text) {
      this._modeling.editLiteralExpressionText(text);
    }
  }, {
    key: 'render',
    value: function render() {

      // there is only one single element
      var _getLiteralExpression = this.getLiteralExpression(),
          text = _getLiteralExpression.text;

      return createComponentVNode(2, Editor, {
        'className': 'textarea editor',
        'value': text,
        'onChange': this.editLiteralExpressionText
      });
    }
  }]);

  return TextareaEditorComponent;
}(Component);

export default TextareaEditorComponent;

var Editor = function (_EditableComponent) {
  _inherits(Editor, _EditableComponent);

  function Editor() {
    _classCallCheck(this, Editor);

    return _possibleConstructorReturn(this, (Editor.__proto__ || Object.getPrototypeOf(Editor)).apply(this, arguments));
  }

  _createClass(Editor, [{
    key: 'render',
    value: function render() {

      return createVNode(1, 'div', this.getClassName(), this.getEditor(), 0);
    }
  }]);

  return Editor;
}(EditableComponent);
//# sourceMappingURL=TextareaEditorComponent.js.map