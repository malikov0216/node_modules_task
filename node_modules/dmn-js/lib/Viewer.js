var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import Manager from 'dmn-js-shared/lib/base/Manager';

import DrdViewer from 'dmn-js-drd/lib/Viewer';
import DecisionTableViewer from 'dmn-js-decision-table/lib/Viewer';
import LiteralExpressionViewer from 'dmn-js-literal-expression/lib/Viewer';

import { is } from 'dmn-js-shared/lib/util/ModelUtil';
import { containsDi } from 'dmn-js-shared/lib/util/DiUtil';

/**
 * The dmn viewer.
 */

var Viewer = function (_Manager) {
  _inherits(Viewer, _Manager);

  function Viewer() {
    _classCallCheck(this, Viewer);

    return _possibleConstructorReturn(this, (Viewer.__proto__ || Object.getPrototypeOf(Viewer)).apply(this, arguments));
  }

  _createClass(Viewer, [{
    key: '_getViewProviders',
    value: function _getViewProviders() {

      return [{
        id: 'drd',
        constructor: DrdViewer,
        opens: function opens(element) {
          return is(element, 'dmn:Definitions') && containsDi(element);
        }
      }, {
        id: 'decisionTable',
        constructor: DecisionTableViewer,
        opens: function opens(element) {
          return is(element, 'dmn:Decision') && element.decisionTable;
        }
      }, {
        id: 'literalExpression',
        constructor: LiteralExpressionViewer,
        opens: function opens(element) {
          return is(element, 'dmn:Decision') && element.literalExpression;
        }
      }];
    }
  }]);

  return Viewer;
}(Manager);

export default Viewer;
//# sourceMappingURL=Viewer.js.map